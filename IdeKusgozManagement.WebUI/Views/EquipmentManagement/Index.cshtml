@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Ekipman Yönetimi";
}

@section Styles {
    <link href="~/theme/assets/plugins/DataTables/datatables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />
}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="fas fa-tools me-2"></i>
                    Ekipman Yönetimi
                </h5>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                    data-bs-target="#createEquipmentModal">
                    <i class="fas fa-plus me-2"></i>Ekipman Ekle
                </button>
                <br />
                <br />
                <div class="table-responsive">
                    <table id="equipmentsTable" class="table table-striped table-hover display" style="width:100%">
                        <thead class="table-dark">
                            <tr>
                                <th>#</th>
                                <th>EKİPMAN ADI</th>
                                <th>AKTİF Mİ</th>
                                <th>İŞLEMLER</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- DataTables will populate this -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Equipment Modal -->
<div class="modal fade" id="createEquipmentModal" tabindex="-1" aria-labelledby="createEquipmentModalLabel"
    aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ekipman Ekleme</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form class="needs-validation" novalidate id="createEquipmentForm">
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-12">
                            <label for="txtCName" class="form-label">Ekipman Adı</label>
                            <input type="text" class="form-control" id="txtCName" required>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Geçerli bir ekipman adı giriniz.</div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Kapat</button>
                    <button type="submit" class="btn btn-primary w-100"><i class="fas fa-add me-1"></i>Ekle</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Update Equipment Modal -->
<div class="modal fade" id="updateEquipmentModal" tabindex="-1" aria-labelledby="updateEquipmentModalLabel"
    aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ekipman Güncelleme</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form class="needs-validation" novalidate id="updateEquipmentForm">
                <div class="modal-body">
                    <input type="hidden" id="txtUId">
                    <div class="row g-3">
                        <div class="col-md-12">
                            <label for="txtUName" class="form-label">Ekipman Adı</label>
                            <input type="text" class="form-control" id="txtUName" required>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Geçerli bir ekipman adı giriniz.</div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Kapat</button>
                    <button type="submit" class="btn btn-primary w-100"><i class="fas fa-pen me-1"></i>Güncelle</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/theme/assets/plugins/DataTables/datatables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>
        let equipmentsTable;

        $(document).ready(async function () {
            setupEventListeners();

            await initializeDataTable();
        });

        async function initializeDataTable() {
            equipmentsTable = $('#equipmentsTable').DataTable({
                "processing": true,
                "ajax": {
                    "url": "/ekipman-yonetimi/liste",
                    "type": "GET",
                    "dataSrc": function (json) {
                        if (json && json.isSuccess && json.data) {
                            return json.data;
                        }
                        return [];
                    },
                    "error": function (xhr, error, code) {
                        console.error('DataTables AJAX error:', error);
                        let errorMessage = 'Veriler yüklenirken hata oluştu';
                        try {
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage += ': ' + xhr.responseJSON.message;
                            } else if (xhr.responseText) {
                                errorMessage += ': ' + xhr.responseText;
                            }
                        } catch (e) {
                            errorMessage += ': ' + error;
                        }

                        toastr.error(errorMessage);
                    }
                },
                "columns": [
                    {
                        "data": null,
                        "width": "5%",
                        "orderable": false,
                        "className": "text-center",
                        "render": function (data, type, row, meta) {
                            return '';
                        }
                    },
                    {
                        "data": "name",
                        "render": function (data) {
                            return data ? `<strong>${data}</strong>` : '';
                        }
                    },
                    {
                        "data": "isActive",
                        "width": "10%",
                        "className": "text-center",
                        "render": function (data) {
                            return data ?
                                '<span class="badge bg-success">Evet</span>' :
                                '<span class="badge bg-danger">Hayır</span>';
                        }
                    },
                    {
                        "data": null,
                        "width": "10%",
                        "orderable": false,
                        "className": "text-center",
                        "render": function (data, type, row) {

                            const statusButton = row.isActive
                                ? `<button type="button" class="btn btn-outline-success btn-sm"
                                                onclick="deactivateEquipment('${row.id}')" title="Pasifleştir">
                                                    <i class="fas fa-toggle-on"></i>
                                                </button>`
                                : `<button type="button" class="btn btn-outline-secondary btn-sm"
                                                onclick="activateEquipment('${row.id}')" title="Aktifleştir">
                                                    <i class="fas fa-toggle-off"></i>
                                               </button>`;
                            return `
                                                    <div class="btn-group btn-group-sm" role="group">
                                                     <button type="button" class="btn btn-outline-warning btn-sm"
                                                       onclick="loadEquipmentForEdit('${row.id}')" title="Düzenle">
                                                      <i class="fas fa-edit"></i>
                                                     </button>
                                                     ${statusButton}
                                                     <button type="button" class="btn btn-outline-danger btn-sm"
                                                       onclick="deleteEquipment('${row.id}')" title="Sil">
                                                      <i class="fas fa-trash"></i>
                                                     </button>
                                                    </div>
                                               `;
                        }
                    }
                ],
                "language": {
                    url: 'https://cdn.datatables.net/plug-ins/2.3.2/i18n/tr.json'
                },
                "lengthMenu": [[10, 25, 50, 100], [10, 25, 50, 100]],
                "pageLength": 10,
                "responsive": true,
                "searchDelay": 300,
                "stateSave": true,
                "dom": '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
                    '<"row"<"col-sm-12"tr>>' +
                    '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
                "initComplete": function () {
                },
                "drawCallback": function () {
                    var api = this.api();
                    var pageInfo = api.page.info();

                    api.column(0, { page: 'current' }).nodes().each(function (cell, i) {
                        cell.innerHTML = pageInfo.start + i + 1;
                    });
                    $('[title]').tooltip();
                }
            });
        }

        function setupEventListeners() {
            // Create equipment form
            $('#createEquipmentForm').on('submit', function (e) {
                e.preventDefault();
                if (this.checkValidity()) {
                    createEquipment();
                }
                $(this).addClass('was-validated');
            });

            // Update equipment form
            $('#updateEquipmentForm').on('submit', function (e) {
                e.preventDefault();
                if (this.checkValidity()) {
                    updateEquipment();
                }
                $(this).addClass('was-validated');
            });



            // Clear forms when modals hide
            $('#createEquipmentModal').on('hidden.bs.modal', function () {
                $('#createEquipmentForm')[0].reset();
                $('#createEquipmentForm').removeClass('was-validated');
            });

            $('#updateEquipmentModal').on('hidden.bs.modal', function () {
                $('#updateEquipmentForm')[0].reset();
                $('#updateEquipmentForm').removeClass('was-validated');
            });
        }

        async function createEquipment() {
            const equipmentData = {
                name: $('#txtCName').val()
            };

            try {
                const response = await $.ajax({
                    url: '/ekipman-yonetimi',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(equipmentData),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                if (response.isSuccess) {
                    toastr.success(response.message, 'Başarılı!');
                    $('#createEquipmentModal').modal('hide');
                    equipmentsTable.ajax.reload();
                } else {
                    toastr.error(response.message, 'Hata!');
                }
            } catch (error) {
                console.error('Create equipment error:', error);
                toastr.error(error.responseJSON.message, 'Hata!');
            }
        }

        async function loadEquipmentForEdit(equipmentId) {
            try {
                const response = await $.ajax({
                    url: `/ekipman-yonetimi/${equipmentId}`,
                    type: 'GET'
                });

                if (response.isSuccess) {
                    $('#txtUId').val(response.data.id);
                    $('#txtUName').val(response.data.name);
                    $('#updateEquipmentModal').modal('show');
                } else {
                    toastr.error(response.message, 'Hata!');
                }
            } catch (error) {
                console.error('Load equipment error:', error);
                toastr.error(error.responseJSON.message, 'Hata!');
            }
        }

        async function updateEquipment() {
            const equipmentId = $('#txtUId').val();
            const equipmentData = {
                name: $('#txtUName').val()
            };

            try {
                const response = await $.ajax({
                    url: `/ekipman-yonetimi/${equipmentId}`,
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(equipmentData),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                if (response.isSuccess) {
                    toastr.success(response.message, 'Başarılı!');
                    $('#updateEquipmentModal').modal('hide');
                    equipmentsTable.ajax.reload();
                } else {
                    toastr.error(response.message, 'Hata!');
                }
            } catch (error) {
                console.error('Update equipment error:', error);
                toastr.error(error.responseJSON.message, 'Hata!');
            }
        }

        async function deleteEquipment(equipmentId) {
            Swal.fire({
                title: 'Emin misiniz?',
                text: "Bu ekipman silinecek ve geri alınamayacak!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Evet, Sil!',
                cancelButtonText: 'İptal'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await $.ajax({
                            url: `/ekipman-yonetimi/${equipmentId}`,
                            type: 'DELETE',
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            }
                        });

                        if (response.isSuccess) {
                            toastr.success(response.message, 'Başarılı!');
                            equipmentsTable.ajax.reload();
                        } else {
                            toastr.error(response.message, 'Hata!');
                        }
                    } catch (error) {
                        console.error('Delete equipment error:', error);
                        toastr.error(error.responseJSON.message, 'Hata!');
                    }
                }
            });
        }

        async function activateEquipment(equipmentId) {
            try {
                const result = await Swal.fire({
                    title: 'Ekipmanı Aktifleştir',
                    text: 'Bu ekipmanı aktifleştirmek istediğinizden emin misiniz?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-check"></i> Evet, Aktifleştir',
                    cancelButtonText: '<i class="fas fa-times"></i> İptal',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const response = await $.ajax({
                                url: `/ekipman-yonetimi/${equipmentId}/aktif-et`,
                                type: 'PUT',
                                contentType: 'application/json',
                                headers: {
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                }
                            });
                            return response;
                        } catch (error) {
                            let errorMessage = 'Aktifleştirme başarısız';
                            if (error.responseJSON) {
                                if (error.responseJSON.message) {
                                    errorMessage = error.responseJSON.message;
                                } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                                    errorMessage = error.responseJSON.errors.join(', ');
                                }
                            }
                            Swal.showValidationMessage(`Hata: ${errorMessage}`);
                            throw error;
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    await Swal.fire({
                        title: 'Başarılı!',
                        text: 'Ekipman başarıyla aktifleştirildi.',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });

                    equipmentsTable.ajax.reload(null, false);
                }

            } catch (error) {
                console.error('Aktifleştirme hatası:', error);
                throw error;
            }
        }

        async function deactivateEquipment(equipmentId) {
            try {
                const result = await Swal.fire({
                    title: 'Ekipmanı Pasifleştir',
                    text: 'Bu ekipmanı pasifleştirmek istediğinizden emin misiniz?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#ffc107',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-user-slash"></i> Evet, Pasifleştir',
                    cancelButtonText: '<i class="fas fa-times"></i> İptal',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const response = await $.ajax({
                                url: `/ekipman-yonetimi/${equipmentId}/pasif-et`,
                                type: 'PUT',
                                contentType: 'application/json',
                                headers: {
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                }
                            });
                            return response;
                        } catch (error) {
                            let errorMessage = 'Pasifleştirme başarısız';
                            if (error.responseJSON) {
                                if (error.responseJSON.message) {
                                    errorMessage = error.responseJSON.message;
                                } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                                    errorMessage = error.responseJSON.errors.join(', ');
                                }
                            }
                            Swal.showValidationMessage(`Hata: ${errorMessage}`);
                            throw error;
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    await Swal.fire({
                        title: 'Başarılı!',
                        text: 'Ekipman başarıyla pasifleştirildi.',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });

                    equipmentsTable.ajax.reload(null, false);
                }

            } catch (error) {
                console.error('Pasifleştirme hatası:', error);
                throw error;
            }
        }
    </script>
}
