@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Trafik Cezası Yönetimi";
}

@section Styles {
    <link href="~/theme/assets/plugins/DataTables/datatables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
    <style>
        a {
            margin-left: 20px;
        }
    </style>
}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="fas fa-tools me-2"></i>
                    Trafik Cezası Yönetimi
                </h5>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                        data-bs-target="#createtrafficTicketModal">
                    <i class="fas fa-plus me-2"></i>Trafik Cezası Ekle
                </button>
                <br />
                <br />
                <div class="table-responsive">
                    <table id="trafficTicketsTable" class="table table-striped table-hover display" style="width:100%">
                        <thead class="table-dark">
                            <tr>
                                <th>#</th>
                                <th>PROJE<br />ADI</th>
                                <th>EKİPMAN<br />ADI</th>
                                <th>TUTAR</th>
                                <th>TİP</th>
                                <th>ŞAHIS</th>
                                <th>CEZA<br />TARİHİ</th>
                                <th>DÖKÜMAN</th>
                                <th>OLUŞTURMA<br />TARİHİ</th>
                                <th>İŞLEMLER</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- DataTables will populate this -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create trafficTicket Modal -->
<div class="modal fade" id="createtrafficTicketModal" tabindex="-1" aria-labelledby="createtrafficTicketModalLabel"
     aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Trafik Cezası Ekleme Penceresi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form class="needs-validation" novalidate id="createtrafficTicketForm" enctype="multipart/form-data">
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="selectCProject" class="form-label">Proje</label>
                            <select class="form-select project-select" id="selectCProject" required>
                                <option value="">Proje seçin</option>
                            </select>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen bir proje seçiniz.</div>
                        </div>
                        <div class="col-md-6">
                            <label for="selectCEquipment" class="form-label">Ekipman </label>
                            <select class="form-select equipment-select" id="selectCEquipment" required>
                                <option value="">Ekipman seçin</option>
                            </select>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen bir ekipman seçiniz.</div>
                        </div>
                        <div class="col-md-6">
                            <label for="txtCAmount" class="form-label">Tutar </label>
                            <input type="number" class="form-control" id="txtCAmount" step="0.01" min="0" required>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Geçerli bir tutar giriniz.</div>
                        </div>
                        <div class="col-md-6">
                            <label for="selectCType" class="form-label">Tip </label>
                            <select class="form-select" id="selectCType" required>
                                <option value="">Tip seçin</option>
                                <option value="1">Personel</option>
                                <option value="2">Şirket</option>
                            </select>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen bir tip seçiniz.</div>
                        </div>
                        <div class="col-md-6">
                            <label for="c-date-trafficTicket" class="form-label">Ceza Tarihi</label>
                            <div class="input-group">
                                <input type="text" class="form-control date-trafficTicket" id="c-date-trafficTicket"
                                       required placeholder="Ceza tarihini seçin">
                                <span class="input-group-text">
                                    <i class="fas fa-calendar"></i>
                                </span>
                            </div>
                        </div>
                        <div class="col-md-6" id="userSelectContainer" style="display: none;">
                            <label for="selectCUser" class="form-label">Kullanıcı </label>
                            <select class="form-select user-select" id="selectCUser">
                                <option value="">Kullanıcı seçin</option>
                            </select>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen bir kullanıcı seçiniz.</div>
                        </div>
                        <div class="col-md-12">
                            <label for="fileCUpload" class="form-label">Dosya </label>
                            <input type="file" class="form-control" id="fileCUpload"
                                   accept=".pdf,.jpg,.jpeg,.png,.doc,.docx" required>
                            <div class="form-text">Desteklenen formatlar: PDF, JPG, JPEG, PNG, DOC, DOCX</div>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen bir dosya seçiniz.</div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Kapat</button>
                    <button type="submit" class="btn btn-primary w-100"><i class="fas fa-add me-1"></i>Ekle</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Update trafficTicket Modal -->
<div class="modal fade" id="updatetrafficTicketModal" tabindex="-1" aria-labelledby="updatetrafficTicketModalLabel"
     aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Trafik Cezası Güncelleme Penceresi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form class="needs-validation" novalidate id="updatetrafficTicketForm" enctype="multipart/form-data">
                <div class="modal-body">
                    <input type="hidden" id="txtUId">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="selectUProject" class="form-label">Proje</label>
                            <select class="form-select project-select" id="selectUProject" required>
                                <option value="">Proje seçin</option>
                            </select>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen bir proje seçiniz.</div>
                        </div>
                        <div class="col-md-6">
                            <label for="selectUEquipment" class="form-label">Ekipman</label>
                            <select class="form-select equipment-select" id="selectUEquipment" required>
                                <option value="">Ekipman seçin</option>
                            </select>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen bir ekipman seçiniz.</div>
                        </div>
                        <div class="col-md-6">
                            <label for="txtUAmount" class="form-label">Tutar</label>
                            <input type="number" class="form-control" id="txtUAmount" step="0.01" min="0" required>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Geçerli bir tutar giriniz.</div>
                        </div>
                        <div class="col-md-6">
                            <label for="selectUType" class="form-label">Tip</label>
                            <select class="form-select" id="selectUType" required>
                                <option value="" selected disabled>Tip seçin</option>
                                <option value="1">Personel</option>
                                <option value="2">Şirket</option>
                            </select>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen bir tip seçiniz.</div>
                        </div>
                        <div class="col-md-6">
                            <label for="u-date-trafficTicket" class="form-label">Ceza Tarihi</label>
                            <div class="input-group">
                                <input type="text" class="form-control date-trafficTicket" id="u-date-trafficTicket"
                                       required placeholder="Ceza tarihini seçin">
                                <span class="input-group-text">
                                    <i class="fas fa-calendar"></i>
                                </span>
                            </div>
                        </div>
                        <div class="col-md-6" id="userSelectUpdateContainer" style="display: none;">
                            <label for="selectUUser" class="form-label">Kullanıcı </label>
                            <select class="form-select user-select" id="selectUUser">
                                <option value="">Kullanıcı seçin</option>
                            </select>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen bir kullanıcı seçiniz.</div>
                        </div>
                        <div class="col-md-12">
                            <label for="fileUUpload" class="form-label">Dosya</label>
                            <input type="file" class="form-control" id="fileUUpload"
                                   accept=".pdf,.jpg,.jpeg,.png,.doc,.docx">
                            <div class="form-text">
                                Desteklenen formatlar: PDF, JPG, JPEG, PNG, DOC, DOCX (Yeni dosya
                                seçmezseniz mevcut dosya korunur)
                            </div>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen geçerli bir dosya seçiniz.</div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Kapat</button>
                    <button type="submit" class="btn btn-primary w-100"><i class="fas fa-pen me-1"></i>Güncelle</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/theme/assets/plugins/DataTables/datatables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>

    <script>
        let trafficTicketsTable;

        $(document).ready(async function () {
            setupEventListeners();
            await initializeSelects();
            await initializeDataTable();

            var turkishLocale = {
                "format": 'DD/MM/YYYY',
                "separator": ' - ',
                "applyLabel": 'Uygula',
                "cancelLabel": 'İptal',
                "fromLabel": 'Başlangıç',
                "toLabel": 'Bitiş',
                "customRangeLabel": 'Özel',
                "weekLabel": 'Hf',
                "daysOfWeek": [
                    "Pz",
                    "Pt",
                    "Sl",
                    "Çr",
                    "Pr",
                    "Cm",
                    "Ct"
                ], "monthNames": ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'],
                "firstDay": 1
            };

            $('.date-trafficTicket').daterangepicker({
                locale: turkishLocale,
                opens: 'left',
                autoUpdateInput: false,
                autoApply: true,
                singleDatePicker: true
            });

            $('#c-date-trafficTicket').on('apply.daterangepicker', function (ev, picker) {
                $(this).val(picker.startDate.format('DD/MM/YYYY'));
            });

            $('#c-date-trafficTicket').on('cancel.daterangepicker', function (ev, picker) {
                $(this).val('');
            });

            $('#u-date-trafficTicket').on('apply.daterangepicker', function (ev, picker) {
                $(this).val(picker.startDate.format('DD/MM/YYYY'));
            });

            $('#u-date-trafficTicket').on('cancel.daterangepicker', function (ev, picker) {
                $(this).val('');
            });

            $('.fa-calendar').parent().on('click', function () {
                $(this).closest('.input-group').find('.date-trafficTicket').focus();
            });

            // Type change event for conditional user select
            $('#selectCType, #selectUType').on('change', function () {
                const isCreate = $(this).attr('id') === 'selectCType';
                const containerId = isCreate ? '#userSelectContainer' : '#userSelectUpdateContainer';
                const selectId = isCreate ? '#selectCUser' : '#selectUUser';

                if ($(this).val() === '1') { // Personel
                    $(containerId).show();
                    $(selectId).prop('required', true);
                } else { // Şirket
                    $(containerId).hide();
                    $(selectId).prop('required', false);
                    $(selectId).val('').trigger('change');
                }
            });
        });

        async function initializeSelects() {
            try {
                // Initialize projects
                await initializeProjectSelect();
                // Initialize equipment
                await initializeEquipmentSelect();
                // Initialize users
                await initializeUserSelect();
            } catch (error) {
                console.error('Select initialization error:', error);
                toastr.error('Select alanları yüklenirken hata oluştu', 'Hata!');
            }
        }

        async function initializeProjectSelect() {
            try {
                const response = await $.ajax({
                    url: '/proje/aktif-liste',
                    type: 'GET',
                    dataType: 'json'
                });

                if (response && response.isSuccess && response.data) {
                    $('.project-select').each(function () {
                        const currentSelect = $(this);
                        currentSelect.empty();
                        currentSelect.append('<option value="">Proje seçin</option>');
                        response.data.forEach(project => {
                            currentSelect.append(`<option value="${project.id}">${project.name}</option>`);
                        });
                    });
                }

                $('.project-select').select2({
                    placeholder: 'Proje seçin',
                    theme: 'bootstrap-5',
                    allowClear: true,
                    width: '100%'
                });
            } catch (error) {
                console.error('Proje listesi yüklenirken hata:', error);
                toastr.error('Proje listesi yüklenirken hata oluştu', 'Hata!');
            }
        }

        async function initializeEquipmentSelect() {
            try {
                const response = await $.ajax({
                    url: '/ekipman/aktif-liste',
                    type: 'GET',
                    dataType: 'json'
                });

                if (response && response.isSuccess && response.data) {
                    $('.equipment-select').each(function () {
                        const currentSelect = $(this);
                        currentSelect.empty();
                        currentSelect.append('<option value="">Ekipman seçin</option>');
                        response.data.forEach(equipment => {
                            currentSelect.append(`<option value="${equipment.id}">${equipment.name}</option>`);
                        });
                    });
                }

                $('.equipment-select').select2({
                    placeholder: 'Ekipman seçin',
                    theme: 'bootstrap-5',
                    allowClear: true,
                    width: '100%'
                });
            } catch (error) {
                console.error('Ekipman listesi yüklenirken hata:', error);
                toastr.error('Ekipman listesi yüklenirken hata oluştu', 'Hata!');
            }
        }

        async function initializeUserSelect() {
            try {
                const response = await $.ajax({
                    url: '/kullanici/liste',
                    type: 'GET',
                    dataType: 'json'
                });

                if (response && response.isSuccess && response.data) {
                    $('.user-select').each(function () {
                        const currentSelect = $(this);
                        currentSelect.empty();
                        currentSelect.append('<option value="">Kullanıcı seçin</option>');
                        response.data.forEach(user => {
                            currentSelect.append(`<option value="${user.id}">${user.fullName}</option>`);
                        });
                    });
                }

                $('.user-select').select2({
                    placeholder: 'Kullanıcı seçin',
                    theme: 'bootstrap-5',
                    allowClear: true,
                    width: '100%'
                });
            } catch (error) {
                console.error('Kullanıcı listesi yüklenirken hata:', error);
                toastr.error('Kullanıcı listesi yüklenirken hata oluştu', 'Hata!');
            }
        }

        async function initializeDataTable() {
            trafficTicketsTable = $('#trafficTicketsTable').DataTable({
                "processing": true,
                "ajax": {
                    "url": "/trafik-ceza/liste",
                    "type": "GET",
                    "dataSrc": function (json) {
                        if (json && json.isSuccess && json.data) {
                            return json.data;
                        }
                        return [];
                    },
                    "error": function (xhr, error, code) {
                        console.error('DataTables AJAX error:', error);
                        let errorMessage = 'Veriler yüklenirken hata oluştu';
                        try {
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage += ': ' + xhr.responseJSON.message;
                            } else if (xhr.responseText) {
                                errorMessage += ': ' + xhr.responseText;
                            }
                        } catch (e) {
                            errorMessage += ': ' + error;
                        }

                        toastr.error(errorMessage);
                    }
                },
                "columns": [
                    {
                        "data": null,
                        "width": "5%",
                        "orderable": false,
                        "className": "text-center",
                        "render": function (data, type, row, meta) {
                            return '';
                        }
                    },
                    {
                        "data": "projectName",
                        "render": function (data) {
                            return data ? data : '';
                        }
                    },
                    {
                        "data": "equipmentName",
                        "render": function (data) {
                            return data ? data : '';
                        }
                    },
                    {
                        "data": "amount",
                        "render": function (data) {
                            if (data) {
                                const formattedTotal = new Intl.NumberFormat('tr-TR', {
                                    style: 'currency',
                                    currency: 'TRY',
                                    minimumFractionDigits: 2
                                }).format(data);
                                return formattedTotal;
                            }
                            return '';
                        }
                    },
                    {
                        "data": "type",
                        "width": "10%",
                        "className": "text-center",
                        "render": function (data) {
                            return data != null ? data == "1" ? '<span class="badge bg-warning">Personel</span>' : '<span class="badge bg-info">Şirket</span>' : '';
                        }
                    },
                    {
                        "data": "targetUserFullName",
                        "className": "text-center",
                        "render": function (data) {
                            return data != null ? data : '';
                        }
                    },
                    {
                        "data": "ticketDate",
                        "render": function (data) {
                            return data ? new Date(data).toLocaleDateString('tr-TR') : '';
                        }
                    },
                    {
                        "data": "fileId",
                        "render": function (data, type, row) {
                            return `<a href="/dosya/indir/${data}"
                                                           download
                                                           class="text-muted text-decoration-underline">
                                                            <i class="fas fa-file fa-lg"></i>
                                                        </a>`;
                        }
                    },
                    {
                        "data": "createdDate",
                        "render": function (data) {
                            return data ? new Date(data).toLocaleDateString('tr-TR') : '';
                        }
                    },
                    {
                        "data": null,
                        "width": "10%",
                        "orderable": false,
                        "className": "text-center",
                        "render": function (data, type, row) {

                            return `
                                                                        <div class="btn-group btn-group-sm" role="group">
                                                                         <button type="button" class="btn btn-outline-warning btn-sm"
                                                                           onclick="loadtrafficTicketForEdit('${row.id}')" title="Düzenle">
                                                                          <i class="fas fa-edit"></i>
                                                                         </button>
                                                                         <button type="button" class="btn btn-outline-danger btn-sm"
                                                                           onclick="deletetrafficTicket('${row.id}')" title="Sil">
                                                                          <i class="fas fa-trash"></i>
                                                                         </button>
                                                                        </div>
                                                                   `;
                        }
                    }
                ],
                "language": {
                    url: 'https://cdn.datatables.net/plug-ins/2.3.2/i18n/tr.json'
                },
                "lengthMenu": [[10, 25, 50, 100], [10, 25, 50, 100]],
                "pageLength": 10,
                "responsive": true,
                "searchDelay": 300,
                "order": [[6, "desc"]],
                "drawCallback": function () {
                    var api = this.api();
                    var pageInfo = api.page.info();

                    api.column(0, { page: 'current' }).nodes().each(function (cell, i) {
                        cell.innerHTML = pageInfo.start + i + 1;
                    });
                    $('[title]').tooltip();
                }
            });
        }

        function setupEventListeners() {
            $('#createtrafficTicketForm').on('submit', function (e) {
                e.preventDefault();
                if (this.checkValidity()) {
                    createtrafficTicket();
                }
                $(this).addClass('was-validated');
            });

            $('#updatetrafficTicketForm').on('submit', function (e) {
                e.preventDefault();
                if (this.checkValidity()) {
                    updatetrafficTicket();
                }
                $(this).addClass('was-validated');
            });

            // Clear forms when modals hide
            $('#createtrafficTicketModal').on('hidden.bs.modal', function () {
                $('#createtrafficTicketForm')[0].reset();
                $('#createtrafficTicketForm').removeClass('was-validated');
                // Reset select2 fields
                $('#selectCProject, #selectCEquipment, #selectCUser').val('').trigger('change');
                $('#selectCType').val('').trigger('change');
                $('#userSelectContainer').hide();
                $('#selectCUser').prop('required', false);
            });

            $('#updatetrafficTicketModal').on('hidden.bs.modal', function () {
                $('#updatetrafficTicketForm')[0].reset();
                $('#updatetrafficTicketForm').removeClass('was-validated');
                // Reset select2 fields
                $('#selectUProject, #selectUEquipment, #selectUUser').val('').trigger('change');
                $('#selectUType').val('').trigger('change');
                $('#userSelectUpdateContainer').hide();
                $('#selectUUser').prop('required', false);
            });
        }

        async function createtrafficTicket() {
            var picker = $('#c-date-trafficTicket').data('daterangepicker');
            var ticketDate = picker.startDate.format('YYYY-MM-DD');
            console.log(ticketDate)
            const formData = new FormData();
            formData.append('ProjectId', $('#selectCProject').val());
            formData.append('EquipmentId', $('#selectCEquipment').val());
            formData.append('Type', parseInt($('#selectCType').val()));
            formData.append('Amount', parseFloat($('#txtCAmount').val()));
            formData.append('TicketDate', ticketDate);

            if ($('#selectCType').val() === '1') {
                formData.append('TargetUserId', $('#selectCUser').val());
            }

            const fileInput = $('#fileCUpload')[0];
            if (fileInput.files.length > 0) {
                formData.append('File.FormFile', fileInput.files[0]);
            }

            try {
                const response = await $.ajax({
                    url: '/trafik-ceza',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                if (response.isSuccess) {
                    toastr.success(response.message, 'Başarılı!');
                    $('#createtrafficTicketModal').modal('hide');
                    trafficTicketsTable.ajax.reload();
                } else {
                    toastr.error(response.message, 'Hata!');
                }
            } catch (error) {
                console.error('Create trafficTicket error:', error);
                toastr.error(error.responseJSON?.message || 'Trafik cezası oluşturulurken hata oluştu', 'Hata!');
            }
        }

        async function loadtrafficTicketForEdit(trafficTicketId) {
            try {
                const response = await $.ajax({
                    url: `/trafik-ceza/${trafficTicketId}`,
                    type: 'GET'
                });

                if (response.isSuccess) {
                    const data = response.data;
                    $('#txtUId').val(data.id);
                    $('#selectUProject').val(data.projectId).trigger('change');
                    $('#selectUEquipment').val(data.equipmentId).trigger('change');
                    $('#txtUAmount').val(data.amount);
                    $('#selectUType').val(data.type).trigger('change');

                    if (data.ticketDate && $('#u-date-trafficTicket').data('daterangepicker')) {
                        const ticketDate = moment(data.ticketDate);
                        $('#u-date-trafficTicket').val(ticketDate.format('DD/MM/YYYY'));
                        $('#u-date-trafficTicket').data('daterangepicker').setStartDate(ticketDate);
                    }

                    if (data.type === 1 && data.targetUserId) {
                        $('#selectUUser').val(data.targetUserId).trigger('change');
                    }

                    $('#updatetrafficTicketModal').modal('show');
                } else {
                    toastr.error(response.message, 'Hata!');
                }
            } catch (error) {
                console.error('Load trafficTicket error:', error);
                toastr.error(error.responseJSON?.message || 'Trafik cezası yüklenirken hata oluştu', 'Hata!');
            }
        }

        async function updatetrafficTicket() {
            var picker = $('#u-date-trafficTicket').data('daterangepicker');
            var ticketDate = picker.startDate.format('YYYY-MM-DD');
            const trafficTicketId = $('#txtUId').val();

            const formData = new FormData();
            formData.append('ProjectId', $('#selectUProject').val());
            formData.append('EquipmentId', $('#selectUEquipment').val());
            formData.append('Type', parseInt($('#selectUType').val()));
            formData.append('Amount', parseFloat($('#txtUAmount').val()));
            formData.append('TicketDate', ticketDate);

            if ($('#selectUType').val() === '1') {
                formData.append('TargetUserId', $('#selectUUser').val());
            }

            const fileInput = $('#fileUUpload')[0];
            if (fileInput.files.length > 0) {
                formData.append('File.FormFile', fileInput.files[0]);
            }

            try {
                const response = await $.ajax({
                    url: `/trafik-ceza/${trafficTicketId}`,
                    type: 'PUT',
                    data: formData,
                    processData: false,
                    contentType: false,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                if (response.isSuccess) {
                    toastr.success(response.message, 'Başarılı!');
                    $('#updatetrafficTicketModal').modal('hide');
                    trafficTicketsTable.ajax.reload();
                } else {
                    toastr.error(response.message, 'Hata!');
                }
            } catch (error) {
                console.error('Update trafficTicket error:', error);
                toastr.error(error.responseJSON?.message || 'Trafik cezası güncellenirken hata oluştu', 'Hata!');
            }
        }

        async function deletetrafficTicket(trafficTicketId) {
            Swal.fire({
                title: 'Emin misiniz?',
                text: "Bu trafik cezası silinecek ve geri alınamayacak!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Evet, Sil!',
                cancelButtonText: 'İptal'
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        const response = await $.ajax({
                            url: `/trafik-ceza/${trafficTicketId}`,
                            type: 'DELETE',
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            }
                        });

                        if (response.isSuccess) {
                            toastr.success(response.message, 'Başarılı!');
                            trafficTicketsTable.ajax.reload();
                        } else {
                            toastr.error(response.message, 'Hata!');
                        }
                    } catch (error) {
                        console.error('Delete trafficTicket error:', error);
                        toastr.error(error.responseJSON.message, 'Hata!');
                    }
                }
            });
        }

    </script>
}