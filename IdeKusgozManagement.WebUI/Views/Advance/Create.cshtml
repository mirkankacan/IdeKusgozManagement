@{
    ViewData["Title"] = "Avans Taleplerim";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Styles {
    <link href="~/theme/assets/plugins/DataTables/datatables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
    <link rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />

}
@Html.AntiForgeryToken()
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="fas fa-money-bill me-2"></i>
                    Avans Taleplerim
                </h5>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                        data-bs-target="#createAdvanceRequestModal">
                    <i class="fas fa-plus me-2"></i>Avans Talebi Oluştur
                </button>
                <br />
                <br />
                <div class="table-responsive">
                    <table id="myAdvanceRequestsTable" class="table table-striped table-hover display" style="width:100%">
                        <thead class="table-dark">
                            <tr>
                                <th>#</th>
                                <th>TALEP<br /> NEDENİ</th>
                                <th>TUTAR</th>
                                <th>DURUM</th>
                                <th>OLUŞTURMA<br />TARİHİ</th>
                                <th>İŞLEM<br />YAPAN<br />ŞEF</th>
                                <th>ŞEF<br />İŞLEM<br />TARİHİ</th>
                                <th>İŞLEM<br />YAPAN<br />YÖNETİCİ</th>
                                <th>YÖNETİCİ<br />İŞLEM<br />TARİHİ</th>
                                <th>İŞLEMLER</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- DataTables will populate this -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="createAdvanceRequestModal" tabindex="-1" aria-labelledby="createAdvanceRequestModalLabel"
     aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Avans Talebi Oluşturma Penceresi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="createAdvanceRequestForm" class="needs-validation" novalidate>
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-12">
                            <label for="selectCAdvanceReason" class="form-label">Talep Nedeni</label>
                            <select class="form-select selectAdvanceReason" id="selectCAdvanceReason" required>
                                <option value="" selected disabled>Talep nedeni seçiniz...</option>
                                <option>İş Avansı</option>
                                <option>Maaş Avansı</option>
                            </select>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Geçerli talep nedeni seçiniz.</div>
                        </div>
                        <div class="col-md-12">
                            <label for="txtCAmount" class="form-label">Tutar</label>
                            <input type="number" class="form-control" id="txtCAmount" required step="0.1">
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Geçerli bir tutar giriniz.</div>
                        </div>
                        <div class="col-md-12">
                            <label for="txtCDescription" class="form-label">Açıklama (İsteğe Bağlı)</label>
                            <textarea class="form-control" id="txtCDescription" rows="3"
                                      placeholder="Açıklama..."></textarea>
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Kapat</button>
                    <button type="submit" class="btn btn-primary w-100"><i class="fas fa-plus me-1"></i>Oluştur</button>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="modal fade" id="updateAdvanceRequestModal" tabindex="-1" aria-labelledby="updateAdvanceRequestModalLabel"
     aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Avans Talebi Güncelleme Penceresi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form class="needs-validation" novalidate id="updateAdvanceRequestForm">
                <div class="modal-body">
                    <input type="hidden" id="txtUId">
                    <div class="row g-3">
                        <div class="col-md-12">
                            <label for="selectUAdvanceReason" class="form-label">Talep Nedeni</label>
                            <select class="form-select selectAdvanceReason" id="selectUAdvanceReason" required>
                                <option value="" selected disabled>Talep nedeni seçiniz...</option>
                                <option>İş Avansı</option>
                                <option>Maaş Avansı</option>
                                <option>Yemek Avansı</option>
                            </select>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Geçerli talep nedeni seçiniz.</div>
                        </div>
                        <div class="col-md-12">
                            <label for="txtUAmount" class="form-label">Tutar</label>
                            <input type="number" class="form-control" id="txtUAmount" required step="0.1">
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Geçerli bir tutar giriniz.</div>
                        </div>
                        <div class="col-md-12">
                            <label for="txtUDescription" class="form-label">Açıklama (İsteğe Bağlı)</label>
                            <textarea class="form-control" id="txtUDescription" rows="3"
                                      placeholder="Açıklama..."></textarea>
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Kapat</button>
                    <button type="submit" class="btn btn-primary w-100"><i class="fas fa-pen me-1"></i>Güncelle</button>
                </div>
            </form>
        </div>
    </div>
</div>
@section Scripts {
    <script src="~/theme/assets/plugins/DataTables/datatables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>
        let myAdvanceRequestsTable;

        $(document).ready(async function () {
                        setupEventListeners();

            await initializeDataTable();

        });
        async function initializeDataTable() {
            myAdvanceRequestsTable = $('#myAdvanceRequestsTable').DataTable({
                "processing": true,
                "ajax": {
                    "url": "/avans/listem",
                    "type": "GET",
                    "dataSrc": function (json) {
                        if (json && json.isSuccess && json.data) {
                            return json.data;
                        }
                        return [];
                    },
                    "error": function (xhr, error, code) {
                        console.error('DataTables AJAX error:', error);
                        let errorMessage = 'Veriler yüklenirken hata oluştu';
                        try {
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage += ': ' + xhr.responseJSON.message;
                            } else if (xhr.responseText) {
                                errorMessage += ': ' + xhr.responseText;
                            }
                        } catch (e) {
                            errorMessage += ': ' + error;
                        }
                        toastr.error(errorMessage);
                    }
                },
                "columns": [
                    {
                        "data": null,
                        "width": "5%",
                        "orderable": false,
                        "className": "text-center",
                        "render": function (data, type, row, meta) {
                            return '';
                        }
                    },
                    {
                        "data": "reason",
                        "render": function (data) {
                            return data || '';
                        }
                    },
                          {
                        "data": "amount",
                        "render": function (data) {
                            if (!data && data !== 0) return '';

                            return new Intl.NumberFormat('tr-TR', {
                                style: 'currency',
                                currency: 'TRY'
                            }).format(data);
                        }
                    },
                    {
                        "data": "statusText",
                        "className": "text-center",
                        "render": function (data, type, row) {
                              if (row.status === 0) {
                                return `<span class="badge bg-warning">${data}</span>`;
                            } else if (row.status === 1) {
                                return `<span class="badge bg-success">${data}</span>`;
                            } else if (row.status === 2) {
                                return `<span class="badge bg-primary">${data}</span>`;
                            } else if (row.status === 3 || row.status === 4) {
                                return `<span class="badge bg-danger">${data}</span>`;
                            } else {
                                return `<span class="badge bg-secondary">${data}</span>`;
                            }
                        }
                    },
                    {
                        "data": "createdDate",
                        "render": function (data) {
                            return data ? new Date(data).toLocaleString('tr-TR', {
                                  year: 'numeric',
                                  month: '2-digit',
                                  day: '2-digit',
                                  hour: '2-digit',
                                  minute: '2-digit'
                              }) : '';
                        }
                    },
                    {
                        "data": "chiefByFullName",
                        "className": "text-center",
                        "render": function (data, type, row) {
                              return data || '';

                        }
                    },
                       {
                        "data": "chiefProcessedDate",
                        "render": function (data) {
                            return data ? new Date(data).toLocaleString('tr-TR', {
                                  year: 'numeric',
                                  month: '2-digit',
                                  day: '2-digit',
                                  hour: '2-digit',
                                  minute: '2-digit'
                              }) : '';
                        }
                    },
                    {
                        "data": "unitManagerFullName",
                        "render": function (data) {
                            return data || '';
                        }
                    },
                      {
                        "data": "unitManagerProcessedDate",
                        "render": function (data) {
                            return data ? new Date(data).toLocaleString('tr-TR', {
                                  year: 'numeric',
                                  month: '2-digit',
                                  day: '2-digit',
                                  hour: '2-digit',
                                  minute: '2-digit'
                              }) : '';
                        }
                    },
                    {
                        "data": null,
                        "width": "10%",
                        "orderable": false,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            return row.status === 0 ? `
                                                                        <div class="btn-group btn-group-sm" role="group">
                                             <button type="button" class="btn btn-outline-warning btn-sm"
                                               onclick="loadAdvanceForEdit('${row.id}')" title="Düzenle">
                                              <i class="fas fa-edit"></i>
                                             </button>
                                             <button type="button" class="btn btn-outline-danger btn-sm"
                                               onclick="deleteAdvanceRequest('${row.id}')" title="Sil">
                                              <i class="fas fa-trash"></i>
                                             </button>
                                            </div>
                                                                        ` : "";

                        }
                    }
                ],
                "language": {
                    url: 'https://cdn.datatables.net/plug-ins/2.3.2/i18n/tr.json'
                },
                "lengthMenu": [[10, 25, 50, 100], [10, 25, 50, 100]],
                "pageLength": 10,
                "responsive": true,
                "searchDelay": 300,
                "order": [[4, "desc"]], // Order by created date desc
                "drawCallback": function () {
                    var api = this.api();
                    var pageInfo = api.page.info();

                    api.column(0, { page: 'current' }).nodes().each(function (cell, i) {
                        cell.innerHTML = pageInfo.start + i + 1;
                    });
                    $('[title]').tooltip();
                }
            });
        }
           function setupEventListeners() {
            // Create expense form
            $('#createAdvanceRequestForm').on('submit', function (e) {
                e.preventDefault();
                if (this.checkValidity()) {
                    createAdvanceRequest();
                }
                $(this).addClass('was-validated');
            });

            // Update expense form
            $('#updateAdvanceRequestForm').on('submit', function (e) {
                e.preventDefault();
                if (this.checkValidity()) {
                    updateAdvanceRequest();
                }
                $(this).addClass('was-validated');
            });

            // Clear forms when modals hide
            $('#createAdvanceRequestModal').on('hidden.bs.modal', function () {
                $('#createAdvanceRequestForm')[0].reset();
                $('#createAdvanceRequestForm').removeClass('was-validated');
            });

            $('#updateAdvanceRequestModal').on('hidden.bs.modal', function () {
                $('#updateAdvanceRequestForm')[0].reset();
                $('#updateAdvanceRequestForm').removeClass('was-validated');
            });
        }
              async function createAdvanceRequest() {
            const advanceData = {
                amount: $('#txtCAmount').val(),
                description: $('#txtCDescription').val().trim() ?? null,
                reason: $('#selectCAdvanceReason').val()
            };

            try {
                const response = await $.ajax({
                    url: '/avans/istek-olustur',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(advanceData),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                if (response.isSuccess) {
                    toastr.success(response.message, 'Başarılı!');
                    $('#createAdvanceRequestModal').modal('hide');
                    myAdvanceRequestsTable.ajax.reload();
                } else {
                    toastr.error(response.message, 'Hata!');
                }
            } catch (error) {
                console.error('Create advance error:', error);
                toastr.error(error.responseJSON.message, 'Hata!');
            }
        }

         async function loadAdvanceForEdit(advanceId) {
            try {
                const response = await $.ajax({
                    url: `/avans/${advanceId}`,
                    type: 'GET'
                });

                if (response.isSuccess) {
                    $('#txtUId').val(response.data.id);
                    $('#txtUAmount').val(response.data.amount);
                    $('#txtUDescription').val(response.data.description);
                    $('#selectUAdvanceReason').val(response.data.reason);
                    $('#updateAdvanceRequestModal').modal('show');
                } else {
                    toastr.error(response.message, 'Hata!');
                }
            } catch (error) {
                console.error('Load advance error:', error);
                toastr.error(error.responseJSON.message, 'Hata!');
            }
        }

        async function updateAdvanceRequest() {
            const expenseId = $('#txtUId').val();
            const advanceData = {
                amount: $('#txtUAmount').val(),
                description: $('#txtUDescription').val().trim() ?? null,
                reason: $('#selectUAdvanceReason').val()
            };

            try {
                const response = await $.ajax({
                    url: `/avans/${expenseId}`,
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(advanceData),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                if (response.isSuccess) {
                    toastr.success(response.message, 'Başarılı!');
                    $('#updateAdvanceRequestModal').modal('hide');
                    myAdvanceRequestsTable.ajax.reload();
                } else {
                    toastr.error(response.message, 'Hata!');
                }
            } catch (error) {
                console.error('Update advance error:', error);
                toastr.error(error.responseJSON.message, 'Hata!');
            }
        }
        async function deleteAdvanceRequest(advanceRequestId) {
            try {
                const result = await Swal.fire({
                    title: 'Avans Talebini Sil',
                    text: 'Bu avans talebini silmek istediğinizden emin misiniz? Bu işlem geri alınamaz!',
                    icon: 'error',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-trash"></i> Evet, Sil',
                    cancelButtonText: '<i class="fas fa-times"></i> İptal',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const response = await $.ajax({
                                url: `/avans/${advanceRequestId}`,
                                type: 'DELETE',
                                contentType: 'application/json',
                                headers: {
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                }
                            });
                            return response;
                        } catch (error) {
                            let errorMessage = 'Silme başarısız';
                            if (error.responseJSON) {
                                if (error.responseJSON.message) {
                                    errorMessage = error.responseJSON.message;
                                } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                                    errorMessage = error.responseJSON.errors.join(', ');
                                }
                            }
                            Swal.showValidationMessage(`Hata: ${errorMessage}`);
                                                        return false;

                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    await Swal.fire({
                        title: 'Başarılı!',
                        text: 'Avans talebi başarıyla silindi.',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    myAdvanceRequestsTable.ajax.reload(null, false);
                }

            } catch (error) {
                console.error('Silme hatası:', error);
            }
        }

    </script>

}