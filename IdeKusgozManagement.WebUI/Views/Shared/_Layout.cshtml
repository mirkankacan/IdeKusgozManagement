<!DOCTYPE html>
<html lang="tr">

<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="author" content="İdeaktif Danışmanlık ve Yazılım Ltd.">
	<!-- The above 6 meta tags *must* come first in the head; any other head content must come *after* these tags -->
	<!-- Title -->
	<title>@ViewData["Title"] • Kuşgöz İzmir Vinç</title>

	<!-- Styles -->
	<link href="https://fonts.googleapis.com/css?family=Poppins:400,500,700,800&display=swap" rel="stylesheet">
	<link href="~/theme/assets/plugins/bootstrap/css/bootstrap.min.css" rel="stylesheet">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/7.0.0/css/all.min.css"
		integrity="sha512-DxV+EoADOkOygM4IR9yXP8Sb2qwgidEmeqAEmDKIOfPRQZOWbXCzLC6vjbZyy0vPisbH2SyW27+ddLVCN+OMzQ=="
		crossorigin="anonymous" referrerpolicy="no-referrer" />
	<link href="~/theme/assets/plugins/perfectscroll/perfect-scrollbar.css" rel="stylesheet">
	@await RenderSectionAsync("CalendarCss", required: false)
	<!-- Theme Styles -->
	<link href="~/theme/assets/css/main.min.css" rel="stylesheet">
	<link href="~/theme/assets/css/custom.css" rel="stylesheet">
	<link href="https://cdn.jsdelivr.net/npm/toastr/build/toastr.min.css" rel="stylesheet">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2/dist/sweetalert2.min.css">
	<link href="https://cdn.jsdelivr.net/npm/tippy.js/dist/tippy.min.css" rel="stylesheet">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tippy.js@6.3.7/themes/light.min.css">
	@await RenderSectionAsync("Styles", required: false)
	<style>
		.modal-footer {
			flex-wrap: nowrap !important;
		}

		/* Approved/readonly row styles */
		:disabled,
		.disabled {
			opacity: 0.8;
			cursor: not-allowed !important;
		}
	</style>
</head>

<body class="">

	<div class="page-container">
		<div class="page-header">
			<nav class="navbar navbar-expand-lg d-flex justify-content-between">
				<div class="" id="navbarNav">
					<ul class="navbar-nav" id="leftNav">
						<li class="nav-item">
							<a class="nav-link" id="sidebar-toggle" href="#"><i data-feather="arrow-left"></i></a>
						</li>

					</ul>
				</div>
				<div class="logo">
					<a class="navbar-brand" href="/ana-sayfa"></a>
				</div>
				<div class="" id="headerNav">
					<ul class="navbar-nav">
						<li class="nav-item dropdown">
							<a class="nav-link notifications-dropdown" href="#" id="notificationsDropDown" role="button"
								data-bs-toggle="dropdown" aria-expanded="false">
								<span id="notificationBadge" class="badge bg-danger">0</span>
							</a>
							<div class="dropdown-menu dropdown-menu-end notif-drop-menu"
								aria-labelledby="notificationsDropDown" style="max-width: 350px;">
								<div class="d-flex justify-content-between align-items-center p-2 border-bottom">
									<h6 class="dropdown-header mb-0">Bildirimler</h6>
									<button class="btn btn-sm btn-outline-secondary" id="markAllAsReadBtn">
										<i class="fas fa-check-double"></i> Tümünü Okundu İşaretle
									</button>
								</div>
								<div id="notificationsList" class="notifications-list"
									style="max-height: 400px; overflow-y: auto;">
									<div class="text-center p-3">
										<div class="spinner-border spinner-border-sm" role="status">
											<span class="visually-hidden">Yükleniyor...</span>
										</div>
										<p class="mt-2 text-muted">Bildirimler yükleniyor...</p>
									</div>
								</div>
								<div class="dropdown-divider"></div>
								<div class="text-center p-2">
									<a href="#" class="text-decoration-none">Tüm Bildirimleri Görüntüle</a>
								</div>
							</div>
						</li>
						<li class="nav-item dropdown">

							<a class="nav-link profile-dropdown" href="#" id="profileDropDown" role="button"
								data-bs-toggle="dropdown" aria-expanded="false">
								<img src="/theme/assets/images/avatars/profile-image.png" alt=""><span
									class="mt-5 text-black">
									@User.FindFirst("FullName")?.Value
								</span>
							</a>
							<div class="dropdown-menu dropdown-menu-end profile-drop-menu"
								aria-labelledby="profileDropDown">
								<a class="dropdown-item" href="/profil"><i data-feather="user"></i>Profil</a>
								<div class="dropdown-divider"></div>
								<a class="dropdown-item" href="/cikis-yap"><i data-feather="log-out"></i>Çıkış Yap</a>
							</div>
						</li>
					</ul>
				</div>
			</nav>
		</div>
		<div class="page-sidebar">
			<ul class="list-unstyled accordion-menu">
				<li class="sidebar-title">
					Menü
				</li>
				<li class="@(Context.Request.Path == "/ana-sayfa" ? "active-page" : "")">
					<a href="/ana-sayfa"><i data-feather="home"></i>Ana Sayfa</a>
				</li>
				<li class="@(Context.Request.Path == "/takvim" ? "active-page" : "")">
					<a href="/takvim"><i data-feather="calendar"></i>Takvim</a>
				</li>
				<li class="@(Context.Request.Path == "/sosyal" ? "active-page" : "")">
					<a href="/sosyal"><i data-feather="message-circle"></i>Sosyal</a>
				</li>
				@if (User.IsInRole("Admin") || User.IsInRole("Yönetici"))
				{
					<li class="sidebar-title">
						Yönetici İşlemleri
					</li>
					<li class="@(Context.Request.Path == "/kullanici-yonetimi" ? "active-page" : "")">
						<a href="/kullanici-yonetimi"><i data-feather="users"></i>Kullanıcılar</a>
					</li>

				}
				@if (User.IsInRole("Admin") || User.IsInRole("Şef"))
				{
					<li class="sidebar-title">
						Şef İşlemleri
					</li>
					<li class="@(Context.Request.Path == "/ekipman-yonetimi" ? "active-page" : "")">
						<a href="/ekipman-yonetimi"><i data-feather="tool"></i>Ekipmanlar</a>
					</li>
					<li class="@(Context.Request.Path == "/masraf-yonetimi" ? "active-page" : "")">
						<a href="/masraf-yonetimi"><i data-feather="tag"></i>Masraflar</a>
					</li>
					<li class="@(Context.Request.Path == "/izinn-yonetimi" ? "active-page" : "")">
						<a href="/izin-yonetimi"><i data-feather="navigation"></i>İzinler</a>
					</li>
					<li class="@(Context.Request.Path == "/puantaj" ? "active-page" : "")">
						<a href="/puantaj"><i data-feather="list"></i>Puantajlar</a>
					</li>
				}

				<li class="sidebar-title">
					Personel İşlemleri
				</li>
				<li class="@(Context.Request.Path == "/puantaj/ekle" ? "active-page" : "")">
					<a href="/puantaj/ekle"><i data-feather="clock"></i>Puantaj Gir</a>
				</li>
				<li class="@(Context.Request.Path == "/izin/olustur" ? "active-page" : "")">
					<a href="/izin/olustur"><i data-feather="flag"></i>İzinlerim</a>
				</li>
				<li><br /></li>

			</ul>
		</div>
		<div class="page-content">
			<div class="main-wrapper">
				@RenderBody()
			</div>

		</div>
		<footer class="footer">
			<div class="container-fluid">
				<div class="row">
					<div class="col-sm-6">
					</div>
					<div class="col-sm-6">
						<div class="text-sm-end d-none d-sm-block">
							<a href="https://www.ideaktif.com.tr" target="_blank" style="color:#5b5b5b">2025 © İdeaktif
								Danışmanlık ve Yazılım Ltd.</a>
						</div>
					</div>
				</div>
			</div>
		</footer>
	</div>
	<!-- Javascripts -->
	<script src="~/theme/assets/plugins/jquery/jquery-3.4.1.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/@@popperjs/core/dist/umd/popper.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/tippy.js/dist/tippy.umd.min.js"></script>
	<script src="~/theme/assets/plugins/bootstrap/js/bootstrap.min.js"></script>
	<script src="https://unpkg.com/feather-icons"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/7.0.0/js/all.min.js"
		integrity="sha512-gBYquPLlR76UWqCwD06/xwal4so02RjIR0oyG1TIhSGwmBTRrIkQbaPehPF8iwuY9jFikDHMGEelt0DtY7jtvQ=="
		crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	<script src="~/theme/assets/plugins/perfectscroll/perfect-scrollbar.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/toastr/toastr.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2/dist/sweetalert2.all.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
	<script src="~/theme/assets/plugins/blockui/jquery.blockUI.js"></script>
	<script src="~/theme/assets/js/main.min.js"></script>

	@await RenderSectionAsync("Scripts", required: false)

	<script>
		// Notification System
		let notificationConnection;
		let isNotificationConnected = false;

		document.addEventListener('DOMContentLoaded', function () {
			initializeNotificationSignalR();
			loadNotifications();
			loadUnreadNotificationCount();

			// Mark all as read button
			document.getElementById('markAllAsReadBtn').addEventListener('click', function () {
				markAllAsRead();
			});
		});

		async function initializeNotificationSignalR() {
			try {
				const hubUrl = 'http://localhost:5291/messageHub';
				console.log('Attempting to connect to SignalR for notifications:', hubUrl);

				notificationConnection = new signalR.HubConnectionBuilder()
					.withUrl(hubUrl, {
						transport: signalR.HttpTransportType.LongPolling
					})
					.withAutomaticReconnect([0, 2000, 10000, 30000])
					.configureLogging(signalR.LogLevel.Debug)
					.build();

				// Handle new notification events
				notificationConnection.on("NewNotification", function (notification) {
					console.log('New notification received:', notification);
					addNotificationToUI(notification);
					updateNotificationBadge();
				});

				// Handle connection events
				notificationConnection.onclose(function (error) {
					console.log('Notification SignalR connection closed:', error);
					isNotificationConnected = false;
				});

				notificationConnection.onreconnecting(function (error) {
					console.log('Notification SignalR reconnecting:', error);
				});

				notificationConnection.onreconnected(function (connectionId) {
					console.log('Notification SignalR reconnected:', connectionId);
					isNotificationConnected = true;
				});

				// Start the connection
				await notificationConnection.start();
				console.log('Notification SignalR connected');
				isNotificationConnected = true;

				// Join the messages group
				await notificationConnection.invoke("JoinGroup", "Messages");

			} catch (error) {
				console.error('Notification SignalR connection error:', error);
			}
		}

		async function loadNotifications() {
			try {
				const response = await fetch('/api/notifications/unread', {
					method: 'GET',
					headers: {
						'Content-Type': 'application/json',
						'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
					}
				});

				if (!response.ok) {
					throw new Error(`HTTP error! status: ${response.status}`);
				}

				const result = await response.json();

				if (result.isSuccess && result.data) {
					displayNotifications(result.data);
				} else {
					showNoNotifications();
				}

			} catch (error) {
				console.error('Error loading notifications:', error);
				showNoNotifications();
			}
		}

		async function loadUnreadNotificationCount() {
			try {
				const response = await fetch('/api/notifications/unread-count', {
					method: 'GET',
					headers: {
						'Content-Type': 'application/json',
						'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
					}
				});

				if (!response.ok) {
					throw new Error(`HTTP error! status: ${response.status}`);
				}

				const result = await response.json();

				if (result.isSuccess) {
					updateNotificationBadge(result.data);
				}

			} catch (error) {
				console.error('Error loading notification count:', error);
			}
		}

		function displayNotifications(notifications) {
			const notificationsList = document.getElementById('notificationsList');

			if (!notifications || notifications.length === 0) {
				showNoNotifications();
				return;
			}

			let notificationsHtml = '';
			notifications.forEach(notification => {
				const createdDate = new Date(notification.createdDate);
				const formattedDate = createdDate.toLocaleDateString('tr-TR', {
					day: '2-digit',
					month: '2-digit',
					year: 'numeric',
					hour: '2-digit',
					minute: '2-digit'
				});

				const isReadClass = notification.isRead ? '' : 'fw-bold';

				notificationsHtml += `
					<a href="#" class="notification-item" data-notification-id="${notification.id}" onclick="markAsRead('${notification.id}')">
						<div class="header-notif">
							<div class="notif-image">
								<span class="notification-badge bg-primary text-white">
									<i class="fas fa-bell"></i>
								</span>
							</div>
							<div class="notif-text">
								<p class="${isReadClass}">${notification.message}</p>
								<small class="d-block text-muted">${formattedDate}</small>
							</div>
						</div>
					</a>
				`;
			});

			notificationsList.innerHTML = notificationsHtml;
		}

		function showNoNotifications() {
			const notificationsList = document.getElementById('notificationsList');
			notificationsList.innerHTML = `
				<div class="text-center p-3">
					<i class="fas fa-bell-slash text-muted" style="font-size: 2rem;"></i>
					<p class="mt-2 text-muted">Henüz bildirim bulunmuyor</p>
				</div>
			`;
		}

		function addNotificationToUI(notification) {
			const notificationsList = document.getElementById('notificationsList');

			// Check if notification already exists
			const existingNotification = notificationsList.querySelector(`[data-notification-id="${notification.id}"]`);
			if (existingNotification) {
				return;
			}

			const createdDate = new Date(notification.createdDate);
			const formattedDate = createdDate.toLocaleDateString('tr-TR', {
				day: '2-digit',
				month: '2-digit',
				year: 'numeric',
				hour: '2-digit',
				minute: '2-digit'
			});

			const notificationHtml = `
				<a href="#" class="notification-item" data-notification-id="${notification.id}" onclick="markAsRead('${notification.id}')">
					<div class="header-notif">
						<div class="notif-image">
							<span class="notification-badge bg-primary text-white">
								<i class="fas fa-bell"></i>
							</span>
						</div>
						<div class="notif-text">
							<p class="fw-bold">${notification.message}</p>
							<small class="d-block text-muted">${formattedDate}</small>
						</div>
					</div>
				</a>
			`;

			// Add new notification to the top
			notificationsList.insertAdjacentHTML('afterbegin', notificationHtml);

			// Add animation
			const newNotificationElement = notificationsList.querySelector(`[data-notification-id="${notification.id}"]`);
			newNotificationElement.style.opacity = '0';
			newNotificationElement.style.transform = 'translateX(-10px)';
			newNotificationElement.style.transition = 'all 0.3s ease';

			setTimeout(() => {
				newNotificationElement.style.opacity = '1';
				newNotificationElement.style.transform = 'translateX(0)';
			}, 100);
		}


		function updateNotificationBadge(count = null) {
			const badge = document.getElementById('notificationBadge');
			if (count !== null) {
				badge.textContent = count;
				badge.style.display = count > 0 ? 'inline' : 'none';
			} else {
				// If count is not provided, reload it
				loadUnreadNotificationCount();
			}
		}

		async function markAsRead(notificationId) {
			try {
				const response = await fetch('/api/notifications/mark-as-read', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
						'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
					},
					body: JSON.stringify({
						notificationId: notificationId
					})
				});

				if (response.ok) {
					// Update UI
					const notificationElement = document.querySelector(`[data-notification-id="${notificationId}"]`);
					if (notificationElement) {
						const titleElement = notificationElement.querySelector('p');
						titleElement.classList.remove('fw-bold');
					}
					updateNotificationBadge();
				}

			} catch (error) {
				console.error('Error marking notification as read:', error);
			}
		}

		async function markAllAsRead() {
			try {
				const response = await fetch('/api/notifications/mark-all-as-read', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
						'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
					}
				});

				if (response.ok) {
					// Update UI
					const notificationItems = document.querySelectorAll('.notification-item p');
					notificationItems.forEach(item => {
						item.classList.remove('fw-bold');
					});
					updateNotificationBadge();
				}

			} catch (error) {
				console.error('Error marking all notifications as read:', error);
			}
		}
	</script>

</body>

</html>