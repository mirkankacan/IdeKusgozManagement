@{
    ViewData["Title"] = "Takvim";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section CalendarCss {
    <link href="~/theme/assets/plugins/fullcalendar/main.min.css" rel="stylesheet">
}
@section Styles {
    <style>
        .fc-event-title.fc-sticky {
            color: white !important;
        }

        /* All-day yazısını gizle */
        .fc-list-event-time {
            color: transparent !important;
            position: relative;
        }

            /* Yerine Tüm Gün yaz */
            .fc-list-event-time::after {
                content: "Tüm Gün";
                color: #6c757d !important;
            }
    </style>
}

<div class="card">
    <div class="card-body">
        <div id='calendar'></div>
    </div>
</div>
@section Scripts {
    <script src="~/theme/assets/plugins/fullcalendar/main.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'tr',
                firstDay: 1,
                height: 505,

                // Header toolbar - görünüm değiştirme butonları
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,dayGridWeek,dayGridDay,listWeek'
                },

                buttonText: {
                    today: '\u0042\u0075\u0067\u00fc\u006e',
                    month: 'Ay',
                    week: 'Hafta',
                    day: '\u0047\u00fc\u006e',
                    list: 'Liste',
                    prev: '\u00d6\u006e\u0063\u0065\u006b\u0069',
                    next: 'Sonraki'
                },

                // Farklı görünümler için özel ayarlar
                views: {
                    dayGridMonth: {
                        dayMaxEvents: 3,
                        moreLinkClick: 'popover'
                    },
                    listWeek: {
                        listDayFormat: { weekday: 'long', month: 'long', day: 'numeric' }
                    }
                },

                titleFormat: {
                    year: 'numeric',
                    month: 'long'
                },
                moreLinkText: function(n) {
                    return '+ ' + n + ' tane daha';
                },
                noEventsText: 'Görüntülenecek etkinlik yok',
                didMount: function() {
                    initializeTooltips();
                },
                eventDidMount: function(info) {
                    // Debug için konsola yazdır
                    console.log('Event mounted:', {
                        title: info.event.title,
                        start: info.event.start,
                        end: info.event.end,
                        allDay: info.event.allDay,
                        view: info.view.type
                    });

                    let tooltipContent = '';

                    if (info.event.extendedProps.type === 'leave') {
                        tooltipContent = `
                            <div>
                                <strong>🏖️ ${info.event.extendedProps.createdByName}</strong><br>
                                <small><b>Sebep:</b> ${info.event.extendedProps.reason}</small><br>
                                <small><b>Başlangıç:</b> ${new Date(info.event.start).toLocaleDateString('tr-TR')}</small><br>
                                <small><b>Bitiş:</b> ${new Date(info.event.extendedProps.originalEndDate).toLocaleDateString('tr-TR')}</small><br>
                                <small><b>Net İzin Süresi:</b> ${info.event.extendedProps.duration}</small><br>
                                <small><b>İzin Oluşturulma Tarihi:</b> ${new Date(info.event.extendedProps.createdDate).toLocaleString('tr-TR', {
                                    year: 'numeric',
                                    month: '2-digit',
                                    day: '2-digit',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                })}</small><br>
                                <small><b>İzin Onaylanma Tarihi:</b> ${new Date(info.event.extendedProps.updatedDate).toLocaleString('tr-TR', {
                                    year: 'numeric',
                                    month: '2-digit',
                                    day: '2-digit',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                })}</small><br>
                                <small><b>Onaylayan:</b> ${info.event.extendedProps.updatedByName}</small>
                            </div>
                        `;
                    } else if (info.event.extendedProps.type === 'project') {
                        tooltipContent = `
                            <div>
                                <strong>📋 ${info.event.extendedProps.projectName}</strong><br>
                                <small><b>Başlangıç:</b> ${new Date(info.event.start).toLocaleDateString('tr-TR')}</small><br>
                                <small><b>Bitiş:</b> ${new Date(info.event.extendedProps.originalEndDate).toLocaleDateString('tr-TR')}</small><br>
                                <small><b>Durum:</b> ${info.event.extendedProps.isActive ? '✅ Aktif' : '❌ Pasif'}</small><br>
                                <small><b>Oluşturulma:</b> ${new Date(info.event.extendedProps.createdDate).toLocaleString('tr-TR', {
                                    year: 'numeric',
                                    month: '2-digit',
                                    day: '2-digit',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                })}</small>
                            </div>
                        `;
                    }

                    tippy(info.el, {
                        content: tooltipContent,
                        allowHTML: true,
                        theme: 'light',
                        placement: 'top',
                        arrow: true,
                        animation: 'fade',
                        duration: [200, 150],
                        hideOnClick: false,
                        trigger: 'mouseenter focus'
                    });
                },
                events: async function(fetchInfo, successCallback, failureCallback) {
                    try {
                        // Debug için tarih aralığını konsola yazdır
                        console.log('Fetching events for:', {
                            start: fetchInfo.start,
                            end: fetchInfo.end,
                            timeZone: fetchInfo.timeZone
                        });

                        // İzinleri al
                        const leaveResponse = await fetch('/takvim/izinler');
                        const leaveData = await leaveResponse.json();

                        // Projeleri al
                        const projectResponse = await fetch('/takvim/projeler');
                        const projectData = await projectResponse.json();

                        let events = [];

                        // İzinleri event'lere çevir
                        if (leaveData.isSuccess && leaveData.data) {
                            const leaveEvents = leaveData.data.map(leave => {
                                const color = getLeaveColor(leave.createdBy);
                                const startDate = new Date(leave.startDate);
                                const endDate = new Date(leave.endDate);
                                endDate.setDate(endDate.getDate() + 1);

                                // Debug için konsola yazdır
                                console.log('Leave event:', {
                                    title: leave.createdByFullName,
                                    start: startDate.toISOString(),
                                    end: endDate.toISOString(),
                                    originalStart: leave.startDate,
                                    originalEnd: leave.endDate
                                });

                                return {
                                    id: 'leave-' + leave.id,
                                    title: '🏖️ '+ leave.createdByFullName + ' - ' + leave.reason,
                                    start: startDate.toISOString().split('T')[0], // YYYY-MM-DD format
                                    end: endDate.toISOString().split('T')[0],     // YYYY-MM-DD format
                                    allDay: true,
                                    backgroundColor: color,
                                    borderColor: color,
                                    classNames: ['event-leave'],
                                    extendedProps: {
                                        type: 'leave',
                                        reason: leave.reason,
                                        createdByName: leave.createdByFullName,
                                        status: leave.status,
                                        createdDate: leave.createdDate,
                                        updatedByName: leave.updatedByFullName,
                                        updatedDate: leave.updatedDate,
                                        duration: leave.duration,
                                        originalEndDate: leave.endDate
                                    }
                                };
                            });
                            events = events.concat(leaveEvents);
                        }

                        // Projeleri event'lere çevir
                        if (projectData.isSuccess && projectData.data) {
                            const projectEvents = projectData.data.map(project => {
                                const startDate = new Date(project.startDate);
                                const endDate = new Date(project.endDate);
                                endDate.setDate(endDate.getDate() + 1);

                                // Debug için konsola yazdır
                                console.log('Project event:', {
                                    title: project.name,
                                    start: startDate.toISOString(),
                                    end: endDate.toISOString(),
                                    originalStart: project.startDate,
                                    originalEnd: project.endDate
                                });

                                return {
                                    id: 'project-' + project.id,
                                    title: '📋 ' + project.name,
                                    start: startDate.toISOString().split('T')[0], // YYYY-MM-DD format
                                    end: endDate.toISOString().split('T')[0],     // YYYY-MM-DD format
                                    allDay: true,
                                    backgroundColor: 'rgba(13, 110, 253, 0.2)',
                                    borderColor: 'rgba(13, 110, 253, 0.8)',
                                    classNames: ['event-project'],
                                    extendedProps: {
                                        type: 'project',
                                        projectName: project.name,
                                        isActive: project.isActive,
                                        createdDate: project.createdDate,
                                        originalEndDate: project.endDate
                                    }
                                };
                            });
                            events = events.concat(projectEvents);
                        }

                        // Debug için toplam event sayısını konsola yazdır
                        console.log('Total events created:', events.length);
                        console.log('Events:', events);

                        successCallback(events);

                    } catch (error) {
                        console.error('Veri yükleme hatası:', error);
                        failureCallback();
                    }
                }
            });

            calendar.render();

            // Tooltip'leri yeniden initialize etme fonksiyonu
            function initializeTooltips() {
                document.querySelectorAll('[data-tippy-root]').forEach(el => {
                    if (el._tippy) {
                        el._tippy.destroy();
                    }
                });
            }

            const leaveColors = [
                'rgba(55, 136, 216, 0.5)',
                'rgba(40, 167, 69, 0.5)',
                'rgba(255, 193, 7, 0.5)',
                'rgba(220, 53, 69, 0.5)',
                'rgba(111, 66, 193, 0.5)',
                'rgba(253, 126, 20, 0.5)',
                'rgba(32, 201, 151, 0.5)',
                'rgba(232, 62, 140, 0.5)',
                'rgba(108, 117, 125, 0.5)',
                'rgba(23, 162, 184, 0.5)',
            ];

            function getLeaveColor(leaveId) {
                let hash = 0;
                for (let i = 0; i < leaveId.length; i++) {
                    const char = leaveId.charCodeAt(i);
                    hash = ((hash << 5) - hash) + char;
                    hash = hash & hash;
                }
                hash = Math.abs(hash);
                return leaveColors[hash % leaveColors.length];
            }
        });
    </script>
}