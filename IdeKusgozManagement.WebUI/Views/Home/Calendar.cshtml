@{
    ViewData["Title"] = "Takvim";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section CalendarCss {
    <link href="~/theme/assets/plugins/fullcalendar/main.min.css" rel="stylesheet">
}
@section Styles {
    <style>
.fc-event-title.fc-sticky {
    color: white !important;
}
</style>
}

<div class="card">
    <div class="card-body">
        <div id='calendar'></div>
    </div>
</div>


@section Scripts {
    <script src="~/theme/assets/plugins/fullcalendar/main.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');
            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                locale: 'tr',
                firstDay: 1,
                height:505,
                buttonText: {
                today: '\u0042\u0075\u0067\u00fc\u006e',
                month: 'Ay',
                week: 'Hafta',
                day: '\u0047\u00fc\u006e',
                list: 'Liste',
                prev: '\u00d6\u006e\u0063\u0065\u006b\u0069',
                next: 'Sonraki'
            },
            titleFormat: {
                year: 'numeric',
                month: 'long'
            },
            moreLinkText: function(n) {
                return '+ ' + n + ' tane daha';
            },
        noEventsText: 'Görüntülenecek etkinlik yok',
                didMount: function() {
                    initializeTooltips();
                },
                eventDidMount: function(info) {
                    tippy(info.el, {
                        content: `
                            <div>
                                <strong>${info.event.extendedProps.createdByName}</strong><br>
                                <small>${info.event.extendedProps.reason}</small><br>
                                <small>\u0042\u0061\u015f\u006c\u0061\u006e\u0067\u0131\u00e7: ${new Date(info.event.start).toLocaleDateString('tr-TR')}</small><br>
                                <small>\u0042\u0069\u0074\u0069\u015f: ${new Date(info.event.end).toLocaleDateString('tr-TR')}</small><br>
                             
                              <small>\u004e\u0065\u0074\u0020\u0130\u007a\u0069\u006e\u0020\u0053\u00fc\u0072\u0065\u0073\u0069: ${info.event.extendedProps.duration}</small><br>
                                 <small>
                                    \u0130\u007a\u0069\u006e\u0020\u004f\u006c\u0075\u015f\u0074\u0075\u0072\u0075\u006c\u006d\u0061\u0020\u0054\u0061\u0072\u0069\u0068\u0069: ${new Date(info.event.extendedProps.createdDate).toLocaleString('tr-TR', {
                                      year: 'numeric',
                                      month: '2-digit',
                                      day: '2-digit',
                                      hour: '2-digit',
                                      minute: '2-digit'
                              })}
                              </small><br>
                                <small>
                                    \u0130\u007a\u0069\u006e\u0020\u004f\u006e\u0061\u0079\u006c\u0061\u006e\u006d\u0061\u0020\u0054\u0061\u0072\u0069\u0068\u0069: ${new Date(info.event.extendedProps.updatedDate).toLocaleString('tr-TR', {
                                      year: 'numeric',
                                      month: '2-digit',
                                      day: '2-digit',
                                      hour: '2-digit',
                                      minute: '2-digit'
                                  })}
                                  </small><br>
                                    <small>\u004f\u006e\u0061\u0079\u006c\u0061\u0079\u0061\u006e\u0020\u004b\u0075\u006c\u006c\u0061\u006e\u0131\u0063\u0131: ${info.event.extendedProps.updatedByName}</small>
                            </div>
                        `,
                        allowHTML: true,
                        theme: 'light',
                        placement: 'top',
                        arrow: true,
                        animation: 'fade',
                        duration: [200, 150],
                        hideOnClick: false,
                        trigger: 'mouseenter focus'
                    });
                },
                        events: function(fetchInfo, successCallback, failureCallback) {
            fetch('/takvim/izinler')
                .then(response => response.json())
                .then(data => {
                    if (data.isSuccess && data.data) {
                        const events = data.data.map(leave => {
                            const color = getLeaveColor(leave.createdBy);
                            return {
                                id: leave.id,
                                title: leave.createdByName,
                                start: leave.startDate,
                                end: new Date(new Date(leave.endDate).getTime() + 24 * 60 * 60 * 1000),
                                allDay: true,
                                backgroundColor: color,
                                borderColor: color,
                                extendedProps: {
                                    reason: leave.reason,
                                    createdByName: leave.createdByName,
                                    status: leave.status,
                                    createdDate: leave.createdDate,
                                    updatedByName: leave.updatedByName,
                                    updatedDate: leave.updatedDate,
                                    duration: leave.duration
                                }
                            };
                        });
                        successCallback(events);
                    } else {
                        console.error('API hatasý:', data.message);
                        failureCallback();
                    }
                })
                .catch(error => {
                    console.error('Veri yükleme hatasý:', error);
                    failureCallback();
                });
        }
            });

            calendar.render();

        

            // Tooltip'leri yeniden initialize etme fonksiyonu
            function initializeTooltips() {
                // Mevcut tooltip'leri temizle
                document.querySelectorAll('[data-tippy-root]').forEach(el => {
                    if (el._tippy) {
                        el._tippy.destroy();
                    }
                });
            }
                    // Ýzin türleri için transparan renk paleti
        const leaveColors = [
            'rgba(55, 136, 216, 0.5)',  // Mavi - 70% opacity
            'rgba(40, 167, 69, 0.5)',   // Yeþil - 70% opacity
            'rgba(255, 193, 7, 0.5)',   // Sarý - 70% opacity
            'rgba(220, 53, 69, 0.5)',   // Kýrmýzý - 70% opacity
            'rgba(111, 66, 193, 0.5)',  // Mor - 70% opacity
            'rgba(253, 126, 20, 0.5)',  // Turuncu - 70% opacity
            'rgba(32, 201, 151, 0.5)',  // Teal - 70% opacity
            'rgba(232, 62, 140, 0.5)',  // Pembe - 70% opacity
            'rgba(108, 117, 125, 0.5)', // Gri - 70% opacity
            'rgba(23, 162, 184, 0.5)',  // Cyan - 70% opacity
        ];

               function getLeaveColor(leaveId) {
            // GUID'i sayýya çevirme
            let hash = 0;
            for (let i = 0; i < leaveId.length; i++) {
                const char = leaveId.charCodeAt(i);
                hash = ((hash << 5) - hash) + char;
                hash = hash & hash; // 32bit integer'a çevirme
            }

            // Negatif deðerleri pozitife çevirme
            hash = Math.abs(hash);

            return leaveColors[hash % leaveColors.length];
        }
        });
             
    </script>
}