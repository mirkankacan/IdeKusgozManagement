@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Kullanıcı Yönetimi";

}
@section Styles {

    <link href="~/theme/assets/plugins/DataTables/datatables.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />
    <!-- Or for RTL support -->
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.rtl.min.css" />
}
@Html.AntiForgeryToken()
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="fas fa-users me-2"></i>
                    Kullanıcılar Tablosu
                </h5>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createUserModal">
                    <i class="fas fa-user-plus me-2"></i>Kullanıcı Oluştur
                </button>
                <br />
                <br />
                <div class="table-responsive">
                    <table id="usersTable" class="table table-striped table-hover display" style="width:100%">
                        <thead class="table-dark">
                            <tr>
                                <th>#</th>
                                <th>KULLANICI ADI</th>
                                <th>AD SOYAD</th>
                                <th>ROL</th>
                                <th>AKTİF Mİ</th>
                                <th>İŞLEMLER</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- DataTables will populate this -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true"
    data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Kullanıcı Oluşturma Penceresi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form class="needs-validation" novalidate>
                <div class="modal-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label for="txtCUsername" class="form-label">TC Kimlik No</label>
                            <input type="text" class="form-control" id="txtCUsername" value="" required>
                            <div class="valid-feedback">
                                İyi görünüyor!
                            </div>
                            <div class="invalid-feedback">
                                Geçerli bir kullanıcı adı giriniz.
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="txtCPassword" class="form-label">Şifre</label>
                            <input type="password" class="form-control" id="txtCPassword" value="" required
                                autocomplete="new-password" data-lpignore="true">
                            <div class="valid-feedback">
                                İyi görünüyor!
                            </div>
                            <div class="invalid-feedback">
                                Geçerli bir şifre giriniz.
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="txtCName" class="form-label">Adı</label>
                            <input type="text" class="form-control" id="txtCName" value="" required>
                            <div class="valid-feedback">
                                İyi görünüyor!
                            </div>
                            <div class="invalid-feedback">
                                Geçerli bir isim giriniz.
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="txtCSurname" class="form-label">Soyadı</label>
                            <input type="text" class="form-control" id="txtCSurname" value="" required>
                            <div class="valid-feedback">
                                İyi görünüyor!
                            </div>
                            <div class="invalid-feedback">
                                Geçerli bir soyisim giriniz.
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="ddCRole" class="form-label">Rol</label>
                            <select class="form-select ddRole" id="ddCRole" required="">
                            </select>
                            <div class="valid-feedback">
                                İyi görünüyor!
                            </div>
                            <div class="invalid-feedback">
                                Geçerli bir rol seçiniz.
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="ddCSuperior" class="form-label">Atanacak</label>
                            <select class="form-select superior-select" id="ddCSuperior">
                            </select>
                            
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Kapat</button>
                    <button class="btn btn-primary w-100" type="submit" id="btnCreateUser"><i
                            class="fas fa-user-plus me-1"></i>Oluştur</button>
                </div>
            </form>
        </div>
    </div>
</div>
<!-- Modal -->
<div class="modal fade" id="updateUserModal" tabindex="-1" aria-labelledby="updateUserModalLabel" aria-hidden="true"
    data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Kullanıcı Güncelleme Penceresi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form class="needs-validation" novalidate>
                <div class="modal-body">
                    <div class="row g-3">
                        <input type="text" id="txtUUserId" value="" readonly hidden disabled />
                        <div class="col-md-6">
                            <label for="txtUUsername" class="form-label">TC Kimlik No</label>
                            <input type="text" class="form-control" id="txtUUsername" value="" required>
                            <div class="valid-feedback">
                                İyi görünüyor!
                            </div>
                            <div class="invalid-feedback">
                                Geçerli bir kullanıcı adı giriniz.
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="txtUPassword" class="form-label">Şifre</label>
                            <input type="password" class="form-control" id="txtUPassword" value=""
                                autocomplete="new-password" data-lpignore="true">
                            <div class="form-text text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                Boş bırakırsanız şifre değişmez, doldurursanız şifre güncellenir.
                            </div>
                            <div class="valid-feedback">
                                İyi görünüyor!
                            </div>
                            <div class="invalid-feedback">
                                Geçerli bir şifre giriniz.
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="txtUName" class="form-label">Adı</label>
                            <input type="text" class="form-control" id="txtUName" value="" required>
                            <div class="valid-feedback">
                                İyi görünüyor!
                            </div>
                            <div class="invalid-feedback">
                                Geçerli bir isim giriniz.
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="txtUSurname" class="form-label">Soyadı</label>
                            <input type="text" class="form-control" id="txtUSurname" value="" required>
                            <div class="valid-feedback">
                                İyi görünüyor!
                            </div>
                            <div class="invalid-feedback">
                                Geçerli bir soyisim giriniz.
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="ddURole" class="form-label">Rol</label>
                            <select class="form-select ddRole" id="ddURole" required="">
                            </select>
                            <div class="valid-feedback">
                                İyi görünüyor!
                            </div>
                            <div class="invalid-feedback">
                                Geçerli bir rol seçiniz.
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="ddUSuperior" class="form-label">Atanacak</label>
                            <select class="form-select superior-select" id="ddUSuperior">
                            </select>
                           
                        </div>
                        <div class="col-md-12">
                            <label for="ddUStatus" class="form-label">Durum</label>
                            <select class="form-select" id="ddUStatus" required="">
                                <option value="" selected="" disabled>Durum seçiniz...</option>
                                <option value="true">Aktif</option>
                                <option value="false">Pasif</option>
                            </select>
                            <div class="valid-feedback">
                                İyi görünüyor!
                            </div>
                            <div class="invalid-feedback">
                                Geçerli bir rol seçiniz.
                            </div>
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Kapat</button>
                    <button class="btn btn-primary w-100" type="submit" id="btnUpdateUser">Güncelle</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {


    <script src="~/theme/assets/plugins/DataTables/datatables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <script>
        let usersTable;

        $(document).ready(async function () {
            await initializeDataTable();
            await getRoles();
            initializeSelect2();
            await getSuperiorUsers();
            $('#createUserModal').on('hidden.bs.modal', function () {
                clearCreateUserForm();
            });
            $('#updateUserModal').on('hidden.bs.modal', function () {
                clearUpdateUserForm();
            });
            $(document).on('click', '#btnUpdateUser', async function (e) {
                e.preventDefault();
                e.stopPropagation();
                await updateUser();
            });

            $(document).on('click', '#btnCreateUser', async function (e) {
                e.preventDefault();
                e.stopPropagation();
                await createUser();
            });
        });
        function initializeSelect2() {
            $('.superior-select').select2({
                placeholder: 'Atanacak kullanıcı(lar) seçin',
                theme: 'bootstrap-5',
                multiple: true,
                width: '100%'
            });
        }
        function clearCreateUserForm() {
            $('#txtCUsername').val('');
            $('#txtCPassword').val('');
            $('#txtCName').val('');
            $('#txtCSurname').val('');

            // Select2 alanlarını temizle
            $('#ddCRole').val('').trigger('change');
            $('#ddCSuperior').val('').trigger('change');
        }
        function clearUpdateUserForm() {
            $('#txtUUsername').val('');
            $('#txtUPassword').val('');
            $('#txtUName').val('');
            $('#txtUSurname').val('');

            // Select2 alanlarını temizle
            $('#ddURole').val('').trigger('change');
            $('#ddUSuperior').val('').trigger('change');
            $('#ddUStatus').val('').trigger('change');
        }
        async function initializeDataTable() {
            usersTable = $('#usersTable').DataTable({
                "processing": true,
                "ajax": {
                    "url": "/kullanici-yonetimi/liste",
                    "type": "GET",
                    "dataSrc": function (json) {
                        if (json && json.isSuccess && json.data) {
                            return json.data;
                        }
                        return [];
                    },
                    "error": function (xhr, error, code) {
                        console.error('DataTables AJAX error:', error);
                        let errorMessage = 'Veriler yüklenirken hata oluştu';
                        try {
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage += ': ' + xhr.responseJSON.message;
                            } else if (xhr.responseText) {
                                errorMessage += ': ' + xhr.responseText;
                            }
                        } catch (e) {
                            errorMessage += ': ' + error;
                        }

                        toastr.error(errorMessage);
                    }
                },
                "columns": [
                    {
                        "data": null,
                        "width": "5%",
                        "orderable": false,
                        "className": "text-center",
                        "render": function (data, type, row, meta) {
                            return '';
                        }
                    },
                    {
                        "data": "userName",
                        "render": function (data) {
                            return data ? `<strong>${data}</strong>` : '';
                        }
                    },
                    {
                        "data": "fullName",
                        "render": function (data) {
                            return data || '';
                        }
                    },
                    {
                        "data": "roleName",
                        "render": function (data) {
                            if (data == "Admin") {
                                return `<span class="badge bg-primary">${data}</span>`;
                            }
                            else if (data == "Şef") {
                                return `<span class="badge bg-info">${data}</span>`;
                            }
                            else if (data == "Personel") {
                                return `<span class="badge bg-warning">${data}</span>`;
                            }
                            else if (data == "Yönetici") {
                                return `<span class="badge bg-danger">${data}</span>`;
                            }
                            else {
                                return `<span class="badge bg-secondary">${data}</span>`;
                            }
                        }
                    },
                    {
                        "data": "isActive",
                        "width": "10%",
                        "className": "text-center",
                        "render": function (data) {
                            return data ?
                                '<span class="badge bg-success">Evet</span>' :
                                '<span class="badge bg-danger">Hayır</span>';
                        }
                    },
                    {
                        "data": null,
                        "width": "10%",
                        "orderable": false,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            const currentUserId = '@User.FindFirst(ClaimTypes.NameIdentifier)?.Value';

                            if (row.id === currentUserId) {
                                return '<span class="text-muted">-</span>';
                            }
                            const statusButton = row.isActive
                                ? `<button type="button" class="btn btn-outline-success btn-sm"
                                                    onclick="deactivateUser('${row.id}')" title="Pasifleştir">
                                                    <i class="fas fa-toggle-on"></i>
                                                   </button>`
                                : `<button type="button" class="btn btn-outline-secondary btn-sm"
                                                    onclick="activateUser('${row.id}')" title="Aktifleştir">
                                                    <i class="fas  fa-toggle-off"></i>
                                                   </button>`;
                            return `
                                                <div class="btn-group btn-group-sm" role="group">
                                                 <button type="button" class="btn btn-outline-warning btn-sm"
                                                   onclick="getUser('${row.id}')" title="Düzenle">
                                                  <i class="fas fa-edit"></i>
                                                 </button>
                                                 ${statusButton}
                                                 <button type="button" class="btn btn-outline-danger btn-sm"
                                                   onclick="deleteUser('${row.id}')" title="Sil">
                                                  <i class="fas fa-trash"></i>
                                                 </button>
                                                </div>
                                               `;
                        }
                    }
                ],
                  "language": {
                    url: 'https://cdn.datatables.net/plug-ins/2.3.2/i18n/tr.json'
                },
                "lengthMenu": [[10, 25, 50, 100], [10, 25, 50, 100]],
                "pageLength": 10,
                "responsive": true,
                "searchDelay": 300,
                "order": [[3, "asc"]],
                "drawCallback": function () {
                    var api = this.api();
                    var pageInfo = api.page.info();

                    api.column(0, { page: 'current' }).nodes().each(function (cell, i) {
                        cell.innerHTML = pageInfo.start + i + 1;
                    });
                    $('[title]').tooltip();
                }
            });
        }

        async function createUser() {
            try {
                const form = document.querySelector('#createUserModal form');
                if (!form.checkValidity()) {
                    form.classList.add('was-validated');
                    return;
                }

                const userData = {
                    UserName: $('#txtCUsername').val().trim(),
                    Name: $('#txtCName').val().trim(),
                    Surname: $('#txtCSurname').val().trim(),
                    Password: $('#txtCPassword').val(),
                    RoleName: $('#ddCRole').val(),
                    SuperiorIds: $('#ddCSuperior').val() || []
                };

                const submitBtn = $('#btnCreateUser');
                submitBtn.prop('disabled', true)
                    .html('<i class="fas fa-spinner fa-spin me-2"></i>Oluşturuluyor...');

                const response = await $.ajax({
                    url: '/kullanici-yonetimi/olustur',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(userData),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                toastr.success('Kullanıcı başarıyla oluşturuldu!');
                $('#createUserModal').modal('hide');
                usersTable.ajax.reload(null, false);

            } catch (error) {
                console.error('Kullanıcı oluşturma hatası:', error);

                let errorMessage = 'Kullanıcı oluşturulurken hata oluştu';

                if (error.responseJSON) {

                    if (error.responseJSON.message) {
                        errorMessage = error.responseJSON.message;
                    }
                    else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                        errorMessage = error.responseJSON.errors.join(', ');
                    }
                } else if (error.message) {
                    errorMessage = error.message;
                }

                toastr.error(errorMessage);
            } finally {
                const submitBtn = $('#btnCreateUser');
                submitBtn.prop('disabled', false).html('Oluştur');
            }
        }

        async function updateUser() {
            try {
                const form = document.querySelector('#updateUserModal form');
                if (!form.checkValidity()) {
                    form.classList.add('was-validated');
                    return;
                }

                const userData = {
                    Id: $('#txtUUserId').val(),
                    UserName: $('#txtUUsername').val().trim(),
                    Password: $("#txtUPassword").val().trim() || null,
                    Name: $('#txtUName').val().trim(),
                    Surname: $('#txtUSurname').val().trim(),
                    RoleName: $('#ddURole').val(),
                    IsActive: $('#ddUStatus').val() === "true",
                    SuperiorIds: $('#ddUSuperior').val() || []
                };

                if (!userData.Id) {
                    toastr.error('Kullanıcı ID\'si bulunamadı');
                    return;
                }

                const submitBtn = $('#updateUserModal button[type="submit"]');
                submitBtn.prop('disabled', true)
                    .html('<i class="fas fa-spinner fa-spin me-2"></i>Güncelleniyor...');

                // API çağrısı
                const response = await $.ajax({
                    url: `/kullanici-yonetimi/guncelle/${userData.Id}`,
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(userData),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                toastr.success('Kullanıcı başarıyla güncellendi!');
                $('#updateUserModal').modal('hide');
                usersTable.ajax.reload(null, false);

            } catch (error) {
                console.error('Kullanıcı güncelleme hatası:', error);


                let errorMessage = 'Kullanıcı güncellenirken hata oluştu';

                if (error.responseJSON) {

                    if (error.responseJSON.message) {
                        errorMessage = error.responseJSON.message;
                    }
                    else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                        errorMessage = error.responseJSON.errors.join(', ');
                    }
                } else if (error.message) {
                    errorMessage = error.message;
                }

                toastr.error(errorMessage);
            } finally {
                const submitBtn = $('#updateUserModal button[type="submit"]');
                submitBtn.prop('disabled', false).html('Güncelle');
            }
        }

        async function activateUser(userId) {
            try {
                const result = await Swal.fire({
                    title: 'Kullanıcıyı Aktifleştir',
                    text: 'Bu kullanıcıyı aktifleştirmek istediğinizden emin misiniz?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-check"></i> Evet, Aktifleştir',
                    cancelButtonText: '<i class="fas fa-times"></i> İptal',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const response = await $.ajax({
                                url: `/kullanici-yonetimi/aktif-et/${userId}`,
                                type: 'PUT',
                                contentType: 'application/json',
                                headers: {
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                }
                            });
                            return response;
                        } catch (error) {

                            let errorMessage = 'Aktifleştirme başarısız';

                            if (error.responseJSON) {
                                if (error.responseJSON.message) {
                                    errorMessage = error.responseJSON.message;
                                } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                                    errorMessage = error.responseJSON.errors.join(', ');
                                }
                            }

                            Swal.showValidationMessage(`Hata: ${errorMessage}`);
                            throw error;
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    await Swal.fire({
                        title: 'Başarılı!',
                        text: 'Kullanıcı başarıyla aktifleştirildi.',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });

                    usersTable.ajax.reload(null, false);
                }

            } catch (error) {
                console.error('Aktifleştirme hatası:', error);
                throw error;
            }
        }

        async function deactivateUser(userId) {
            try {
                const result = await Swal.fire({
                    title: 'Kullanıcıyı Pasifleştir',
                    text: 'Bu kullanıcıyı pasifleştirmek istediğinizden emin misiniz?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#ffc107',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-user-slash"></i> Evet, Pasifleştir',
                    cancelButtonText: '<i class="fas fa-times"></i> İptal',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const response = await $.ajax({
                                url: `/kullanici-yonetimi/pasif-et/${userId}`,
                                type: 'PUT',
                                contentType: 'application/json',
                                headers: {
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                }
                            });
                            return response;
                        } catch (error) {

                            let errorMessage = 'Pasifleştirme başarısız';

                            if (error.responseJSON) {
                                if (error.responseJSON.message) {
                                    errorMessage = error.responseJSON.message;
                                } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                                    errorMessage = error.responseJSON.errors.join(', ');
                                }
                            }

                            Swal.showValidationMessage(`Hata: ${errorMessage}`);
                            throw error;
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    await Swal.fire({
                        title: 'Başarılı!',
                        text: 'Kullanıcı başarıyla pasifleştirildi.',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });

                    usersTable.ajax.reload(null, false);
                }

            } catch (error) {
                console.error('Pasifleştirme hatası:', error);
                throw error;
            }
        }

        async function deleteUser(userId) {
            try {
                const result = await Swal.fire({
                    title: 'Kullanıcıyı Sil',
                    text: 'Bu kullanıcıyı silmek istediğinizden emin misiniz? Bu işlem geri alınamaz!',
                    icon: 'error',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-trash"></i> Evet, Sil',
                    cancelButtonText: '<i class="fas fa-times"></i> İptal',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const response = await $.ajax({
                                url: `/kullanici-yonetimi/sil/${userId}`,
                                type: 'DELETE',
                                contentType: 'application/json',
                                headers: {
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                }
                            });
                            return response;
                        } catch (error) {

                            let errorMessage = 'Silme başarısız';

                            if (error.responseJSON) {
                                if (error.responseJSON.message) {
                                    errorMessage = error.responseJSON.message;
                                } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                                    errorMessage = error.responseJSON.errors.join(', ');
                                }
                            }

                            Swal.showValidationMessage(`Hata: ${errorMessage}`);
                            throw error;
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    await Swal.fire({
                        title: 'Başarılı!',
                        text: 'Kullanıcı başarıyla silindi.',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });

                    usersTable.ajax.reload(null, false);
                }

            } catch (error) {
                console.error('Silme hatası:', error);
                throw error;
            }
        }

        async function getUser(userId) {
            try {
                if ($('#updateUserModal').length > 0) {
                    $('#updateUserModal input, #updateUserModal select, #updateUserModal button').prop('disabled', true);
                    $('#updateUserModal .modal-body').prepend(`
                                                                <div id="formLoader" class="text-center py-3">
                                                                    <div class="spinner-border text-primary" role="status">
                                                                        <span class="visually-hidden">Yükleniyor...</span>
                                                                    </div>
                                                                    <div class="mt-2">Kullanıcı bilgileri getiriliyor...</div>
                                                                </div>
                                                            `);
                }

                const response = await $.ajax({
                    url: `/kullanici-yonetimi/${userId}`,
                    type: 'GET',
                    contentType: 'application/json'
                });
                console.log(response)

                if (response) {
                    const userData = response;

                    $('#txtUUserId').val(userData.id || '');
                    $('#txtUUsername').val(userData.userName || '');
                    $('#txtUPassword').val('');
                    $('#txtUName').val(userData.name || '');
                    $('#txtUSurname').val(userData.surname || '');
                    $('#ddURole').val(userData.roleName);
                    $('#ddUStatus').val(userData.isActive ? "true" : "false");
                    if (userData.superiorIds && Array.isArray(userData.superiorIds) && userData.superiorIds.length > 0) {
                        $('#ddUSuperior').val(userData.superiorIds).trigger('change');
                    } else {
                        $('#ddUSuperior').val([]).trigger('change'); // Boş array - hiçbiri seçili değil
                    }

                    const form = document.querySelector('#updateUserModal form');
                    if (form) {
                        form.classList.remove('was-validated');
                    }

                    $('#updateUserModal').modal('show');
                    return userData;

                } else {
                    throw new Error('Kullanıcı verisi alınamadı');
                }

            } catch (error) {
                console.error('Kullanıcı getirme hatası:', error);
                let errorMessage = 'Kullanıcı bilgileri alınırken hata oluştu';
                if (error.responseJSON) {
                    if (error.responseJSON.message) {
                        errorMessage = error.responseJSON.message;
                    } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                        errorMessage = error.responseJSON.errors.join(', ');
                    }
                } else if (error.message) {
                    errorMessage = error.message;
                }
                toastr.error(errorMessage);
                throw error;
            } finally {
                $('#formLoader').remove();
                $('#updateUserModal input, #updateUserModal select, #updateUserModal button').prop('disabled', false);
            }
        }

        async function getRoles() {
            try {
                const roleSelects = $('.ddRole');
                if (!roleSelects.length) {
                    console.warn('Role select elements not found');
                    return;
                }

                roleSelects.prop('disabled', true);
                roleSelects.html('<option value="">Yükleniyor...</option>');

                const response = await $.ajax({
                    url: '/kullanici-yonetimi/aktif-roller',
                    type: 'GET',
                    dataType: 'json'
                });

                if (response && response.isSuccess && response.data) {
                    roleSelects.each(function () {
                        const currentSelect = $(this);
                        currentSelect.empty();
                        currentSelect.append('<option selected disabled value="">Rol seçiniz...</option>');

                        response.data.forEach(role => {
                            currentSelect.append(`<option value="${role.name}">${role.name}</option>`);

                        });
                    });

                } else {
                    throw new Error(response?.message || 'Roller yüklenemedi');
                }
            } catch (error) {
                console.error('Roller yüklenirken hata:', error);
                $('.ddRole').each(function () {
                    $(this).html('<option value="">Rol yüklenemedi</option>');
                });


                let errorMessage = 'Roller yüklenirken hata oluştu';

                if (error.responseJSON) {
                    if (error.responseJSON.message) {
                        errorMessage = error.responseJSON.message;
                    } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                        errorMessage = error.responseJSON.errors.join(', ');
                    }
                } else if (error.message) {
                    errorMessage = error.message;
                }

                toastr.error(errorMessage);
            } finally {
                $('.ddRole').prop('disabled', false);
            }
        }
        async function getSuperiorUsers() {
            try {
                const superiorSelects = $('.superior-select');
                if (!superiorSelects.length) {
                    console.warn('Superior select elements not found');
                    return;
                }

                // Select2'yi devre dışı bırak
                superiorSelects.prop('disabled', true);

                // Select2 için loading durumu
                superiorSelects.each(function () {
                    const currentSelect = $(this);
                    currentSelect.empty();
                    currentSelect.append('<option value="">Yükleniyor...</option>');

                    // Eğer Select2 initialize edilmişse trigger et
                    if (currentSelect.hasClass('select2-hidden-accessible')) {
                        currentSelect.trigger('change');
                    }
                });

                const response = await $.ajax({
                    url: '/kullanici-yonetimi/aktif-ust-kullanicilar',
                    type: 'GET',
                    dataType: 'json'
                });
                if (response && response.isSuccess && response.data) {
                    superiorSelects.each(function () {
                        const currentSelect = $(this);
                        currentSelect.empty();

                        response.data.forEach(user => {
                            currentSelect.append(`<option value="${user.id}">${user.fullName}</option>`);

                        });

                        // Select2 için change event'ini trigger et
                        if (currentSelect.hasClass('select2-hidden-accessible')) {
                            currentSelect.trigger('change');
                        }
                    });
                } else {
                    throw new Error(response?.message || 'Üst kullanıcılar yüklenemedi');
                }
            } catch (error) {
                console.error('Üst kullanıcılar yüklenirken hata:', error);

                $('.superior-select').each(function () {
                    const currentSelect = $(this);
                    currentSelect.html('<option value="">Kullanıcılar yüklenemedi</option>');

                    // Select2 için change event'ini trigger et
                    if (currentSelect.hasClass('select2-hidden-accessible')) {
                        currentSelect.trigger('change');
                    }
                });

                let errorMessage = 'Üst kullanıcılar yüklenirken hata oluştu';
                if (error.responseJSON) {
                    if (error.responseJSON.message) {
                        errorMessage = error.responseJSON.message;
                    } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                        errorMessage = error.responseJSON.errors.join(', ');
                    }
                } else if (error.message) {
                    errorMessage = error.message;
                }

                toastr.error(errorMessage);
            } finally {
                $('.superior-select').prop('disabled', false);
            }
        }
    </script>
}