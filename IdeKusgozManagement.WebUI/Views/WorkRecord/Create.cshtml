@{
    ViewData["Title"] = "Puantaj Ekle";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.rtl.min.css" />

    <link href="~/css/puantaj-common.css" rel="stylesheet" />

}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="fas fa-calendar-day me-2"></i>
                    Puantaj Oluşturma Sayfası

                </h5>
                <div class="mb-3">
                    <span class="badge bg-danger me-2">Tam Gün Resmi Tatil</span>
                    <span class="badge bg-warning text-dark">Yarım Gün Resmi Tatil</span>
                </div>
                <!-- Info Alert -->
                <div id="infoAlert" class="alert alert-info d-none" role="alert">
                    <i class="fas fa-info-circle me-2"></i>
                    <span id="infoMessage"></span>
                </div>

                <!-- Yıl ve Ay Seçimi -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <label for="year-select" class="form-label">Yıl</label>
                        <select id="year-select" class="form-select">
                            @for (int year = DateTime.Now.Year - 2; year <= DateTime.Now.Year; year++)
                            {
                                if (year == DateTime.Now.Year)
                                {
                                    <option value="@year" selected>@year</option>
                                }
                                else
                                {
                                    <option value="@year">@year</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="month-select" class="form-label">Ay</label>
                        <select id="month-select" class="form-select">
                            <option value="1">Ocak</option>
                            <option value="2">Şubat</option>
                            <option value="3">Mart</option>
                            <option value="4">Nisan</option>
                            <option value="5">Mayıs</option>
                            <option value="6">Haziran</option>
                            <option value="7">Temmuz</option>
                            <option value="8">Ağustos</option>
                            <option value="9">Eylül</option>
                            <option value="10">Ekim</option>
                            <option value="11">Kasım</option>
                            <option value="12">Aralık</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">&nbsp;</label>
                        <button type="button" class="btn btn-info d-block w-100 btnSaveWorkRecords">
                            <i class="fas fa-save me-2"></i>Kaydet
                        </button>
                    </div>
                </div>

                <!-- Dinamik Tablo -->
                <div id="dynamicTableContainer">
                    <div id="tableLoadingSpinner" class="text-center py-5" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Yükleniyor...</span>
                        </div>
                        <div class="mt-3">
                            <h6 class="text-muted">Tablo oluşturuluyor...</h6>
                            <small class="text-muted">Lütfen bekleyiniz</small>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table id="workRecordsTable" class="table table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>TARİH</th>
                                    <th>TATİL</th>
                                    <th style="width:100px;max-width:100px;">BAŞLAMA<br /> SAATİ</th>
                                    <th style="width:100px;max-width:100px;">BIRAKMA<br /> SAATİ</th>
                                    <th>PROJE</th>
                                    <th>ÇALIŞILAN<br /> EKİPMAN</th>
                                    <th>ÇALIŞILAN<br /> İL</th>
                                    <th>ÇALIŞILAN<br /> İLÇE</th>
                                    <th style="width:70px;max-width:70px;">YOL(₺)</th>
                                    <th style="width:120px;max-width:120px;">MASRAF</th>
                                    <th>YEMEK</th>
                                    <th>DURUM</th>
                                </tr>
                            </thead>
                            <tbody id="workRecordsTableBody">
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="col-md-12">
                    <label class="form-label">&nbsp;</label>
                    <button type="button" class="btn btn-info d-block w-100 btnSaveWorkRecords">
                        <i class="fas fa-save me-2"></i>Kaydet
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="expenseModal" tabindex="-1" aria-labelledby="expenseModalLabel" aria-hidden="true"
    data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="expenseModalLabel">
                    <i class="fas fa-receipt me-2"></i>
                    Masraf Bilgileri - <span id="modalDateInfo"></span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="expenseForm" class="needs-validation" novalidate>
                <div class="modal-body">
                    <!-- Mevcut Masraflar Listesi -->
                    <div id="currentExpensesList" class="mb-3" style="display: none;">
                        <h6 class="text-muted">Mevcut Masraflar:</h6>
                        <div id="expenseItemsList" class="list-group mb-3">
                            <!-- Masraf listesi buraya gelecek -->
                        </div>
                    </div>

                    <!-- Yeni Masraf Ekleme Formu -->
                    <div id="addExpenseForm" class="row g-3">
                        <div class="col-md-6">
                            <label for="expense-select" class="form-label">Masraf Türü</label>
                            <select class="form-select expense-select" id="expense-select" required>
                            </select>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen geçerli bir masraf seçiniz.</div>
                        </div>
                        <div class="col-md-6">
                            <label for="txtAmount" class="form-label">Tutar (₺)</label>
                            <input type="number" class="form-control" id="txtAmount" step="0.01" min="0" required>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen geçerli bir tutar giriniz.</div>
                        </div>
                        <div class="col-md-12">
                            <label for="txtDescription" class="form-label">Açıklama</label>
                            <textarea class="form-control" id="txtDescription" placeholder="Opsiyonel"></textarea>
                        </div>
                        <div class="col-md-12">
                            <label for="fileReceipt" class="form-label">Fatura</label>
                            <input type="file" class="form-control" id="fileReceipt" required
                                accept=".jpg,.jpeg,.png,.pdf,.doc,.docx">
                            <div class="form-text">
                                Desteklenen formatlar: PDF, JPG, JPEG, PNG, DOC, DOCX
                            </div>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen geçerli bir dosya seçiniz.</div>
                        </div>
                    </div>

                    <!-- Toplam Masraf -->
                    <div class="mt-3 p-2 bg-light rounded" id="totalExpenseSection" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="fw-bold">Toplam Masraf:</span>
                            <span class="fw-bold text-primary" id="totalExpenseAmount">₺0,00</span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Kapat</button>
                    <button class="btn btn-primary w-100" type="submit" id="btnAddExpense">
                        <i class="fas fa-plus me-1"></i>Masraf Ekle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="~/js/turkey-locations.js"></script>
    <script src="~/js/workrecord-common.js"></script>

    <script>
        // Page-specific variables
        let workRecordsTable;
        let existingWorkRecords = {};
        let hasApprovedRecords = false;
        let currentYear = new Date().getFullYear();
        let currentMonth = new Date().getMonth() + 1;
        let expenseData = {};
        let currentEditingDay = null;
        let holidayData = {};

        // Override initializeAllSelects for Create page
        async function initializeAllSelects() {
            await initializeEquipmentSelect();
            initializeLocationSelects();
            await initializeExpenseSelect();
            await initializeProjectSelect();
            await initializeDailyStatusSelect();
        }

        // ===== EXPENSE MANAGEMENT =====
        function setupExpenseModal() {
            $('#expenseModal').on('show.bs.modal', function (event) {
                const button = $(event.relatedTarget);
                currentEditingDay = button.data('day');

                if (currentEditingDay) {
                    const date = new Date(currentYear, currentMonth - 1, currentEditingDay);
                    const dateStr = `${currentEditingDay.toString().padStart(2, '0')}.${currentMonth.toString().padStart(2, '0')}.${currentYear} ${getDayOfWeekTurkish(date.getDay())}`;
                    $('#modalDateInfo').text(dateStr);

                    // Modal başlığını güncelle
                    $('#expenseModalLabel').html(`<i class="fas fa-receipt me-2"></i>${dateStr} - Masraf Bilgileri`);

                    loadExpensesForDay(currentEditingDay);
                    clearExpenseForm();
                }
            });
        }

        function loadExpensesForDay(day) {
            if (!expenseData[day]) {
                expenseData[day] = [];
            }

            // Onaylanmış kayıt kontrolü
            const existingRecord = existingWorkRecords[day];
            const isApproved = existingRecord && existingRecord.status === 1;

            displayCurrentExpenses(day, isApproved);
            updateTotalExpense(day);
        }

        function displayCurrentExpenses(day, isApproved = false) {
            const expenses = expenseData[day] || [];
            const expensesList = $('#expenseItemsList');
            const currentExpensesSection = $('#currentExpensesList');
            expensesList.empty();

            // Onaylanmış kayıt kontrolü
            const existingRecord = existingWorkRecords[day];
            const isRecordApproved = existingRecord && existingRecord.status === 1;
            const shouldDisable = isApproved || isRecordApproved;

            if (expenses.length > 0) {
                currentExpensesSection.show();
                expenses.forEach((expense, index) => {
                    const expenseName = expense.expenseName ?? $('#expense-select option[value="' + expense.expenseId + '"]').text();
                    const actionButton = shouldDisable
                        ? `<span class="badge bg-success"><i class="fas fa-check me-1"></i>Onaylandı</span>`
                        : `<button type="button" class="btn btn-sm btn-outline-danger remove-expense-btn" data-index="${index}" title="Masrafı Sil"><i class="fas fa-trash"></i></button>`;

                    let fileDisplay = '';
                    if (expense.fileId) {
                        fileDisplay = `<br/><a href="/dosya/indir/${expense.fileId}" download class="text-muted text-decoration-underline"><i class="fas fa-download me-1"></i>${expense.originalFileName}</a>`;
                    } else if (expense.receiptFile && expense.receiptFile.name) {
                        fileDisplay = `<br/><small class="text-muted">${expense.receiptFile.name}</small>`;
                    }

                    const expenseItem = `
                                                                                                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                                                                                                <div>
                                                                                                                                    <h6 class="mb-1">${expenseName}</h6>
                                                                                                                                    <p class="mb-1"><strong>${expense.amount.toFixed(2)} ₺</strong></p>
                                                                                                                                    ${expense.description ? `<small class="text-muted">${expense.description}</small>` : ''}
                                                                                                                                    ${fileDisplay}
                                                                                                                                </div>
                                                                                                                                ${actionButton}
                                                                                                                            </div>
                                                                                                                        `;
                    expensesList.append(expenseItem);
                });
            } else {
                currentExpensesSection.hide();
            }

            // Onaylanmış kayıtlarda masraf ekleme formunu gizle
            if (shouldDisable) {
                $('#addExpenseForm').hide();
                // Masraf Ekle butonunu Onaylandı yazısıyla değiştir
                $('#btnAddExpense').html('<i class="fas fa-check me-1"></i>Onaylandı').removeClass('btn-primary').addClass('btn-success').prop('disabled', true);
            } else {
                $('#addExpenseForm').show();
                // Butonu normal haline getir
                $('#btnAddExpense').html('<i class="fas fa-plus me-1"></i>Masraf Ekle').removeClass('btn-success').addClass('btn-primary').prop('disabled', false);
            }
        }

        function addExpenseToDay() {
            const expenseId = $('#expense-select').val();
            const amount = parseFloat($('#txtAmount').val());
            const description = $('#txtDescription').val();
            const receiptFile = $('#fileReceipt')[0].files[0] ?? null;

            if (expenseId == null || expenseId == undefined || isNaN(amount) || amount == null) {
                toastr.warning("Masraf türünü ya da tutarı kontrol ediniz");
                return;
            }

            if (!receiptFile) {
                toastr.error("Masraf eklemek için belge yüklenmesi zorunludur!");
                return;
            }

            if (!expenseData[currentEditingDay]) {
                expenseData[currentEditingDay] = [];
            }

            const newExpense = {
                id: null, // Yeni expense için id null
                expenseId: expenseId,
                amount: amount,
                description: description,
                receiptFile: receiptFile
            };

            expenseData[currentEditingDay].push(newExpense);
            displayCurrentExpenses(currentEditingDay);
            updateTotalExpense(currentEditingDay);
            updateExpenseButton(currentEditingDay);
            clearExpenseForm();
            toastr.success('Masraf eklendi!', 'Başarılı!');
        }

        function removeExpenseFromDay(index) {
            if (expenseData[currentEditingDay] && expenseData[currentEditingDay][index]) {
                expenseData[currentEditingDay].splice(index, 1);
                displayCurrentExpenses(currentEditingDay);
                updateTotalExpense(currentEditingDay);
                updateExpenseButton(currentEditingDay);
                toastr.info('Masraf silindi!', 'Bilgi');
            }
        }

        function setupExpenseEventListeners() {
            $('#expenseForm').on('submit', function (e) {
                e.preventDefault();
                if (this.checkValidity()) {
                    addExpenseToDay();
                }
                $(this).addClass('was-validated');
            });

            $(document).on('click', '.remove-expense-btn', function () {
                const expenseIndex = $(this).data('index');
                removeExpenseFromDay(expenseIndex);
            });
        }

        // Override populateProvincesAndDistricts for Create page
        async function populateProvincesAndDistricts(workRecords) {
            const recordsArray = Array.isArray(workRecords) ? workRecords : Object.values(workRecords);

            $('.province-select').each(function () {
                populateProvinces($(this));
            });

            setupLocationEventListeners();

            if (recordsArray.length > 0) {
                recordsArray.forEach(record => {
                    const date = new Date(record.date);
                    const day = date.getDate();
                    const provinceSelect = $(`.province-select[data-day="${day}"]`);
                    populateProvinces(provinceSelect);

                    setTimeout(() => {
                        provinceSelect.val(record.province || '').trigger('change');
                        setTimeout(() => {
                            const districtSelect = $(`.district-select[data-day="${day}"]`);
                            if (record.province) {
                                populateDistricts(provinceSelect, districtSelect);
                                setTimeout(() => {
                                    districtSelect.val(record.district || '').trigger('change');
                                }, 100);
                            }
                        }, 100);
                    }, 50);
                });
            }
        }

        // ===== TIME INPUT HANDLERS =====
        function setupAdditionalTimeHandlers() {
            $(document).on('click', '.additional-time-btn', function () {
                const day = $(this).data('day');
                const additionalSection = $(`.additional-time-section[data-day="${day}"]`);

                if (additionalSection.is(':visible')) {
                    additionalSection.hide();
                    $(this).removeClass('btn-success').addClass('btn-outline-success');
                    $(this).find('i').removeClass('fa-minus').addClass('fa-plus');
                } else {
                    additionalSection.show();
                    $(this).removeClass('btn-outline-success').addClass('btn-success');
                    $(this).find('i').removeClass('fa-plus').addClass('fa-minus');
                }
            });

            $(document).on('focus', '.time-input, .additional-start-time, .additional-end-time', function () {
                const input = $(this)[0];
                const value = input.value;
                if (value === ':') {
                    input.value = '';
                    input.setSelectionRange(0, 0);
                }
            });

            $(document).on('keyup', '.time-input, .additional-start-time, .additional-end-time', function (e) {
                const input = $(this)[0];
                const value = input.value;
                if ((e.keyCode === 8 || e.keyCode === 46) && value === ':') {
                    input.value = '';
                    input.setSelectionRange(0, 0);
                }
            });

            $(document).on('click', '.time-input, .additional-start-time, .additional-end-time', function () {
                const input = $(this)[0];
                const value = input.value;
                if (value === ':') {
                    input.value = '';
                    input.setSelectionRange(0, 0);
                }
            });

            $(document).on('input', '.time-input, .additional-start-time, .additional-end-time', function () {
                let value = $(this).val();
                const input = $(this)[0];
                value = value.replace(/[^0-9:]/g, '');
                if (value.includes('.') || value.includes(',') || value.includes(' ')) {
                    value = value.replace(/[.,\s]/g, ':');
                }
                if (value.length > 5) {
                    value = value.substring(0, 5);
                }
                if (value.length === 2 && !value.includes(':')) {
                    value += ':';
                }
                value = validateAndConvertTime(value);
                $(this).val(value);
                if (value === ':') {
                    input.value = '';
                    input.setSelectionRange(0, 0);
                }
            });

            $(document).on('blur', '.time-input, .additional-start-time, .additional-end-time', function () {
                let value = $(this).val();
                if (value === '00:00') {
                    $(this).val('23:59');
                }
            });
        }

        // ===== LEAVE REQUEST FUNCTIONS =====
        async function getApprovedLeaveRequests() {
            try {

                const response = await $.ajax({
                    url: `/izin/listem/durum/1`,
                    type: 'GET',
                    dataType: 'json'
                });

                console.log('Leave requests response:', response);
                if (response && response.isSuccess && response.data) {
                    console.log('Approved leave requests loaded:', response.data);
                    return response.data;
                } else {
                    console.warn('Failed to load approved leave requests:', response);
                    return null;
                }
            } catch (error) {
                console.error('Error loading approved leave requests:', error);
                return null;
            }
        }

        function getLeaveRequestReasonForDay(day, month, year, approvedLeaveRequests) {
            console.log(`Checking leave requests for day ${day}/${month}/${year}:`, approvedLeaveRequests);

            if (!approvedLeaveRequests || !Array.isArray(approvedLeaveRequests)) {
                console.log('No approved leave requests or not an array');
                return null;
            }

            const targetDate = new Date(year, month - 1, day);
            // Normalize time to start of day for comparison
            targetDate.setHours(0, 0, 0, 0);
            console.log('Target date (normalized):', targetDate);

            for (const leaveRequest of approvedLeaveRequests) {
                console.log('Checking leave request:', leaveRequest);
                if (leaveRequest.startDate && leaveRequest.endDate && leaveRequest.reason) {
                    const startDate = new Date(leaveRequest.startDate);
                    const endDate = new Date(leaveRequest.endDate);

                    // Normalize times to start of day for comparison
                    startDate.setHours(0, 0, 0, 0);
                    endDate.setHours(0, 0, 0, 0);

                    console.log(`Date range (normalized): ${startDate} to ${endDate}`);

                    // Check if the target date falls within the leave request date range
                    if (targetDate >= startDate && targetDate <= endDate) {
                        console.log(`Found matching leave request with reason: ${leaveRequest.reason}`);
                        return leaveRequest.reason;
                    }
                }
            }

            console.log('No matching leave request found');
            return null;
        }

        // ===== PAGE INITIALIZATION =====
        $(document).ready(async function () {
            await initializePage();
        });

        async function initializePage() {
            $('body').addClass('sidebar-hidden');

            $('#year-select').val(currentYear);
            $('#month-select').val(currentMonth);

            // Initialize all components
            await initializeAllSelects();
            setupExpenseModal();
            setupExpenseEventListeners();
            setupAdditionalTimeHandlers();

            // Page-specific event listeners
            setupPageEventListeners();

            // Auto-generate table on page load
            await generateDynamicTable();
        }

        function setupPageEventListeners() {
            $('.btnSaveWorkRecords').on('click', saveWorkRecords);
            $('#year-select, #month-select').on('change', generateDynamicTable);

            // Saat değişikliklerinde G checkbox kontrolü
            $(document).on('change blur', '.start-time, .end-time, .additional-start-time, .additional-end-time', function () {
                const day = $(this).data('day');
                if (day) {
                    checkNightMealEligibility(day);
                }
            });

            // Handle add expense submit
            $(document).on('submit', '#expenseForm', function (e) {
                e.preventDefault();
                const form = this;

                if (!form.checkValidity()) {
                    $(form).addClass('was-validated');
                    return;
                }

                if (!currentEditingDay) {
                    toastr.error('Gün bilgisi bulunamadı.', 'Hata!');
                    return;
                }

                addExpenseToDay();
                form.reset();
                $('#expense-select').val(null).trigger('change');
                $(form).removeClass('was-validated');
            });

            // Click handler to show reject reason
            $(document).on('click', '.status-rejected', function () {
                const encoded = $(this).data('reason');
                const reason = encoded ? decodeURIComponent(encoded) : '';
                if (reason) {
                    Swal.fire({
                        title: 'Reddetme Açıklaması',
                        text: reason,
                        icon: 'info'
                    });
                }
            });
        }
        async function loadHolidays(year) {
            try {
                const response = await $.ajax({
                    url: `/tatil/${year}/yili`,
                    type: 'GET',
                    dataType: 'json',
                    timeout: 10000
                });
                if (response?.isSuccess && Array.isArray(response.data)) {
                    holidayData = {};
                    response.data.forEach(holiday => {
                        if (holiday.date && holiday.name) {
                            const isoString = holiday.date.iso;
                            if (!isoString) {
                                console.warn('No ISO date found for holiday:', holiday);
                                return;
                            }
                            const holidayDate = new Date(isoString);
                            if (isNaN(holidayDate.getTime())) {
                                console.warn('Invalid date for holiday:', holiday);
                                return;
                            }
                            const day = holidayDate.getDate();
                            const month = holidayDate.getMonth() + 1;
                            const key = `${month}-${day}`;

                            holidayData[key] = {
                                name: holiday.name,
                                date: holiday.date,
                                primaryType: holiday.primary_type
                            };
                        }
                    });
                    return true;
                } else {
                    console.warn('Geçersiz response formatı:', response);
                    holidayData = {};
                    return false;
                }
            } catch (error) {
                console.error('Tatil verileri yüklenirken hata:', error);
                holidayData = {};
                return false;
            }
        }

        function checkIfHoliday(day, month, year) {
            if (!holidayData) return false;
            const key = `${month}-${day}`;
            const holiday = holidayData[key];
            return holiday || false;
        }

        // Yeni yardımcı fonksiyonlar
        function isFullHoliday(day, month, year) {
            const holiday = checkIfHoliday(day, month, year);
            return holiday && holiday.primaryType === 'National holiday';
        }

        function isHalfDayHoliday(day, month, year) {
            const holiday = checkIfHoliday(day, month, year);
            return holiday && holiday.primaryType === 'Half Day';
        }
        async function loadExistingWorkRecords(year, month) {
            try {
                const formattedDate = `${year}-${String(month).padStart(2, '0')}-01`;
                const response = await $.ajax({
                    url: `/puantaj/listem/tarih/${formattedDate}`,
                    type: 'GET'
                });

                if (response.isSuccess && response.data && response.data.length > 0) {
                    existingWorkRecords = {};
                    hasApprovedRecords = false;

                    response.data.forEach(record => {
                        const date = new Date(record.date);
                        const day = date.getDate();
                        existingWorkRecords[day] = record;

                        if (record.status === 1) {
                            hasApprovedRecords = true;
                        }

                        // Mevcut expense'leri sadece görüntüleme için sakla (düzenleme yok)
                        if (record.workRecordExpenses && record.workRecordExpenses.length > 0) {
                            expenseData[day] = record.workRecordExpenses.map(exp => ({
                                ...exp,
                                id: exp.id // Mevcut expense'lerin id'sini sakla
                            }));
                        }
                    });

                    if (hasApprovedRecords) {
                        showInfoMessage('Bu ay için onaylanmış kayıtlar bulunmaktadır. Onaylanmış kayıtlar düzenlenemez.', 'warning');
                    } else {
                        showInfoMessage('Bu ay için daha önce girilen veriler yüklenmiştir. Onaylanmadan önce değişiklik yapabilirsiniz.', 'info');
                    }

                    return true;
                } else {
                    existingWorkRecords = {};
                    expenseData = {};
                    hasApprovedRecords = false;
                    hideInfoMessage();
                    return false;
                }
            } catch (error) {
                console.error('Mevcut kayıtlar yüklenirken hata:', error);
                existingWorkRecords = {};
                expenseData = {};
                hasApprovedRecords = false;
                hideInfoMessage();
                return false;
            }
        }

        function showInfoMessage(message, type = 'info') {
            const alertClass = type === 'warning' ? 'alert-warning' : 'alert-info';
            const icon = type === 'warning' ? 'fas fa-exclamation-triangle' : 'fas fa-info-circle';

            $('#infoAlert')
                .removeClass('alert-info alert-warning alert-success')
                .addClass(alertClass)
                .removeClass('d-none');

            $('#infoAlert i')
                .removeClass('fas fa-info-circle fas fa-exclamation-triangle fas fa-check-circle')
                .addClass(icon);

            $('#infoMessage').text(message);
        }

        function hideInfoMessage() {
            $('#infoAlert').addClass('d-none');
        }

        // ===== TABLE GENERATION =====
        async function generateDynamicTable() {
            showTableLoading();

            const year = parseInt($('#year-select').val());
            const month = parseInt($('#month-select').val());

            currentYear = year;
            currentMonth = month;

            await loadHolidays(year);
            await loadExistingWorkRecords(year, month);

            // Load approved leave requests for the current user
            const approvedLeaveRequests = await getApprovedLeaveRequests();

            const daysInMonth = new Date(year, month, 0).getDate();
            $('#workRecordsTableBody').empty();

            await new Promise(resolve => setTimeout(resolve, 300));

            for (let day = 1; day <= daysInMonth; day++) {
                const date = new Date(year, month - 1, day);
                const dayOfWeek = getDayOfWeekTurkish(date.getDay());
                const isSunday = date.getDay() === 0;
                const isHolidayDay = checkIfHoliday(day, month, year);
                const formattedDate = `${day.toString().padStart(2, '0')}.${month.toString().padStart(2, '0')}.${year} ${dayOfWeek}`;

                const existingRecord = existingWorkRecords[day];
                const isApproved = existingRecord && existingRecord.status === 1;
                const isPending = existingRecord && existingRecord.status === 0;
                const isRejected = existingRecord && existingRecord.status === 2;

                // Check for approved leave request for this day
                const leaveRequestReason = getLeaveRequestReasonForDay(day, month, year, approvedLeaveRequests);

                // Determine daily status - prioritize existing record, then leave request, then default
                let dailyStatus = '';
                if (existingRecord?.dailyStatus) {
                    dailyStatus = existingRecord.dailyStatus;
                } else if (leaveRequestReason) {
                    dailyStatus = leaveRequestReason;
                }

                const defaultValues = {
                    dailyStatus: dailyStatus,
                    startTime: existingRecord ? formatTimeSpan(existingRecord.startTime) : '',
                    endTime: existingRecord ? formatTimeSpan(existingRecord.endTime) : '',
                    additionalStartTime: existingRecord ? formatTimeSpan(existingRecord.additionalStartTime) : '',
                    additionalEndTime: existingRecord ? formatTimeSpan(existingRecord.additionalEndTime) : '',
                    projectId: existingRecord?.projectId || '',
                    equipmentId: existingRecord?.equipmentId || '',
                    province: existingRecord?.province || '',
                    district: existingRecord?.district || '',
                    hasBreakfast: existingRecord?.hasBreakfast || false,
                    hasLunch: existingRecord?.hasLunch || false,
                    hasDinner: existingRecord?.hasDinner || false,
                    hasNightMeal: existingRecord?.hasNightMeal || false,
                    travelExpenseAmount: existingRecord?.travelExpenseAmount || ''
                };

                let statusBadge = generateStatusBadge(null, 'Yeni');
                if (isApproved) {
                    statusBadge = generateStatusBadge(1);
                } else if (isPending) {
                    statusBadge = generateStatusBadge(0);
                } else if (isRejected) {
                    const reason = existingRecord?.rejectReason || '';
                    const encoded = encodeURIComponent(reason || '');
                    const hasReason = !!reason;
                    statusBadge = `
                                                                                                                            <span class="badge bg-danger status-rejected" data-reason="${encoded}" title="${hasReason ? 'Reddetme açıklamasını görmek için tıklayın' : 'Reddedildi'}">
                                                                                                                                <i class="fas fa-times me-1"></i>Reddedildi${hasReason ? ' <i class=\"fas fa-exclamation-circle ms-1\" title=\"Açıklama var\"></i>' : ''}
                                                                                                                            </span>
                                                                                                                        `;
                }

                const disabledAttr = isApproved ? 'disabled' : '';

                const row = createTableRow(day, formattedDate, defaultValues, statusBadge, disabledAttr, isSunday);
                $('#workRecordsTableBody').append(row);

                // Update expense button if needed
                if (expenseData[day] && expenseData[day].length > 0) {
                    updateExpenseButton(day);
                }

                // G checkbox durumunu kontrol et
                checkNightMealEligibility(day);
            }

            await populateProvincesAndDistricts(existingWorkRecords);
            await initializeAllSelects();
            hideTableLoading();
        }

        function createTableRow(day, formattedDate, defaultValues, statusBadge, disabledAttr, isHoliday = false) {
            const holidayInfo = checkIfHoliday(day, currentMonth, currentYear);
            const isSunday = isHoliday; // Pazar günü kontrolü
            const isFullHolidayDay = isFullHoliday(day, currentMonth, currentYear);
            const isHalfHolidayDay = isHalfDayHoliday(day, currentMonth, currentYear);

            // Farklı renk sınıfları
            let holidayClass = '';
            if (isSunday || isFullHolidayDay) {
                holidayClass = 'table-danger'; // Kırmızı - Tam tatil
            } else if (isHalfHolidayDay) {
                holidayClass = 'table-warning'; // Sarı - Yarım gün tatil
            }
            const isApproved = existingWorkRecords[day] && existingWorkRecords[day].status === 1;

            return `
                                                                                                                    <tr data-day="${day}" data-record-id="${existingWorkRecords[day]?.id || ''}" class="${holidayClass}">
                                                                                                                        <td class="date-cell">
                                                                                                                            <span class="badge bg-info">${formattedDate}</span>
                                                                                                                            <br/>
                                                                                                                            <button type="button" class="btn btn-xs btn-outline-success additional-time-btn mt-1 w-75"
                                                                                                                                    data-day="${day}" title="Ek Saat Ekle" ${disabledAttr}>
                                                                                                                                Ek Saat
                                                                                                                                <i class="fas fa-plus"></i>
                                                                                                                            </button>
                                                                                                                        </td>
                                                                                                                        <td>
                                                                                                                            <select class="form-select form-select-sm daily-status-select" data-day="${day}" data-current-value="${defaultValues.dailyStatus}" ${disabledAttr}>
                                                                                                                                <option value="">Günlük durumu seçin</option>
                                                                                                                            </select>
                                                                                                                        </td>
                                                                                                                        <td>
                                                                                                                            <div class="input-group">
                                                                                                                                <input type="text" class="form-control time-input start-time" value="${defaultValues.startTime || ''}"
                                                                                                                                       data-day="${day}" placeholder="08:00" ${disabledAttr}>
                                                                                                                                <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                                                                                            </div>
                                                                                                                            <div class="additional-time-section" data-day="${day}" style="display: ${defaultValues.additionalStartTime ? 'block' : 'none'}; margin-top: 2px;">
                                                                                                                                <div class="input-group">
                                                                                                                                    <input type="text" class="form-control form-control-sm additional-start-time"
                                                                                                                                           data-day="${day}" placeholder="Ek Başlangıç" value="${defaultValues.additionalStartTime || ''}" ${disabledAttr}>
                                                                                                                                    <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                                                                                                </div>
                                                                                                                            </div>
                                                                                                                        </td>
                                                                                                                        <td>
                                                                                                                            <div class="input-group">
                                                                                                                                <input type="text" class="form-control time-input end-time" value="${defaultValues.endTime || ''}"
                                                                                                                                       data-day="${day}" placeholder="17:00" ${disabledAttr}>
                                                                                                                                <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                                                                                            </div>
                                                                                                                            <div class="additional-time-section" data-day="${day}" style="display: ${defaultValues.additionalEndTime ? 'block' : 'none'}; margin-top: 2px;">
                                                                                                                                <div class="input-group">
                                                                                                                                    <input type="text" class="form-control form-control-sm additional-end-time"
                                                                                                                                           data-day="${day}" placeholder="Ek Bitiş" value="${defaultValues.additionalEndTime || ''}" ${disabledAttr}>
                                                                                                                                    <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                                                                                                </div>
                                                                                                                            </div>
                                                                                                                        </td>
                                                                                                                        <td>
                                                                                                                            <select class="form-select form-select-sm project-select" data-day="${day}" data-current-value="${defaultValues.projectId}" ${disabledAttr}>
                                                                                                                                <option value="">Proje seçin</option>
                                                                                                                            </select>
                                                                                                                        </td>
                                                                                                                        <td>
                                                                                                                            <select class="form-select form-select-sm equipment-select" data-day="${day}" data-current-value="${defaultValues.equipmentId}" ${disabledAttr}>
                                                                                                                                <option value="">Ekipman seçin</option>
                                                                                                                            </select>
                                                                                                                        </td>
                                                                                                                        <td>
                                                                                                                            <select class="form-select form-select-sm province-select" data-day="${day}" ${disabledAttr}>
                                                                                                                            </select>
                                                                                                                        </td>
                                                                                                                        <td>
                                                                                                                            <select class="form-select form-select-sm district-select" data-day="${day}" ${disabledAttr}>
                                                                                                                            </select>
                                                                                                                        </td>
                                                                                                                           <td>
                                                                                                                            <input type="text" class="form-control form-control-sm travel-expense-amount"
                                                                                                                                   data-day="${day}" placeholder="Yol masrafı"
                                                                                                                                   value="${defaultValues.travelExpenseAmount || ''}" ${disabledAttr}>
                                                                                                                        </td>
                                                                                                                        <td>
                                                                                                                            <button type="button" class="btn ${isApproved ? 'btn-dark' : 'btn-primary'} expense-modal-btn w-100"
                                                                                                                                    data-day="${day}" data-bs-toggle="modal" data-bs-target="#expenseModal">
                                                                                                                                <i class="fas fa-receipt me-1"></i>
                                                                                                                                <span class="expense-count" data-day="${day}">0 Masraf<br/><small>₺0,00</small></span>
                                                                                                                            </button>
                                                                                                                        </td>

                                                                                                                        <td>
                                                                                                                            <div class="meal-section">
                                                                                                                                <div class="meal-item">
                                                                                                                                    <div class="form-check">
                                                                                                                                        <input class="form-check-input meal-checkbox" type="checkbox" id="s_${day}"
                                                                                                                                               data-meal="S" data-day="${day}" ${defaultValues.hasBreakfast ? 'checked' : ''} ${disabledAttr}>
                                                                                                                                        <label class="form-check-label" for="s_${day}">S</label>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <div class="meal-item">
                                                                                                                                    <div class="form-check">
                                                                                                                                        <input class="form-check-input meal-checkbox" type="checkbox" id="o_${day}"
                                                                                                                                               data-meal="O" data-day="${day}" ${defaultValues.hasLunch ? 'checked' : ''} ${disabledAttr}>
                                                                                                                                        <label class="form-check-label" for="o_${day}">Ö</label>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <div class="meal-item">
                                                                                                                                    <div class="form-check">
                                                                                                                                        <input class="form-check-input meal-checkbox" type="checkbox" id="a_${day}"
                                                                                                                                               data-meal="A" data-day="${day}" ${defaultValues.hasDinner ? 'checked' : ''} ${disabledAttr}>
                                                                                                                                        <label class="form-check-label" for="a_${day}">A</label>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                                <div class="meal-item">
                                                                                                                                    <div class="form-check">
                                                                                                                                        <input class="form-check-input meal-checkbox" type="checkbox" id="g_${day}"
                                                                                                                                               data-meal="G" data-day="${day}" ${defaultValues.hasNightMeal ? 'checked' : ''} ${disabledAttr} disabled>
                                                                                                                                        <label class="form-check-label" for="g_${day}">G</label>
                                                                                                                                    </div>
                                                                                                                                </div>
                                                                                                                            </div>
                                                                                                                        </td>

                                                                                                                        <td>
                                                                                                                            ${statusBadge}
                                                                                                                        </td>
                                                                                                                    </tr>
                                                                                                                `;
        }

        // ===== SAVE FUNCTION =====
        async function saveWorkRecords() {
            const workRecords = [];

            $('#workRecordsTableBody tr').each(function () {
                const day = $(this).data('day');
                const dailyStatus = $(this).find('.daily-status-select').val();
                const startTime = $(this).find('.start-time').val();
                const endTime = $(this).find('.end-time').val();
                const additionalStartTime = $(this).find('.additional-start-time').val();
                const additionalEndTime = $(this).find('.additional-end-time').val();
                const projectId = $(this).find('.project-select').val();
                const equipmentId = $(this).find('.equipment-select').val();
                const province = $(this).find('.province-select').val();
                const district = $(this).find('.district-select').val();

                // Day her zaman zorunlu
                if (!day || day === '') {
                    toastr.error('Gün bilgisi boş olamaz!', 'Hata!');
                    throw new Error('Gün bilgisi boş olamaz!');
                }
                if (dailyStatus === 'Çalışıyor') {
                    const hasRequiredData =
                        (startTime && startTime.trim() !== '') &&
                        (endTime && endTime.trim() !== '') &&
                        (projectId && projectId !== '') &&
                        (equipmentId && equipmentId !== '') &&
                        (province && province !== '') &&
                        (district && district !== '');

                    if (!hasRequiredData) {
                        return; // Bu satırı atla, boş satır
                    }
                }

                const dayExpenses = expenseData[day] || [];
                const expenses = dayExpenses.map(exp => ({
                    id: exp.id || null, // Mevcut expense'lerin id'sini gönder, yeni olanlar için null
                    expenseId: exp.expenseId,
                    description: exp.description || null,
                    amount: exp.amount,
                    receiptFile: exp.receiptFile
                }));
                const hasBreakfast = $(this).find('.meal-checkbox[data-meal="S"]').is(':checked');
                const hasLunch = $(this).find('.meal-checkbox[data-meal="O"]').is(':checked');
                const hasDinner = $(this).find('.meal-checkbox[data-meal="A"]').is(':checked');
                const hasNightMeal = $(this).find('.meal-checkbox[data-meal="G"]').is(':checked');
                const travelExpenseAmount = $(this).find('.travel-expense-amount').val();

                const formattedDate = `${currentYear}-${String(currentMonth).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

                workRecords.push({
                    Date: formattedDate,
                    DailyStatus: dailyStatus,
                    StartTime: startTime || "",
                    EndTime: endTime || "",
                    AdditionalStartTime: additionalStartTime || "",
                    AdditionalEndTime: additionalEndTime || "",
                    ProjectId: projectId || "",
                    EquipmentId: equipmentId || "",
                    Province: province || "",
                    District: district || "",
                    HasBreakfast: hasBreakfast,
                    HasLunch: hasLunch,
                    HasDinner: hasDinner,
                    HasNightMeal: hasNightMeal,
                    TravelExpenseAmount: travelExpenseAmount || "",
                    WorkRecordExpenses: expenses
                });
            });

            // Eğer hiç kayıt yoksa uyarı ver
            if (workRecords.length === 0) {
                toastr.warning('Kaydedilecek veri bulunamadı!', 'Uyarı!');
                return;
            }

            try {
                $('.btnSaveWorkRecords').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Kaydediliyor...');

                // FormData oluştur
                const formData = new FormData();
                formData.append('__RequestVerificationToken', $('input[name="__RequestVerificationToken"]').val());

                // Her work record için form data ekle
                workRecords.forEach((record, index) => {
                    formData.append(`[${index}].Date`, record.Date);
                    formData.append(`[${index}].DailyStatus`, record.DailyStatus);
                    formData.append(`[${index}].StartTime`, record.StartTime);
                    formData.append(`[${index}].EndTime`, record.EndTime);
                    formData.append(`[${index}].AdditionalStartTime`, record.AdditionalStartTime);
                    formData.append(`[${index}].AdditionalEndTime`, record.AdditionalEndTime);
                    formData.append(`[${index}].ProjectId`, record.ProjectId);
                    formData.append(`[${index}].EquipmentId`, record.EquipmentId);
                    formData.append(`[${index}].Province`, record.Province);
                    formData.append(`[${index}].District`, record.District);
                    formData.append(`[${index}].HasBreakfast`, record.HasBreakfast);
                    formData.append(`[${index}].HasLunch`, record.HasLunch);
                    formData.append(`[${index}].HasDinner`, record.HasDinner);
                    formData.append(`[${index}].HasNightMeal`, record.HasNightMeal);
                    formData.append(`[${index}].TravelExpenseAmount`, record.TravelExpenseAmount);

                    // Expenses için
                    if (record.WorkRecordExpenses && record.WorkRecordExpenses.length > 0) {
                        record.WorkRecordExpenses.forEach((expense, expIndex) => {
                            formData.append(`[${index}].WorkRecordExpenses[${expIndex}].Id`, expense.id || "");
                            formData.append(`[${index}].WorkRecordExpenses[${expIndex}].ExpenseId`, expense.expenseId);
                            formData.append(`[${index}].WorkRecordExpenses[${expIndex}].Description`, expense.description || "");
                            formData.append(`[${index}].WorkRecordExpenses[${expIndex}].Amount`, expense.amount);
                            // File upload için - sadece yeni dosyalar için
                            if (expense.receiptFile) {
                                formData.append(`[${index}].WorkRecordExpenses[${expIndex}].File.FormFile`, expense.receiptFile);
                            }
                        });
                    }
                });

                const response = await $.ajax({
                    url: '/puantaj/toplu-ekle-guncelle',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false
                });

                if (response.isSuccess) {
                    toastr.success(response.message, 'Başarılı!');
                    await generateDynamicTable();
                } else {
                    toastr.error(response.message, 'Hata!');
                }
            } catch (error) {
                console.error('Puantaj kaydedilirken hata:', error);
                let errorMessage = 'Puantaj kaydedilirken bir hata oluştu.';
                if (error.responseJSON) {
                    if (error.responseJSON.message) {
                        errorMessage = error.responseJSON.message;
                    } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                        errorMessage = error.responseJSON.errors.join(', ');
                    }
                } else if (error.message) {
                    errorMessage = error.message;
                }
                toastr.error(errorMessage, 'Hata!');
            } finally {
                $('.btnSaveWorkRecords').prop('disabled', false)
                    .html('<i class="fas fa-save me-2"></i>Kaydet');
            }
        }
    </script>
}