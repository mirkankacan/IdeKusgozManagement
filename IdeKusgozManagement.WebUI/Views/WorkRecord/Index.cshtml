@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Puantaj Listesi";

}
@section Styles {

    <link href="~/theme/assets/plugins/DataTables/datatables.min.css" rel="stylesheet">

}
@Html.AntiForgeryToken()
<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="fas fa-hourglass-start me-2"></i>
                    Puantaj Ekleme Tablosu
                </h5>

                <!-- Yıl ve Ay Seçimi -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <label for="userSelect" class="form-label">Kullanıcı</label>
                        <select id="userSelect" class="form-select">
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="yearSelect" class="form-label">Yıl</label>
                        <select id="yearSelect" class="form-select">
                            @for (int year = DateTime.Now.Year - 2; year <= DateTime.Now.Year; year++)
                            {
                                if (year == DateTime.Now.Year)
                                {
                                    <option value="@year" selected>@year</option>
                                }
                                else
                                {
                                    <option value="@year">@year</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="monthSelect" class="form-label">Ay</label>
                        <select id="monthSelect" class="form-select">
                            <option value="1">Ocak</option>
                            <option value="2">Şubat</option>
                            <option value="3">Mart</option>
                            <option value="4">Nisan</option>
                            <option value="5">Mayıs</option>
                            <option value="6">Haziran</option>
                            <option value="7">Temmuz</option>
                            <option value="8">Ağustos</option>
                            <option value="9">Eylül</option>
                            <option value="10">Ekim</option>
                            <option value="11">Kasım</option>
                            <option value="12">Aralık</option>
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">&nbsp;</label>
                        <button type="button" id="saveBtn" class="btn btn-success d-block w-100">
                            <i class="fas fa-save me-2"></i>Kaydet
                        </button>
                    </div>
                </div>

                <!-- Dinamik Tablo -->
                <div id="dynamicTableContainer">
                    <div class="table-responsive">
                        <table id="workRecordsTable" class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>TARİH</th>
                                    <th>HAFTA<br /> TATİLİ</th>
                                    <th style="width: 100px;">BAŞLAMA<br /> SAATİ</th>
                                    <th style="width: 100px;">BIRAKMA<br /> SAATİ</th>
                                    <th>PROJE</th>
                                    <th style="width: 150px;">ÇALIŞILAN<br /> EKİPMAN</th>
                                    <th style="width: 160px;">ÇALIŞILAN<br /> İL</th>
                                    <th style="width: 150px;">ÇALIŞILAN<br /> İLÇE</th>
                                    <th>MASRAF</th>
                                    <th>YEMEK</th>
                                </tr>
                            </thead>
                            <tbody id="workRecordsTableBody">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script src="~/theme/assets/plugins/DataTables/datatables.min.js"></script>

    <script>
        let workRecordsTable;

        $(document).ready(async function () {
            await initializeDataTable();

        });



        async function initializeDataTable() {
            workRecordsTable = $('#workRecordsTable').DataTable({
                "processing": true,
                "ajax": {
                    "url": "/puantaj/liste",
                    "type": "GET",
                    "dataSrc": function (json) {
                        if (json && json.isSuccess && json.data) {
                            return json.data;
                        }
                        return [];
                    },
                    "error": function (xhr, error, code) {
                        console.error('DataTables AJAX error:', error);
                        let errorMessage = 'Veriler yüklenirken hata oluştu';
                        try {
                            if (xhr.responseJSON && xhr.responseJSON.message) {
                                errorMessage += ': ' + xhr.responseJSON.message;
                            } else if (xhr.responseText) {
                                errorMessage += ': ' + xhr.responseText;
                            }
                        } catch (e) {
                            errorMessage += ': ' + error;
                        }

                        toastr.error(errorMessage);
                    }
                },
                "columns": [
                    {
                        "data": null,
                        "width": "5%",
                        "orderable": false,
                        "className": "text-center",
                        "render": function (data, type, row, meta) {
                            return '';
                        }
                    },
                    {
                        "data": "userName",
                        "render": function (data) {
                            return data ? `<strong>${data}</strong>` : '';
                        }
                    },
                    {
                        "data": "fullName",
                        "render": function (data) {
                            return data || '';
                        }
                    },
                    {
                        "data": "roleName",
                        "render": function (data) {
                            if (data == "Admin") {
                                return `<span class="badge bg-primary">${data}</span>`;
                            }
                            else if (data == "Şef") {
                                return `<span class="badge bg-info">${data}</span>`;
                            }
                            else if (data == "Personel") {
                                return `<span class="badge bg-warning">${data}</span>`;
                            }
                            else {
                                return `<span class="badge bg-secondary">${data}</span>`;
                            }
                        }
                    },
                    {
                        "data": "isActive",
                        "width": "10%",
                        "className": "text-center",
                        "render": function (data) {
                            return data ?
                                '<span class="badge bg-success">Evet</span>' :
                                '<span class="badge bg-danger">Hayır</span>';
                        }
                    },
                    {
                        "data": null,
                        "width": "10%",
                        "orderable": false,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            const currentUserId = '@User.FindFirst(ClaimTypes.NameIdentifier)?.Value';

                            if (row.id === currentUserId) {
                                return '<span class="text-muted">-</span>';
                            }
                            const statusButton = row.isActive
                                ? `<button type="button" class="btn btn-outline-secondary btn-sm"
                                                onclick="deactivateUser('${row.id}')" title="Pasifleştir">
                                                <i class="fas fa-user-slash"></i>
                                               </button>`
                                : `<button type="button" class="btn btn-outline-success btn-sm"
                                                onclick="activateUser('${row.id}')" title="Aktifleştir">
                                                <i class="fas fa-user-check"></i>
                                               </button>`;
                            return `
                                            <div class="btn-group btn-group-sm" role="group">
                                             <button type="button" class="btn btn-outline-warning btn-sm"
                                               onclick="getUser('${row.id}')" title="Düzenle">
                                              <i class="fas fa-edit"></i>
                                             </button>
                                             ${statusButton}
                                             <button type="button" class="btn btn-outline-danger btn-sm"
                                               onclick="deleteUser('${row.id}')" title="Sil">
                                              <i class="fas fa-trash"></i>
                                             </button>
                                            </div>
                                           `;
                        }
                    }
                ],
                "order": [[3, "asc"]],
                "language": {
                    url: 'https://cdn.datatables.net/plug-ins/2.3.2/i18n/tr.json'
                },
                "lengthMenu": [[10, 25, 50, 100], [10, 25, 50, 100]],
                "pageLength": 10,
                "responsive": true,
                "searchDelay": 300,
                "stateSave": true,
                "dom": '<"row"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
                    '<"row"<"col-sm-12"tr>>' +
                    '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
                "initComplete": function () {
                },
                "drawCallback": function () {
                    var api = this.api();
                    var pageInfo = api.page.info();

                    api.column(0, { page: 'current' }).nodes().each(function (cell, i) {
                        cell.innerHTML = pageInfo.start + i + 1;
                    });
                    $('[title]').tooltip();
                }
            });
        }

        async function approveWorkRecord(userId) {
            try {
                const result = await Swal.fire({
                    title: 'Puantajı Onayla',
                    text: 'Bu puantajı onaylamak istediğinizden emin misiniz?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-check"></i> Evet, Onayla',
                    cancelButtonText: '<i class="fas fa-times"></i> İptal',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const response = await $.ajax({
                                url: `/puantaj/onayla/${userId}`,
                                type: 'POST',
                                contentType: 'application/json',
                                headers: {
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                }
                            });
                            return response;
                        } catch (error) {

                            let errorMessage = 'Onaylama başarısız';

                            if (error.responseJSON) {
                                if (error.responseJSON.message) {
                                    errorMessage = error.responseJSON.message;
                                } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                                    errorMessage = error.responseJSON.errors.join(', ');
                                }
                            }

                            Swal.showValidationMessage(`Hata: ${errorMessage}`);
                            throw error;
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    await Swal.fire({
                        title: 'Başarılı!',
                        text: 'Puantaj başarıyla onaylandı.',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });

                    workRecordsTable.ajax.reload(null, false);
                }

            } catch (error) {
                console.error('Onaylama hatası:', error);
                throw error;
            }
        }

        async function rejectWorkRecord(userId) {
            try {
                const result = await Swal.fire({
                    title: 'Puantajı Reddet',
                    text: 'Bu puantajı reddetmek istediğinizden emin misiniz?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#ffc107',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-user-slash"></i> Evet, Reddet',
                    cancelButtonText: '<i class="fas fa-times"></i> İptal',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const response = await $.ajax({
                                url: `/puantaj/red/${userId}`,
                                type: 'POST',
                                contentType: 'application/json',
                                headers: {
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                }
                            });
                            return response;
                        } catch (error) {

                            let errorMessage = 'Reddetme başarısız';

                            if (error.responseJSON) {
                                if (error.responseJSON.message) {
                                    errorMessage = error.responseJSON.message;
                                } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                                    errorMessage = error.responseJSON.errors.join(', ');
                                }
                            }

                            Swal.showValidationMessage(`Hata: ${errorMessage}`);
                            throw error;
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    await Swal.fire({
                        title: 'Başarılı!',
                        text: 'Puantaj başarıyla reddedildi.',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    });

                    workRecordsTable.ajax.reload(null, false);
                }

            } catch (error) {
                console.error('Reddetme hatası:', error);
                throw error;
            }
        }


    </script>
}