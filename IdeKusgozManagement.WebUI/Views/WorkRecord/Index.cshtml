@{
    ViewData["Title"] = "Kullanıcıya Göre Puantaj Listesi";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.rtl.min.css" />

    <link href="~/css/puantaj-common.css" rel="stylesheet" />

}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="fas fa-bars-staggered me-2"></i>
                    Kullanıcıya Göre Puantaj Listesi
                </h5>

                <!-- Yıl ve Ay Seçimi -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <label for="year-select" class="form-label">Yıl</label>
                        <select id="year-select" class="form-select">
                            @for (int year = DateTime.Now.Year - 2; year <= DateTime.Now.Year; year++)
                            {
                                if (year == DateTime.Now.Year)
                                {
                                    <option value="@year" selected>@year</option>
                                }
                                else
                                {
                                    <option value="@year">@year</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="month-select" class="form-label">Ay</label>
                        <select id="month-select" class="form-select">
                            <option value="1">Ocak</option>
                            <option value="2">Şubat</option>
                            <option value="3">Mart</option>
                            <option value="4">Nisan</option>
                            <option value="5">Mayıs</option>
                            <option value="6">Haziran</option>
                            <option value="7">Temmuz</option>
                            <option value="8">Ağustos</option>
                            <option value="9">Eylül</option>
                            <option value="10">Ekim</option>
                            <option value="11">Kasım</option>
                            <option value="12">Aralık</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="user-select" class="form-label">Kullanıcı</label>
                        <select id="user-select" class="form-select user-select">
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label class="form-label">&nbsp;</label>
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-warning flex-fill btnUpdateWorkRecords">
                                <i class="fas fa-edit me-2"></i>Güncelle
                            </button>
                            <button type="button" class="btn btn-outline-success flex-fill">
                                <i class="fas fa-thumbs-up me-2"></i>Onayla
                            </button>
                            <button type="button" class="btn btn-outline-danger flex-fill">
                                <i class="fas fa-thumbs-down me-2"></i>Reddet
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Dinamik Tablo -->
                <div id="dynamicTableContainer">
                    <div id="tableLoadingSpinner" class="text-center py-5" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Yükleniyor...</span>
                        </div>
                        <div class="mt-3">
                            <h6 class="text-muted">Tablo oluşturuluyor...</h6>
                            <small class="text-muted">Lütfen bekleyiniz</small>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table id="workRecordsTable" class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>TARİH</th>
                                    <th>TATİL</th>
                                    <th style="width: 100px;max-width:100px;">BAŞLAMA<br /> SAATİ</th>
                                    <th style="width: 100px;max-width:100px;">BIRAKMA<br /> SAATİ</th>
                                    <th>PROJE</th>
                                    <th>ÇALIŞILAN<br /> EKİPMAN</th>
                                    <th>ÇALIŞILAN<br /> İL</th>
                                    <th>ÇALIŞILAN<br /> İLÇE</th>
                                    <th style="width:120px;max-width:120px;">MASRAF</th>
                                    <th>YEMEK</th>
                                    <th>YOL</th>
                                    <th>DURUM</th>
                                    <th>İŞLEM</th>
                                </tr>
                            </thead>
                            <tbody id="workRecordsTableBody">
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-warning flex-fill btnUpdateWorkRecords">
                            <i class="fas fa-edit me-2"></i>Güncelle
                        </button>
                        <button type="button" class="btn btn-outline-success flex-fill">
                            <i class="fas fa-thumbs-up me-2"></i>Onayla
                        </button>
                        <button type="button" class="btn btn-outline-danger flex-fill">
                            <i class="fas fa-thumbs-down me-2"></i>Reddet
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="expenseModal" tabindex="-1" aria-labelledby="expenseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="expenseModalLabel">
                    <i class="fas fa-receipt me-2"></i>
                    Masraf Bilgileri - <span id="modalDateInfo"></span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="expenseForm">
                <div class="modal-body">
                    <!-- Mevcut Masraflar Listesi -->
                    <div id="currentExpensesList" class="mb-3" style="display: none;">
                        <h6 class="text-muted">Mevcut Masraflar:</h6>
                        <div id="expenseItemsList" class="list-group mb-3">
                            <!-- Masraf listesi buraya gelecek -->
                        </div>
                    </div>

                    <!-- Toplam Masraf -->
                    <div class="mt-3 p-2 bg-light rounded" id="totalExpenseSection" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="fw-bold">Toplam Masraf:</span>
                            <span class="fw-bold text-primary" id="totalExpenseAmount">0.00 ₺</span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Reject Work Record Modal -->
<div class="modal fade" id="rejectWorkRecordModal" tabindex="-1" aria-labelledby="rejectWorkRecordModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rejectWorkRecordModalLabel">Puantaj Reddetme Penceresi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="txtRejectWorkRecordId" value="" disabled readonly />
                <input type="hidden" id="txtRejectMode" value="single" disabled readonly />
                <div class="mb-3">
                    <label for="txtWorkRecordRejectReason" class="form-label">Reddetme Sebebi (İsteğe Bağlı)</label>
                    <textarea class="form-control" id="txtWorkRecordRejectReason" rows="3" maxlength="349"
                        placeholder="Reddetme sebebini açıklayın..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-danger w-100" id="btnRejectWorkRecordConfirm">
                    <i class="fas fa-times me-1"></i>Reddet
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="~/js/turkey-locations.js"></script>
    <script src="~/js/puantaj-common.js"></script>

    <script>
        // Page-specific variables
        let workRecordsTable;

        // Disable auto-initialization of common components
        window.autoInitializePuantajCommon = false;

        // G checkbox kontrolü için saat aralığı kontrol fonksiyonu
        function checkNightMealEligibility(day) {
            const startTime = $(`.start-time[data-day="${day}"]`).val();
            const endTime = $(`.end-time[data-day="${day}"]`).val();
            const additionalStartTime = $(`.additional-start-time[data-day="${day}"]`).val();
            const additionalEndTime = $(`.additional-end-time[data-day="${day}"]`).val();

            const gCheckbox = $(`#g_${day}`);

            // Eğer onaylanmış kayıt varsa G checkbox'u disabled kalacak
            const recordId = $(`tr[data-day="${day}"]`).data('record-id');
            if (recordId) {
                // Mevcut kayıt varsa, onay durumunu kontrol et
                const statusBadge = $(`tr[data-day="${day}"]`).find('.badge');
                if (statusBadge.hasClass('bg-success')) {
                    gCheckbox.prop('disabled', true);
                    return;
                }
            }

            // Saat aralıklarını kontrol et
            const timeRanges = [];

            if (startTime && endTime) {
                timeRanges.push({ start: startTime, end: endTime });
            }

            if (additionalStartTime && additionalEndTime) {
                timeRanges.push({ start: additionalStartTime, end: additionalEndTime });
            }

            // 01:00-05:00 aralığını kapsayan herhangi bir saat aralığı var mı kontrol et
            const hasNightTime = timeRanges.some(range => {
                return isTimeRangeOverlappingNight(range.start, range.end);
            });

            if (hasNightTime) {
                gCheckbox.prop('disabled', false);
            } else {
                gCheckbox.prop('disabled', true);
                gCheckbox.prop('checked', false); // Eğer gece yemeği hakkı yoksa işaretini kaldır
            }
        }

        // Saat aralığının 01:00-05:00 ile kesişip kesişmediğini kontrol eden fonksiyon
        function isTimeRangeOverlappingNight(startTime, endTime) {
            if (!startTime || !endTime) return false;

            const start = parseTimeToMinutes(startTime);
            const end = parseTimeToMinutes(endTime);
            const nightStart = 1 * 60; // 01:00 = 60 dakika
            const nightEnd = 5 * 60;   // 05:00 = 300 dakika

            // Eğer başlangıç ve bitiş aynı gün içindeyse
            if (start < end) {
                return (start < nightEnd && end > nightStart);
            }
            // Eğer gece yarısını geçiyorsa (örneğin 23:00-07:00)
            else {
                return (start < nightEnd || end > nightStart);
            }
        }

        // Saat formatını dakikaya çeviren fonksiyon
        function parseTimeToMinutes(timeString) {
            const [hours, minutes] = timeString.split(':').map(Number);
            return hours * 60 + minutes;
        }

        $(document).ready(async function () {
            await initializePage();
        });

        async function initializePage() {
            $('body').addClass('sidebar-hidden');

            // Set current year and month
            PuantajCommon.setCurrentYear(new Date().getFullYear());
            PuantajCommon.setCurrentMonth(new Date().getMonth() + 1);

            $('#year-select').val(PuantajCommon.getCurrentYear());
            $('#month-select').val(PuantajCommon.getCurrentMonth());

            // Initialize common components
            await PuantajCommon.initialize();

            // Page-specific initialization
            await setupIndexPage();
        }

        async function setupIndexPage() {
            // Initialize user select
            PuantajCommon.Select2Manager.initializeUserSelect();

            // Setup page-specific event listeners
            setupPageEventListeners();

            // Load users
            await getAssignedUsers();

            // Show empty table initially
            showEmptyTable();

            // Override expense modal for Index page (read-only)
            setupIndexPageExpenseModal();
        }

        function setupPageEventListeners() {
            $('.btnUpdateWorkRecords').on('click', saveWorkRecords);
            $('#user-select').on('change', handleUserSelection);
            $('#year-select, #month-select').on('change', handleDateChange);
            $('.btn-outline-success').on('click', approveWorkRecords);
            $('.btn-outline-danger').on('click', rejectWorkRecords);
            $(document).on('click', '#btnRejectWorkRecordConfirm', async function () {
                await confirmRejectWithReason();
            });

            // Status rejected click handler
            $(document).on('click', '.status-rejected', function () {
                const encoded = $(this).data('reason');
                const reason = encoded ? decodeURIComponent(encoded) : '';
                if (reason) {
                    Swal.fire({
                        title: 'Reddetme Açıklaması',
                        text: reason,
                        icon: 'info'
                    });
                }
            });

            // Saat değişikliklerinde G checkbox kontrolü
            setupTimeChangeListeners();
        }

        function setupTimeChangeListeners() {
            // Dinamik olarak eklenen elementler için event delegation kullan
            $(document).on('change blur', '.start-time, .end-time, .additional-start-time, .additional-end-time', function () {
                const day = $(this).data('day');
                if (day) {
                    checkNightMealEligibility(day);
                }
            });
        }

        function setupIndexPageExpenseModal() {
            // Override expense modal for Index page - expenses are read-only
            $('#expenseModal').off('show.bs.modal').on('show.bs.modal', function (event) {
                const button = $(event.relatedTarget);
                const day = button.data('day');
                PuantajCommon.setCurrentEditingDay(day);

                if (day) {
                    const date = new Date(PuantajCommon.getCurrentYear(), PuantajCommon.getCurrentMonth() - 1, day);
                    const dateStr = `${day.toString().padStart(2, '0')}.${PuantajCommon.getCurrentMonth().toString().padStart(2, '0')}.${PuantajCommon.getCurrentYear()} ${PuantajCommon.Utils.getDayOfWeekTurkish(date.getDay())}`;
                    $('#modalDateInfo').text(dateStr);

                    PuantajCommon.ExpenseManager.loadExpensesForDay(day);
                    PuantajCommon.Utils.clearExpenseForm();

                    // Disable expense form in Index page (read-only)
                    disableExpenseForm();

                    // Show expenses as read-only (no edit buttons)
                    PuantajCommon.ExpenseManager.displayCurrentExpenses(day, true);
                }
            });

            // Disable add expense functionality in Index page
            $('#expenseForm').off('submit');
        }

        function disableExpenseForm() {
            // Index page is read-only for expenses, no form to disable
            // Modal only shows existing expenses with approved badges
        }

        function handleUserSelection() {
            const selectedUserId = $('#user-select').val();
            if (selectedUserId) {
                loadWorkRecordsByUser();
            } else {
                clearTableData();
            }
        }

        function handleDateChange() {
            const selectedUserId = $('#user-select').val();
            if (selectedUserId) {
                loadWorkRecordsByUser();
            } else {
                showEmptyTable();
            }
        }

        // Table state management functions
        function showEmptyTable() {
            const emptyMessage = `
                                                                                                                                                                                                <tr>
                                                                                                                                                                                                    <td colspan="13" class="text-center py-5">
                                                                                                                                                                                                        <div class="text-muted">
                                                                                                                                                                                                            <i class="fas fa-info-circle fa-2x mb-3"></i>
                                                                                                                                                                                                            <h5>Kullanıcı Seçin</h5>
                                                                                                                                                                                                            <p>Puantaj verilerini görüntülemek için lütfen bir kullanıcı seçin.</p>
                                                                                                                                                                                                        </div>
                                                                                                                                                                                                    </td>
                                                                                                                                                                                                </tr>
                                                                                                                                                                                            `;
            $('#workRecordsTableBody').html(emptyMessage);
        }

        function showNoDataMessage(year, month) {
            const noDataMessage = `
                                                                                                                                                                                                <tr>
                                                                                                                                                                                                    <td colspan="13" class="text-center py-5">
                                                                                                                                                                                                        <div class="text-muted">
                                                                                                                                                                                                            <i class="fas fa-calendar-times fa-2x mb-3 text-warning"></i>
                                                                                                                                                                                                            <h5>Puantaj Verisi Bulunamadı</h5>
                                                                                                                                                                                                            <p>Seçili kullanıcının ${month}/${year} ayına ait puantaj kaydı bulunmamaktadır.</p>
                                                                                                                                                                                                            <small>Personel henüz bu ay için puantaj doldurmamış olabilir.</small>
                                                                                                                                                                                                        </div>
                                                                                                                                                                                                    </td>
                                                                                                                                                                                                </tr>
                                                                                                                                                                                            `;
            $('#workRecordsTableBody').html(noDataMessage);
        }

        function showErrorMessage() {
            const errorMessage = `
                                                                                                                                                                                                <tr>
                                                                                                                                                                                                    <td colspan="13" class="text-center py-5">
                                                                                                                                                                                                        <div class="text-danger">
                                                                                                                                                                                                            <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                                                                                                                                                                                                            <h5>Veri Yükleme Hatası</h5>
                                                                                                                                                                                                            <p>Puantaj verileri yüklenirken bir hata oluştu.</p>
                                                                                                                                                                                                            <button class="btn btn-outline-primary btn-sm" onclick="loadWorkRecordsByUser()">
                                                                                                                                                                                                                <i class="fas fa-redo me-1"></i>Tekrar Dene
                                                                                                                                                                                                            </button>
                                                                                                                                                                                                        </div>
                                                                                                                                                                                                    </td>
                                                                                                                                                                                                </tr>
                                                                                                                                                                                            `;
            $('#workRecordsTableBody').html(errorMessage);
        }

        function clearTableData() {
            showEmptyTable();
            PuantajCommon.setExpenseData({});
        }

        // Data loading functions
        async function loadWorkRecordsByUser() {
            const selectedUserId = $('#user-select').val();
            const year = parseInt($('#year-select').val());
            const month = parseInt($('#month-select').val());

            if (!selectedUserId) {
                showEmptyTable();
                return;
            }

            try {
                PuantajCommon.Utils.showTableLoading();
                const formattedDate = `${year}-${String(month).padStart(2, '0')}-01`;

                const response = await $.ajax({
                    url: `/puantaj/liste/kullanici/${selectedUserId}/tarih/${formattedDate}`,
                    type: 'GET'
                });

                if (response.isSuccess && response.data && response.data.length > 0) {
                    await populateTableWithWorkRecords(response.data);
                    // toastr.success(`${response.data.length} puantaj kaydı yüklendi`, 'Başarılı!');
                } else {
                    showNoDataMessage(year, month);
                }
            } catch (error) {
                console.error('Puantaj verileri yüklenirken hata:', error);
                showErrorMessage();
                PuantajCommon.AjaxHelper.handleError(error, 'Puantaj verileri yüklenirken bir hata oluştu');
            } finally {
                PuantajCommon.Utils.hideTableLoading();
            }
        }

        async function populateTableWithWorkRecords(workRecords) {
            $('#workRecordsTableBody').empty();
            PuantajCommon.setExpenseData({});

            // Sort records by date
            workRecords.sort((a, b) => new Date(a.date) - new Date(b.date));

            const expenseData = PuantajCommon.getExpenseData();
            workRecords.forEach(record => {
                const date = new Date(record.date);
                const day = date.getDate();
                const dayOfWeek = PuantajCommon.Utils.getDayOfWeekTurkish(date.getDay());
                const formattedDate = `${day.toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()} ${dayOfWeek}`;

                const startTime = PuantajCommon.Utils.formatTimeSpan(record.startTime);
                const endTime = PuantajCommon.Utils.formatTimeSpan(record.endTime);
                let statusBadge = PuantajCommon.StatusBadge.generate(record.status, record.statusText);
                if (record.status === 2) {
                    const reason = record.rejectReason || '';
                    const encoded = encodeURIComponent(reason);
                    const hasReason = !!reason;
                    statusBadge = `
                            <span class="badge bg-danger status-rejected" data-reason="${encoded}" title="${hasReason ? 'Reddetme açıklamasını görmek için tıklayın' : 'Reddedildi'}">
                                <i class="fas fa-times me-1"></i>Reddedildi${hasReason ? ' <i class=\"fas fa-exclamation-circle ms-1\" title=\"Açıklama var\"></i>' : ''}
                            </span>
                        `;
                }

                const row = createIndexTableRow(record, day, formattedDate, startTime, endTime, statusBadge);
                $('#workRecordsTableBody').append(row);

                // Populate expense data
                if (record.workRecordExpenses && record.workRecordExpenses.length > 0) {
                    expenseData[day] = record.workRecordExpenses;
                    PuantajCommon.ExpenseManager.updateExpenseButton(day);
                }
            });

            PuantajCommon.setExpenseData(expenseData);

            // Initialize location selects and populate values
            PuantajCommon.LocationManager.populateProvincesAndDistricts(workRecords);

            // Re-initialize components
            await PuantajCommon.Select2Manager.initialize();

            // G checkbox durumunu kontrol et
            workRecords.forEach(record => {
                const date = new Date(record.date);
                const day = date.getDate();
                checkNightMealEligibility(day);
            });
        }

        function createIndexTableRow(record, day, formattedDate, startTime, endTime, statusBadge) {
            return `
                            <tr data-day="${day}" data-record-id="${record.id}">
                                         <td class="date-cell">
                                         <span class="badge bg-info">${formattedDate}</span>
                                         ${record.additionalStartTime || record.additionalEndTime ? `
                                                   <br/>
                                                     <button type="button" class="btn btn-xs btn-success additional-time-btn mt-1 w-75" disabled
                                                 data-day="${day}" title="Ek Saat Mevcut">
                                                 Ek Saat
                                                 </button>
                                         ` : ''}
                                         </td>
                                        <td>
                                        <select class="form-select form-select-sm excuse-reason-select" data-day="${day}" data-current-value="${record.excuseReason || ''}">
                                        <option value="">Sebep seçin</option>
                                        </select>
                                        </td>
                                                                                                                                                                                    <td>
                                                                                                                                                                                        <div class="input-group">
                                                                                                                                                                                            <input type="text" class="form-control time-input start-time" value="${startTime}" data-day="${day}" placeholder="08:00">
                                                                                                                                                                                            <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                                                                                                                                                        </div>
                                                                                                                                                                                        <div class="additional-time-section" data-day="${day}" style="display: ${record.additionalStartTime ? 'block' : 'none'}; margin-top: 2px;">
                                                                                                                                                                                            <div class="input-group">
                                                                                                                                                                                                <input type="text" class="form-control form-control-sm additional-start-time"
                                                                                                                                                                                                       data-day="${day}" placeholder="Ek Başlangıç" value="${record.additionalStartTime ? PuantajCommon.Utils.formatTimeSpan(record.additionalStartTime) : ''}">
                                                                                                                                                                                                <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                                                                                                                                                            </div>
                                                                                                                                                                                        </div>
                                                                                                                                                                                    </td>
                                                                                                                                                                                <td>
                                                                                                                                                                                    <div class="input-group">
                                                                                                                                                                                        <input type="text" class="form-control time-input end-time" value="${endTime}" data-day="${day}" placeholder="17:00">
                                                                                                                                                                                        <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                                                                                                                                                    </div>
                                                                                                                                                                                    <div class="additional-time-section" data-day="${day}" style="display: ${record.additionalEndTime ? 'block' : 'none'}; margin-top: 2px;">
                                                                                                                                                                                        <div class="input-group">
                                                                                                                                                                                            <input type="text" class="form-control form-control-sm additional-end-time"
                                                                                                                                                                                                   data-day="${day}" placeholder="Ek Bitiş" value="${record.additionalEndTime ? PuantajCommon.Utils.formatTimeSpan(record.additionalEndTime) : ''}">
                                                                                                                                                                                            <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                                                                                                                                                        </div>
                                                                                                                                                                                    </div>
                                                                                                                                                                                </td>
                                                                                                                                                                                  <td>
                                                                                                                                                                                         <select class="form-select form-select-sm project-select" data-day="${day}" data-current-value="${record.projectId || ''}">
                                                                                                                                                                                           <option value="">Proje seçin</option>
                                                                                                                                                                                          </select>
                                                                                                                                                                                  </td>
                                                                                                                                                                                                                        <td>
                                                                                                                                                                                                <select class="form-select form-select-sm equipment-select" data-day="${day}" data-current-value="${record.equipmentId || ''}">
                                                                                                                                                                                                    <option value="">Ekipman seçin</option>
                                                                                                                                                                                                </select>
                                                                                                                                                                                            </td>
                                                                                                                                                                                                    <td>
                                                                                                                                                                                                        <select class="form-select form-select-sm province-select" data-day="${day}">
                                                                                                                                                                                                            <option value="">İl seçin</option>
                                                                                                                                                                                                        </select>
                                                                                                                                                                                                    </td>
                                                                                                                                                                                                    <td>
                                                                                                                                                                                                        <select class="form-select form-select-sm district-select" data-day="${day}">
                                                                                                                                                                                                            <option value="">İlçe seçin</option>
                                                                                                                                                                                                        </select>
                                                                                                                                                                                                    </td>
                                                                                                                                                                                                    <td>
                                                                                                                                                                                                        <button type="button" class="btn btn-primary expense-modal-btn w-100"
                                                                                                                                                                                                                data-day="${day}" data-bs-toggle="modal" data-bs-target="#expenseModal">
                                                                                                                                                                                                            <i class="fas fa-receipt me-1"></i>
                                                                                                                                                                                                            <span class="expense-count" data-day="${day}">0 Masraf<br/><small>0,00 ₺</small></span>
                                                                                                                                                                                                        </button>
                                                                                                                                                                                                    </td>
                                                                                                                                                                                                    <td>
                                                                                                                                                                                                        <div class="meal-section">
                                                                                                                                                                                                            <div class="meal-item">
                                                                                                                                                                                                                <div class="form-check">
                                                                                                                                                                                                                    <input class="form-check-input meal-checkbox" type="checkbox" id="s_${day}" data-meal="S" data-day="${day}" ${record.hasBreakfast ? 'checked' : ''}>
                                                                                                                                                                                                                    <label class="form-check-label" for="s_${day}">S</label>
                                                                                                                                                                                                                </div>
                                                                                                                                                                                                            </div>
                                                                                                                                                                                                            <div class="meal-item">
                                                                                                                                                                                                                <div class="form-check">
                                                                                                                                                                                                                    <input class="form-check-input meal-checkbox" type="checkbox" id="o_${day}" data-meal="O" data-day="${day}" ${record.hasLunch ? 'checked' : ''}>
                                                                                                                                                                                                                    <label class="form-check-label" for="o_${day}">Ö</label>
                                                                                                                                                                                                                </div>
                                                                                                                                                                                                            </div>
                                                                                                                                                                                                            <div class="meal-item">
                                                                                                                                                                                                                <div class="form-check">
                                                                                                                                                                                                                    <input class="form-check-input meal-checkbox" type="checkbox" id="a_${day}" data-meal="A" data-day="${day}" ${record.hasDinner ? 'checked' : ''}>
                                                                                                                                                                                                                    <label class="form-check-label" for="a_${day}">A</label>
                                                                                                                                                                                                                </div>
                                                                                                                                                                                                            </div>
                                                                                                                                                                                                            <div class="meal-item">
                                                                                                                                                                                                                <div class="form-check">
                                                                                                                                                                                                                    <input class="form-check-input meal-checkbox" type="checkbox" id="g_${day}" data-meal="G" data-day="${day}" ${record.hasNightMeal ? 'checked' : ''} disabled>
                                                                                                                                                                                                                    <label class="form-check-label" for="g_${day}">G</label>
                                                                                                                                                                                                                </div>
                                                                                                                                                                                                            </div>
                                                                                                                                                                                                        </div>
                                                                                                                                                                                                    </td>
                                                                                                                                                                                                    <td>
                                                                                                                                                                                                        <div class="form-check">
                            <input class="form-check-input travel-checkbox" type="checkbox" id="t_${day}" data-day="${day}" ${record.hasTravel ? 'checked' : ''}>
                            <label class="form-check-label" for="t_${day}">Y</label>
                            </div>
                            </td>
                            <td>
                            ${statusBadge}
                            </td>
                            <td>
                            <div class="btn-group btn-group-sm" role="group">
                                            <button type="button" class="btn btn-outline-success" onclick="approveWorkRecord('${record.id}', '${formattedDate}')">
                                    <i class="fas fa-thumbs-up"></i>
                            </button>
                                            <button type="button" class="btn btn-outline-danger" onclick="rejectWorkRecord('${record.id}','${formattedDate}')">
                            <i class="fas fa-thumbs-down"></i>
                            </button>
                            </div>
                            </td>
                            </tr>
                            `;
        }

        async function approveWorkRecord(id, date) {
            try {
                const result = await Swal.fire({
                    title: 'Puantajı Onayla',
                    text: `Bu kullanıcının ${date} puantajını onaylamak istediğinizden emin misiniz?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-check"></i> Evet, Onayla',
                    cancelButtonText: '<i class="fas fa-times"></i> İptal',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const response = await $.ajax({
                                url: `/puantaj/onayla/${id}`,
                                type: 'PUT',
                                headers: {
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                }
                            });
                            if (!response.isSuccess) {
                                Swal.showValidationMessage(`Hata: ${response.message}`);
                                throw new Error(response.message);
                            }
                            return response;
                        } catch (error) {
                            const errorMessage = PuantajCommon.AjaxHelper.handleError(error, 'Onaylama başarısız');
                            Swal.showValidationMessage(`Hata: ${errorMessage}`);
                            return false;
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    toastr.success('Puantaj başarıyla onaylandı', 'Başarılı!');
                    await loadWorkRecordsByUser();
                }
            } catch (error) {
                console.error('Onaylama hatası:', error);
            }
        }

        async function rejectWorkRecord(id, date) {
            try {
                $('#txtRejectWorkRecordId').val(id);
                $('#txtRejectMode').val('single');
                $('#txtWorkRecordRejectReason').val('');
                $('#rejectWorkRecordModal').modal('show');
            } catch (error) {
                console.error('Reddetme modalı açılırken hata:', error);
            }
        }
        // User management functions
        async function getAssignedUsers() {
            try {
                const userSelects = $('.user-select');
                if (!userSelects.length) {
                    console.warn('User select elements not found');
                    return;
                }

                userSelects.prop('disabled', true);

                userSelects.each(function () {
                    const currentSelect = $(this);
                    currentSelect.empty();
                    currentSelect.append('<option value="">Yükleniyor...</option>');

                    if (currentSelect.hasClass('select2-hidden-accessible')) {
                        currentSelect.trigger('change');
                    }
                });

                const response = await $.ajax({
                    url: '/kullanici/liste',
                    type: 'GET',
                    dataType: 'json'
                });

                if (response && response.isSuccess && response.data) {
                    userSelects.each(function () {
                        const currentSelect = $(this);
                        currentSelect.empty();
                        currentSelect.append('<option value="">Kullanıcı seçin</option>');

                        response.data.forEach(user => {
                            currentSelect.append(`<option value="${user.id}">${user.fullNameWithExp}</option>`);
                        });

                        if (currentSelect.hasClass('select2-hidden-accessible')) {
                            currentSelect.trigger('change');
                        }
                    });
                } else {
                    throw new Error(response?.message || 'Atanmış kullanıcılar yüklenemedi');
                }
            } catch (error) {
                console.error('Atanmış kullanıcılar yüklenirken hata:', error);

                $('.user-select').each(function () {
                    const currentSelect = $(this);
                    currentSelect.html('<option value="">Kullanıcılar yüklenemedi</option>');

                    if (currentSelect.hasClass('select2-hidden-accessible')) {
                        currentSelect.trigger('change');
                    }
                });

                PuantajCommon.AjaxHelper.handleError(error, 'Atanmış kullanıcılar yüklenirken hata oluştu');
            } finally {
                $('.user-select').prop('disabled', false);
            }
        }

        // Save and approval functions
        async function saveWorkRecords() {
            const workRecords = [];
            const selectedUserId = $('#user-select').val();

            if (!selectedUserId) {
                toastr.warning('Lütfen bir kullanıcı seçin', 'Uyarı!');
                return;
            }

            const expenseData = PuantajCommon.getExpenseData();

            $('#workRecordsTableBody tr').each(function () {
                if ($(this).find('td').length === 1) return; // Skip message rows

                const day = $(this).data('day');
                const excuseReason = $(this).find('.excuse-reason-select').val();
                const startTime = $(this).find('.start-time').val();
                const endTime = $(this).find('.end-time').val();
                const additionalStartTime = $(this).find('.additional-start-time').val();
                const additionalEndTime = $(this).find('.additional-end-time').val();
                const projectId = $(this).find('.project-select').val();
                const equipmentId = $(this).find('.equipment-select').val();
                const province = $(this).find('.province-select').val();
                const district = $(this).find('.district-select').val();

                const dayExpenses = expenseData[day] || [];
                const expenses = dayExpenses.map(exp => ({
                    expenseId: exp.expenseId,
                    description: exp.description || null,
                    amount: exp.amount,
                    receiptImageUrl: exp.receiptImageUrl || null
                }));

                const hasBreakfast = $(this).find('.meal-checkbox[data-meal="S"]').is(':checked');
                const hasLunch = $(this).find('.meal-checkbox[data-meal="O"]').is(':checked');
                const hasDinner = $(this).find('.meal-checkbox[data-meal="A"]').is(':checked');
                const hasNightMeal = $(this).find('.meal-checkbox[data-meal="G"]').is(':checked');
                const hasTravel = $(this).find('.travel-checkbox').is(':checked');
                const formattedDate = `${PuantajCommon.getCurrentYear()}-${String(PuantajCommon.getCurrentMonth()).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

                workRecords.push({
                    Date: formattedDate,
                    ExcuseReason: excuseReason || "",
                    StartTime: startTime,
                    EndTime: endTime,
                    AdditionalStartTime: additionalStartTime || "",
                    AdditionalEndTime: additionalEndTime || "",
                    ProjectId: projectId,
                    EquipmentId: equipmentId,
                    Province: province,
                    District: district,
                    HasBreakfast: hasBreakfast,
                    HasLunch: hasLunch,
                    HasDinner: hasDinner,
                    HasNightMeal: hasNightMeal,
                    HasTravel: hasTravel,
                    Expenses: expenses,
                    UserId: selectedUserId
                });
            });

            try {
                const response = await $.ajax({
                    url: `/puantaj/toplu-guncelle/kullanici/${selectedUserId}`,
                    type: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(workRecords),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    }
                });

                if (response.isSuccess) {
                    toastr.success(response.message, 'Başarılı!');
                    await loadWorkRecordsByUser();
                } else {
                    toastr.error(response.message, 'Hata!');
                }
            } catch (error) {
                PuantajCommon.AjaxHelper.handleError(error, 'Puantaj kaydedilirken bir hata oluştu.');
            }
        }

        async function approveWorkRecords() {
            const selectedUserId = $('#user-select').val();
            const year = parseInt($('#year-select').val());
            const month = parseInt($('#month-select').val());

            if (!selectedUserId) {
                toastr.warning('Lütfen bir kullanıcı seçin', 'Uyarı!');
                return;
            }

            try {
                const result = await Swal.fire({
                    title: 'Puantajı Onayla',
                    text: `Bu kullanıcının ${month}/${year} puantajını onaylamak istediğinizden emin misiniz?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-check"></i> Evet, Onayla',
                    cancelButtonText: '<i class="fas fa-times"></i> İptal',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const formattedDate = `${year}-${String(month).padStart(2, '0')}-01`;

                            const response = await $.ajax({
                                url: `/puantaj/toplu-onayla/kullanici/${selectedUserId}/tarih/${formattedDate}`,
                                type: 'PUT',

                                headers: {
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                }
                            });

                            if (!response.isSuccess) {
                                Swal.showValidationMessage(`Hata: ${response.message}`);
                                throw new Error(response.message);
                            }

                            return response;
                        } catch (error) {
                            const errorMessage = PuantajCommon.AjaxHelper.handleError(error, 'Onaylama başarısız');
                            Swal.showValidationMessage(`Hata: ${errorMessage}`);
                            return false;
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    toastr.success('Puantaj başarıyla onaylandı', 'Başarılı!');
                    await loadWorkRecordsByUser();
                }
            } catch (error) {
                console.error('Onaylama hatası:', error);
            }
        }

        async function rejectWorkRecords() {
            const selectedUserId = $('#user-select').val();
            const year = parseInt($('#year-select').val());
            const month = parseInt($('#month-select').val());

            if (!selectedUserId) {
                toastr.warning('Lütfen bir kullanıcı seçin', 'Uyarı!');
                return;
            }

            try {
                $('#txtRejectWorkRecordId').val('');
                $('#txtRejectMode').val('bulk');
                $('#txtWorkRecordRejectReason').val('');
                $('#rejectWorkRecordModal').modal('show');
            } catch (error) {
                console.error('Toplu reddetme modalı açılırken hata:', error);
            }
        }

        async function confirmRejectWithReason() {
            try {
                const mode = $('#txtRejectMode').val();
                const reason = ($('#txtWorkRecordRejectReason').val() || '').trim();

                if (mode === 'single') {
                    const id = $('#txtRejectWorkRecordId').val();
                    const url = `/puantaj/reddet/${id}${reason ? `?rejectReason=${encodeURIComponent(reason)}` : ''}`;
                    const response = await $.ajax({
                        url: url,
                        type: 'PUT',
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        }
                    });

                    if (response.isSuccess) {
                        toastr.success('Puantaj başarıyla reddedildi', 'Başarılı!');
                        $('#rejectWorkRecordModal').modal('hide');
                        await loadWorkRecordsByUser();
                    } else {
                        toastr.error(response.message || 'Reddetme başarısız', 'Hata!');
                    }
                } else if (mode === 'bulk') {
                    const selectedUserId = $('#user-select').val();
                    const year = parseInt($('#year-select').val());
                    const month = parseInt($('#month-select').val());
                    const formattedDate = `${year}-${String(month).padStart(2, '0')}-01`;
                    const url = `/puantaj/toplu-reddet/kullanici/${selectedUserId}/tarih/${formattedDate}${reason ? `?rejectReason=${encodeURIComponent(reason)}` : ''}`;
                    const response = await $.ajax({
                        url: url,
                        type: 'PUT',
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        }
                    });

                    if (response.isSuccess) {
                        toastr.success('Puantaj başarıyla reddedildi', 'Başarılı!');
                        $('#rejectWorkRecordModal').modal('hide');
                        await loadWorkRecordsByUser();
                    } else {
                        toastr.error(response.message || 'Reddetme başarısız', 'Hata!');
                    }
                }
            } catch (error) {
                const errorMessage = PuantajCommon.AjaxHelper.handleError(error, 'Reddetme başarısız');
                toastr.error(errorMessage, 'Hata!');
            }
        }
    </script>
}