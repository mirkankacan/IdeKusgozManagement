@{
    ViewData["Title"] = "Kullanıcıya Göre Puantaj Listesi";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />
    <link rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.rtl.min.css" />

    <link href="~/css/puantaj-common.css" rel="stylesheet" />

}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">
                    <i class="fas fa-bars-staggered me-2"></i>
                    Kullanıcıya Göre Puantaj Listesi
                </h5>

                <!-- Yıl ve Ay Seçimi -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <label for="year-select" class="form-label">Yıl</label>
                        <select id="year-select" class="form-select">
                            @for (int year = DateTime.Now.Year - 2; year <= DateTime.Now.Year; year++)
                            {
                                if (year == DateTime.Now.Year)
                                {
                                    <option value="@year" selected>@year</option>
                                }
                                else
                                {
                                    <option value="@year">@year</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="month-select" class="form-label">Ay</label>
                        <select id="month-select" class="form-select">
                            <option value="1">Ocak</option>
                            <option value="2">Şubat</option>
                            <option value="3">Mart</option>
                            <option value="4">Nisan</option>
                            <option value="5">Mayıs</option>
                            <option value="6">Haziran</option>
                            <option value="7">Temmuz</option>
                            <option value="8">Ağustos</option>
                            <option value="9">Eylül</option>
                            <option value="10">Ekim</option>
                            <option value="11">Kasım</option>
                            <option value="12">Aralık</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="user-select" class="form-label">Kullanıcı</label>
                        <select id="user-select" class="form-select user-select">
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label class="form-label">&nbsp;</label>
                        <div class="d-flex gap-2">
                            <button type="button" class="btn btn-warning flex-fill btnUpdateWorkRecords">
                                <i class="fas fa-edit me-2"></i>Güncelle
                            </button>
                            <button type="button" class="btn btn-outline-success flex-fill">
                                <i class="fas fa-thumbs-up me-2"></i>Onayla
                            </button>
                            <button type="button" class="btn btn-outline-danger flex-fill">
                                <i class="fas fa-thumbs-down me-2"></i>Reddet
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Dinamik Tablo -->
                <div id="dynamicTableContainer">
                    <div id="tableLoadingSpinner" class="text-center py-5" style="display: none;">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Yükleniyor...</span>
                        </div>
                        <div class="mt-3">
                            <h6 class="text-muted">Tablo oluşturuluyor...</h6>
                            <small class="text-muted">Lütfen bekleyiniz</small>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table id="workRecordsTable" class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>TARİH</th>
                                    <th>TATİL</th>
                                    <th style="width: 100px;max-width:100px;">BAŞLAMA<br /> SAATİ</th>
                                    <th style="width: 100px;max-width:100px;">BIRAKMA<br /> SAATİ</th>
                                    <th>PROJE</th>
                                    <th>ÇALIŞILAN<br /> EKİPMAN</th>
                                    <th>ÇALIŞILAN<br /> İL</th>
                                    <th>ÇALIŞILAN<br /> İLÇE</th>
                                    <th style="width:120px;max-width:120px;">MASRAF</th>
                                    <th>YEMEK</th>
                                    <th>YOL</th>
                                    <th>DURUM</th>
                                    <th>İŞLEM</th>
                                </tr>
                            </thead>
                            <tbody id="workRecordsTableBody">
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="col-md-12">
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-warning flex-fill btnUpdateWorkRecords">
                            <i class="fas fa-edit me-2"></i>Güncelle
                        </button>
                        <button type="button" class="btn btn-outline-success flex-fill">
                            <i class="fas fa-thumbs-up me-2"></i>Onayla
                        </button>
                        <button type="button" class="btn btn-outline-danger flex-fill">
                            <i class="fas fa-thumbs-down me-2"></i>Reddet
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="expenseModal" tabindex="-1" aria-labelledby="expenseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="expenseModalLabel">
                    <i class="fas fa-receipt me-2"></i>
                    Masraf Bilgileri - <span id="modalDateInfo"></span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="expenseForm" class="needs-validation" novalidate>
                <div class="modal-body">
                    <!-- Mevcut Masraflar Listesi -->
                    <div id="currentExpensesList" class="mb-3" style="display: none;">
                        <h6 class="text-muted">Mevcut Masraflar:</h6>
                        <div id="expenseItemsList" class="list-group mb-3">
                            <!-- Masraf listesi buraya gelecek -->
                        </div>
                    </div>

                    <!-- Yeni Masraf Ekleme Formu -->
                    <div id="addExpenseForm" class="row g-3">
                        <div class="col-md-6">
                            <label for="expense-select" class="form-label">Masraf Türü</label>
                            <select class="form-select expense-select" id="expense-select" required>
                            </select>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen geçerli bir masraf seçiniz.</div>
                        </div>
                        <div class="col-md-6">
                            <label for="txtAmount" class="form-label">Tutar (₺)</label>
                            <input type="number" class="form-control" id="txtAmount" step="0.01" min="0" required>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen geçerli bir tutar giriniz.</div>
                        </div>
                        <div class="col-md-12">
                            <label for="txtDescription" class="form-label">Açıklama</label>
                            <textarea class="form-control" id="txtDescription" placeholder="Opsiyonel"></textarea>
                        </div>
                        <div class="col-md-12">
                            <label for="fileReceipt" class="form-label">Fatura</label>
                            <input type="file" class="form-control" id="fileReceipt" required
                                accept=".jpg,.jpeg,.png,.pdf,.doc,.docx">
                            <div class="form-text">
                                Desteklenen formatlar: PDF, JPG, JPEG, PNG, DOC, DOCX
                            </div>
                            <div class="valid-feedback">İyi görünüyor!</div>
                            <div class="invalid-feedback">Lütfen geçerli bir dosya seçiniz.</div>
                        </div>
                    </div>

                    <!-- Toplam Masraf -->
                    <div class="mt-3 p-2 bg-light rounded" id="totalExpenseSection" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="fw-bold">Toplam Masraf:</span>
                            <span class="fw-bold text-primary" id="totalExpenseAmount">₺0,00</span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Kapat</button>
                    <button class="btn btn-primary w-100" type="submit" id="btnAddExpense">
                        <i class="fas fa-plus me-1"></i>Masraf Ekle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Reject Work Record Modal -->
<div class="modal fade" id="rejectWorkRecordModal" tabindex="-1" aria-labelledby="rejectWorkRecordModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rejectWorkRecordModalLabel">Puantaj Reddetme Penceresi</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input type="hidden" id="txtRejectWorkRecordId" value="" disabled readonly />
                <input type="hidden" id="txtRejectMode" value="single" disabled readonly />
                <div class="mb-3">
                    <label for="txtWorkRecordRejectReason" class="form-label">Reddetme Sebebi (İsteğe Bağlı)</label>
                    <textarea class="form-control" id="txtWorkRecordRejectReason" rows="3" maxlength="349"
                        placeholder="Reddetme sebebini açıklayın..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-danger w-100" id="btnRejectWorkRecordConfirm">
                    <i class="fas fa-times me-1"></i>Reddet
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="~/js/turkey-locations.js"></script>

    <script>
        // Page-specific variables
        let workRecordsTable;
        let currentYear = new Date().getFullYear();
        let currentMonth = new Date().getMonth() + 1;
        let expenseData = {};
        let currentEditingDay = null;

        // ===== UTILITY FUNCTIONS =====
        function getDayOfWeekTurkish(day) {
            const days = ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'];
            return days[day];
        }

        function formatTimeSpan(timeSpan) {
            if (!timeSpan || timeSpan == null) return '';
            let formattedTime = '';
            if (typeof timeSpan === 'string' && timeSpan.includes(':')) {
                formattedTime = timeSpan.substring(0, 5);
            } else if (typeof timeSpan === 'string') {
                const parts = timeSpan.split(':');
                if (parts.length >= 2) {
                    formattedTime = `${parts[0].padStart(2, '0')}:${parts[1].padStart(2, '0')}`;
                }
            }
            if (formattedTime === '00:00') {
                formattedTime = '23:59';
            }
            return formattedTime;
        }

        function showTableLoading() {
            $('#dynamicTableContainer').addClass('table-loading');
            $('#tableLoadingSpinner').show();
            $('#tableContent').hide();
        }

        function hideTableLoading() {
            $('#dynamicTableContainer').removeClass('table-loading');
            $('#tableLoadingSpinner').hide();
            $('#tableContent').show();
        }

        // ===== SELECT2 MANAGEMENT =====
        async function initializeEquipmentSelect() {
            try {
                const response = await $.ajax({
                    url: '/ekipman/aktif-liste',
                    type: 'GET',
                    dataType: 'json'
                });

                if (response && response.isSuccess && response.data) {
                    $('.equipment-select').each(function () {
                        const currentSelect = $(this);
                        const currentValue = currentSelect.data('current-value');
                        currentSelect.empty();
                        currentSelect.append('<option value="">Ekipman seçin</option>');
                        response.data.forEach(equipment => {
                            const isSelected = currentValue === equipment.id;
                            currentSelect.append(`<option value="${equipment.id}" ${isSelected ? 'selected' : ''}>${equipment.name}</option>`);
                        });
                    });
                }

                $('.equipment-select').select2({
                    placeholder: 'Ekipman seçin',
                    theme: 'bootstrap-5',
                    allowClear: true,
                    width: '100%'
                });
            } catch (error) {
                console.error('Ekipman listesi yüklenirken hata:', error);
                toastr.error('Ekipman listesi yüklenirken hata oluştu', 'Hata!');
            }
        }

        async function initializeProjectSelect() {
            try {
                const response = await $.ajax({
                    url: '/proje/aktif-liste',
                    type: 'GET',
                    dataType: 'json'
                });

                if (response && response.isSuccess && response.data) {
                    $('.project-select').each(function () {
                        const currentSelect = $(this);
                        const currentValue = currentSelect.data('current-value');
                        currentSelect.empty();
                        currentSelect.append('<option value="">Proje seçin</option>');
                        response.data.forEach(project => {
                            const isSelected = currentValue === project.id;
                            currentSelect.append(`<option value="${project.id}" ${isSelected ? 'selected' : ''}>${project.name}</option>`);
                        });
                    });
                }

                $('.project-select').select2({
                    placeholder: 'Proje seçin',
                    theme: 'bootstrap-5',
                    allowClear: true,
                    width: '100%'
                });
            } catch (error) {
                console.error('Proje listesi yüklenirken hata:', error);
                toastr.error('Proje listesi yüklenirken hata oluştu', 'Hata!');
            }
        }

        async function initializeDailyStatusSelect() {
            try {
                const reasons = [
                    { value: 'Hafta Tatili', text: 'Hafta Tatili' },
                    { value: 'Rapor', text: 'Rapor' },
                    { value: 'Ücretsiz İzin', text: 'Ücretsiz İzin' },
                    { value: 'Yıllık İzin', text: 'Yıllık İzin' },
                    { value: 'Babalık İzni', text: 'Babalık İzni' },
                    { value: 'İdari İzin', text: 'İdari İzin (Serbest Zaman İzni)' },
                    { value: 'Cenaze İzni', text: 'Cenaze İzni' },
                    { value: 'Evlilik İzni', text: 'Evlilik İzni' },
                    { value: 'Süt İzni', text: 'Süt İzni' }
                ];
                if (!window.isUserPersonel) {
                    reasons.push({ value: 'Devamsızlık', text: 'Devamsızlık' });
                }
                $('.daily-status-select').each(function () {
                    const currentSelect = $(this);
                    const currentValue = currentSelect.data('current-value');
                    currentSelect.empty();
                    currentSelect.append('<option value=""></option>');
                    reasons.forEach(reason => {
                        const isSelected = currentValue === reason.value;
                        currentSelect.append(`<option value="${reason.value}" ${isSelected ? 'selected' : ''}>${reason.text}</option>`);
                    });
                });

                $('.daily-status-select').select2({
                    placeholder: 'Sebep seçin',
                    theme: 'bootstrap-5',
                    allowClear: true,
                    width: '100%'
                });
            } catch (error) {
                console.error('İzin sebep listesi yüklenirken hata:', error);
                toastr.error('İzin sebep listesi yüklenirken hata oluştu', 'Hata!');
            }
        }

        function initializeLocationSelects() {
            $('.province-select').select2({
                placeholder: 'İl seçin',
                theme: 'bootstrap-5',
                allowClear: true,
                width: '100%'
            });

            $('.district-select').select2({
                placeholder: 'İlçe seçin',
                theme: 'bootstrap-5',
                allowClear: true,
                width: '100%'
            });
        }

        function initializeUserSelect() {
            $('.user-select').select2({
                placeholder: 'Kullanıcı seçin',
                theme: 'bootstrap-5',
                width: '100%'
            });
        }

        async function initializeAllSelects() {
            await initializeEquipmentSelect();
            initializeLocationSelects();
            await initializeProjectSelect();
            await initializeDailyStatusSelect();
            await initializeExpenseSelect();
            initializeUserSelect();
        }

        async function initializeExpenseSelect() {
            try {
                const response = await $.ajax({
                    url: '/masraf/aktif-liste',
                    type: 'GET',
                    dataType: 'json'
                });

                if (response && response.isSuccess && response.data) {
                    $('#expense-select').empty();
                    $('#expense-select').append('<option value="">Masraf türü seçin</option>');
                    response.data.forEach(expense => {
                        $('#expense-select').append(`<option value="${expense.id}">${expense.name}</option>`);
                    });
                }

                $('#expense-select').select2({
                    placeholder: 'Masraf türü seçin',
                    theme: 'bootstrap-5',
                    allowClear: true,
                    width: '100%'
                });
            } catch (error) {
                console.error('Masraf listesi yüklenirken hata:', error);
                toastr.error('Masraf listesi yüklenirken hata oluştu', 'Hata!');
            }
        }

        // ===== EXPENSE MANAGEMENT =====
        function loadExpensesForDay(day) {
            if (!expenseData[day]) {
                expenseData[day] = [];
            }

            // Onaylanmış kayıt kontrolü
            const recordId = $(`tr[data-day="${day}"]`).data('record-id');
            const statusBadge = $(`tr[data-day="${day}"]`).find('.badge');
            const isApproved = statusBadge.hasClass('bg-success');

            displayCurrentExpenses(day, isApproved);
            updateTotalExpense(day);
        }

        function displayCurrentExpenses(day, isApproved = false) {
            const expenses = expenseData[day] || [];
            const expensesList = $('#expenseItemsList');
            const currentExpensesSection = $('#currentExpensesList');
            expensesList.empty();

            if (expenses.length > 0) {
                currentExpensesSection.show();
                expenses.forEach((expense, index) => {
                    const expenseName = expense.expenseName;
                    const actionButton = isApproved
                        ? `<span class="badge bg-success"><i class="fas fa-check me-1"></i>Onaylandı</span>`
                        : `<button type="button" class="btn btn-sm btn-outline-danger remove-expense-btn" data-index="${index}" title="Masrafı Sil"><i class="fas fa-trash"></i></button>`;

                    let fileDisplay = '';
                    if (expense.fileId) {
                        fileDisplay = `<br/><a href="/dosya/indir/${expense.fileId}" download class="text-muted text-decoration-underline"><i class="fas fa-download me-1"></i>${expense.originalFileName || 'Dosya'}</a>`;
                    } else if (expense.receiptImageUrl) {
                        fileDisplay = `<br/><a href="${expense.receiptImageUrl}" target="_blank" class="text-muted text-decoration-underline"><i class="fas fa-image me-1"></i>Görüntüle</a>`;
                    }

                    const expenseItem = `
                                                                                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                                                                                <div>
                                                                                                                    <h6 class="mb-1">${expenseName}</h6>
                                                                                                                    <p class="mb-1"><strong>${expense.amount.toFixed(2)} ₺</strong></p>
                                                                                                                    ${expense.description ? `<small class="text-muted">${expense.description}</small>` : ''}
                                                                                                                    ${fileDisplay}
                                                                                                                </div>
                                                                                                                ${actionButton}
                                                                                                            </div>
                                                                                                        `;
                    expensesList.append(expenseItem);
                });
            } else {
                currentExpensesSection.hide();
            }
        }

        function updateTotalExpense(day) {
            const expenses = expenseData[day] || [];
            const total = expenses.reduce((sum, expense) => sum + expense.amount, 0);
            $('#totalExpenseAmount').text(total.toFixed(2) + ' ₺');

            if (total > 0) {
                $('#totalExpenseSection').show();
            } else {
                $('#totalExpenseSection').hide();
            }
        }

        function updateExpenseButton(day) {
            const expenses = expenseData[day] || [];
            const button = $(`.expense-modal-btn[data-day="${day}"]`);
            const count = expenses.length;
            const total = expenses.reduce((sum, expense) => sum + expense.amount, 0);

            if (count > 0) {
                const formattedTotal = new Intl.NumberFormat('tr-TR', {
                    style: 'currency',
                    currency: 'TRY',
                    minimumFractionDigits: 2
                }).format(total);
                button.find('.expense-count').html(`${count} Masraf<br/><small>${formattedTotal}</small>`);
            } else {
                button.find('.expense-count').html('0 Masraf<br/><small>₺0,00</small>');
            }

            if (count > 0) {
                button.removeClass('btn-outline-primary').addClass('btn-success');
            } else {
                button.removeClass('btn-success').addClass('btn-outline-primary');
            }
        }

        function clearExpenseForm() {
            $('#expense-select').val('').trigger('change');
            $('#txtAmount').val('');
            $('#txtDescription').val('');
            $('#fileReceipt').val('');
            $('#expenseForm').removeClass('was-validated');
        }

        function addExpenseToDay() {
            const expenseId = $('#expense-select').val();
            const amount = parseFloat($('#txtAmount').val());
            const description = $('#txtDescription').val().trim();
            const receiptFile = $('#fileReceipt')[0].files[0];

            if (!expenseId || !amount || !receiptFile) {
                toastr.warning('Lütfen tüm gerekli alanları doldurun', 'Uyarı!');
                return;
            }

            if (amount <= 0) {
                toastr.warning('Tutar 0\'dan büyük olmalıdır', 'Uyarı!');
                return;
            }

            const expenseName = $('#expense-select option:selected').text();
            const newExpense = {
                id: null, // Yeni expense için id null
                expenseId: expenseId,
                expenseName: expenseName,
                amount: amount,
                description: description || null,
                receiptFile: receiptFile
            };

            if (!expenseData[currentEditingDay]) {
                expenseData[currentEditingDay] = [];
            }

            expenseData[currentEditingDay].push(newExpense);
            displayCurrentExpenses(currentEditingDay);
            updateTotalExpense(currentEditingDay);
            updateExpenseButton(currentEditingDay);
            clearExpenseForm();

            toastr.success('Masraf başarıyla eklendi', 'Başarılı!');
        }

        function removeExpenseFromDay(index) {
            if (expenseData[currentEditingDay] && expenseData[currentEditingDay][index]) {
                expenseData[currentEditingDay].splice(index, 1);
                displayCurrentExpenses(currentEditingDay);
                updateTotalExpense(currentEditingDay);
                updateExpenseButton(currentEditingDay);
                toastr.success('Masraf başarıyla silindi', 'Başarılı!');
            }
        }

        // ===== LOCATION MANAGEMENT =====
        async function populateProvincesAndDistricts(workRecords) {
            const recordsArray = Array.isArray(workRecords) ? workRecords : Object.values(workRecords);

            $('.province-select').each(function () {
                populateProvinces($(this));
            });

            setupLocationEventListeners();

            if (recordsArray.length > 0) {
                recordsArray.forEach(record => {
                    const date = new Date(record.date);
                    const day = date.getDate();
                    const provinceSelect = $(`.province-select[data-day="${day}"]`);
                    populateProvinces(provinceSelect);

                    setTimeout(() => {
                        provinceSelect.val(record.province || '').trigger('change');
                        setTimeout(() => {
                            const districtSelect = $(`.district-select[data-day="${day}"]`);
                            if (record.province) {
                                populateDistricts(provinceSelect, districtSelect);
                                setTimeout(() => {
                                    districtSelect.val(record.district || '').trigger('change');
                                }, 100);
                            }
                        }, 100);
                    }, 50);
                });
            }
        }

        function setupLocationEventListeners() {
            $(document).off('change', '.province-select').on('change', '.province-select', function () {
                const provinceSelect = $(this);
                const day = provinceSelect.data('day');
                const districtSelect = $(`.district-select[data-day="${day}"]`);

                districtSelect.empty();
                districtSelect.append('<option value="">İlçe seçin</option>');

                if (provinceSelect.val()) {
                    populateDistricts(provinceSelect, districtSelect);
                }

                if (districtSelect.hasClass('select2-hidden-accessible')) {
                    districtSelect.select2('destroy');
                }
                districtSelect.select2({
                    placeholder: 'İlçe seçin',
                    theme: 'bootstrap-5',
                    allowClear: true,
                    width: '100%'
                });
            });
        }

        // ===== STATUS BADGE =====
        function generateStatusBadge(status, statusText) {
            let badgeClass = 'bg-secondary';
            let icon = 'fas fa-clock';

            switch (status) {
                case 0:
                    badgeClass = 'bg-warning text-dark';
                    icon = 'fas fa-clock';
                    statusText = statusText || 'Bekliyor';
                    break;
                case 1:
                    badgeClass = 'bg-success';
                    icon = 'fas fa-check';
                    statusText = statusText || 'Onaylandı';
                    break;
                case 2:
                    badgeClass = 'bg-danger';
                    icon = 'fas fa-times';
                    statusText = statusText || 'Reddedildi';
                    break;
                default:
                    statusText = statusText || 'Yeni';
                    badgeClass = 'bg-secondary';
                    icon = 'fas fa-circle';
            }

            return `<span class="badge ${badgeClass}"><i class="${icon} me-1"></i>${statusText}</span>`;
        }

        // ===== NIGHT MEAL ELIGIBILITY CHECK =====
        function checkNightMealEligibility(day) {
            const startTime = $(`.start-time[data-day="${day}"]`).val();
            const endTime = $(`.end-time[data-day="${day}"]`).val();
            const additionalStartTime = $(`.additional-start-time[data-day="${day}"]`).val();
            const additionalEndTime = $(`.additional-end-time[data-day="${day}"]`).val();

            const gCheckbox = $(`#g_${day}`);

            // Eğer onaylanmış kayıt varsa G checkbox'u disabled kalacak
            const recordId = $(`tr[data-day="${day}"]`).data('record-id');
            if (recordId) {
                // Mevcut kayıt varsa, onay durumunu kontrol et
                const statusBadge = $(`tr[data-day="${day}"]`).find('.badge');
                if (statusBadge.hasClass('bg-success')) {
                    gCheckbox.prop('disabled', true);
                    return;
                }
            }

            // Saat aralıklarını kontrol et
            const timeRanges = [];

            if (startTime && endTime) {
                timeRanges.push({ start: startTime, end: endTime });
            }

            if (additionalStartTime && additionalEndTime) {
                timeRanges.push({ start: additionalStartTime, end: additionalEndTime });
            }

            // 01:00-05:00 aralığını kapsayan herhangi bir saat aralığı var mı kontrol et
            const hasNightTime = timeRanges.some(range => {
                return isTimeRangeOverlappingNight(range.start, range.end);
            });

            if (hasNightTime) {
                gCheckbox.prop('disabled', false);
            } else {
                gCheckbox.prop('disabled', true);
                gCheckbox.prop('checked', false);
            }
        }

        function isTimeRangeOverlappingNight(startTime, endTime) {
            if (!startTime || !endTime) return false;

            const start = parseTimeToMinutes(startTime);
            const end = parseTimeToMinutes(endTime);
            const nightStart = 1 * 60; // 01:00 = 60 dakika
            const nightEnd = 5 * 60;   // 05:00 = 300 dakika

            // Eğer başlangıç ve bitiş aynı gün içindeyse
            if (start < end) {
                return (start < nightEnd && end > nightStart);
            }
            // Eğer gece yarısını geçiyorsa (örneğin 23:00-07:00)
            else {
                return (start < nightEnd || end > nightStart);
            }
        }

        function parseTimeToMinutes(timeString) {
            const [hours, minutes] = timeString.split(':').map(Number);
            return hours * 60 + minutes;
        }

        // ===== PAGE INITIALIZATION =====
        $(document).ready(async function () {
            await initializePage();
        });

        async function initializePage() {
            $('body').addClass('sidebar-hidden');

            $('#year-select').val(currentYear);
            $('#month-select').val(currentMonth);

            // Initialize all components
            await initializeAllSelects();

            // Page-specific initialization
            await setupIndexPage();
        }

        async function setupIndexPage() {
            // Setup page-specific event listeners
            setupPageEventListeners();

            // Load users
            await getAssignedUsers();

            // Show empty table initially
            showEmptyTable();

            // Setup expense modal for Index page (read-only)
            setupIndexPageExpenseModal();
        }

        function setupPageEventListeners() {
            $('.btnUpdateWorkRecords').on('click', saveWorkRecords);
            $('#user-select').on('change', handleUserSelection);
            $('#year-select, #month-select').on('change', handleDateChange);
            $('.btn-outline-success').on('click', approveWorkRecords);
            $('.btn-outline-danger').on('click', rejectWorkRecords);
            $(document).on('click', '#btnRejectWorkRecordConfirm', async function () {
                await confirmRejectWithReason();
            });

            // Status rejected click handler
            $(document).on('click', '.status-rejected', function () {
                const encoded = $(this).data('reason');
                const reason = encoded ? decodeURIComponent(encoded) : '';
                if (reason) {
                    Swal.fire({
                        title: 'Reddetme Açıklaması',
                        text: reason,
                        icon: 'info'
                    });
                }
            });

            // Saat değişikliklerinde G checkbox kontrolü
            $(document).on('change blur', '.start-time, .end-time, .additional-start-time, .additional-end-time', function () {
                const day = $(this).data('day');
                if (day) {
                    checkNightMealEligibility(day);
                }
            });
        }

        function setupIndexPageExpenseModal() {
            // Setup expense modal for Index page - expenses are editable
            $('#expenseModal').off('show.bs.modal').on('show.bs.modal', function (event) {
                const button = $(event.relatedTarget);
                const day = button.data('day');
                currentEditingDay = day;

                if (day) {
                    const date = new Date(currentYear, currentMonth - 1, day);
                    const dateStr = `${day.toString().padStart(2, '0')}.${currentMonth.toString().padStart(2, '0')}.${currentYear} ${getDayOfWeekTurkish(date.getDay())}`;
                    $('#modalDateInfo').text(dateStr);

                    // Modal başlığını güncelle
                    $('#expenseModalLabel').html(`<i class="fas fa-receipt me-2"></i>${dateStr} - Masraf Bilgileri`);

                    loadExpensesForDay(day);
                    clearExpenseForm();
                }
            });

            // Enable add expense functionality in Index page
            $('#expenseForm').off('submit').on('submit', function (e) {
                e.preventDefault();
                if (this.checkValidity()) {
                    addExpenseToDay();
                }
                $(this).addClass('was-validated');
            });

            // Setup remove expense event listener
            $(document).off('click', '.remove-expense-btn').on('click', '.remove-expense-btn', function () {
                const expenseIndex = $(this).data('index');
                removeExpenseFromDay(expenseIndex);
            });
        }

        // ===== TABLE STATE MANAGEMENT =====
        function handleUserSelection() {
            const selectedUserId = $('#user-select').val();
            if (selectedUserId) {
                loadWorkRecordsByUser();
            } else {
                clearTableData();
            }
        }

        function handleDateChange() {
            const selectedUserId = $('#user-select').val();
            if (selectedUserId) {
                loadWorkRecordsByUser();
            } else {
                showEmptyTable();
            }
        }

        function showEmptyTable() {
            const emptyMessage = `
                                                                                                <tr>
                                                                                                    <td colspan="13" class="text-center py-5">
                                                                                                        <div class="text-muted">
                                                                                                            <i class="fas fa-info-circle fa-2x mb-3"></i>
                                                                                                            <h5>Kullanıcı Seçin</h5>
                                                                                                            <p>Puantaj verilerini görüntülemek için lütfen bir kullanıcı seçin.</p>
                                                                                                        </div>
                                                                                                    </td>
                                                                                                </tr>
                                                                                            `;
            $('#workRecordsTableBody').html(emptyMessage);
        }

        function showNoDataMessage(year, month) {
            const noDataMessage = `
                                                                                                <tr>
                                                                                                    <td colspan="13" class="text-center py-5">
                                                                                                        <div class="text-muted">
                                                                                                            <i class="fas fa-calendar-times fa-2x mb-3 text-warning"></i>
                                                                                                            <h5>Puantaj Verisi Bulunamadı</h5>
                                                                                                            <p>Seçili kullanıcının ${month}/${year} ayına ait puantaj kaydı bulunmamaktadır.</p>
                                                                                                            <small>Personel henüz bu ay için puantaj doldurmamış olabilir.</small>
                                                                                                        </div>
                                                                                                    </td>
                                                                                                </tr>
                                                                                            `;
            $('#workRecordsTableBody').html(noDataMessage);
        }

        function showErrorMessage() {
            const errorMessage = `
                                                                                                <tr>
                                                                                                    <td colspan="13" class="text-center py-5">
                                                                                                        <div class="text-danger">
                                                                                                            <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                                                                                                            <h5>Veri Yükleme Hatası</h5>
                                                                                                            <p>Puantaj verileri yüklenirken bir hata oluştu.</p>
                                                                                                            <button class="btn btn-outline-primary btn-sm" onclick="loadWorkRecordsByUser()">
                                                                                                                <i class="fas fa-redo me-1"></i>Tekrar Dene
                                                                                                            </button>
                                                                                                        </div>
                                                                                                    </td>
                                                                                                </tr>
                                                                                            `;
            $('#workRecordsTableBody').html(errorMessage);
        }

        function clearTableData() {
            showEmptyTable();
            expenseData = {};
        }

        // ===== DATA LOADING FUNCTIONS =====
        async function loadWorkRecordsByUser() {
            const selectedUserId = $('#user-select').val();
            const year = parseInt($('#year-select').val());
            const month = parseInt($('#month-select').val());

            if (!selectedUserId) {
                showEmptyTable();
                return;
            }

            try {
                showTableLoading();
                const formattedDate = `${year}-${String(month).padStart(2, '0')}-01`;

                const response = await $.ajax({
                    url: `/puantaj/liste/kullanici/${selectedUserId}/tarih/${formattedDate}`,
                    type: 'GET'
                });

                if (response.isSuccess && response.data && response.data.length > 0) {
                    await populateTableWithWorkRecords(response.data);
                } else {
                    showNoDataMessage(year, month);
                }
            } catch (error) {
                console.error('Puantaj verileri yüklenirken hata:', error);
                showErrorMessage();
                handleAjaxError(error, 'Puantaj verileri yüklenirken bir hata oluştu');
            } finally {
                hideTableLoading();
            }
        }

        function handleAjaxError(error, defaultMessage = 'Bir hata oluştu') {
            console.error('Ajax Error:', error);

            let errorMessage = defaultMessage;
            if (error.responseJSON) {
                if (error.responseJSON.message) {
                    errorMessage = error.responseJSON.message;
                } else if (error.responseJSON.errors && error.responseJSON.errors.length > 0) {
                    errorMessage = error.responseJSON.errors.join(', ');
                }
            } else if (error.message) {
                errorMessage = error.message;
            }

            toastr.error(errorMessage, 'Hata!');
            return errorMessage;
        }

        async function populateTableWithWorkRecords(workRecords) {
            $('#workRecordsTableBody').empty();
            expenseData = {};

            // Sort records by date
            workRecords.sort((a, b) => new Date(a.date) - new Date(b.date));

            workRecords.forEach(record => {
                const date = new Date(record.date);
                const day = date.getDate();
                const dayOfWeek = getDayOfWeekTurkish(date.getDay());
                const formattedDate = `${day.toString().padStart(2, '0')}.${(date.getMonth() + 1).toString().padStart(2, '0')}.${date.getFullYear()} ${dayOfWeek}`;

                const startTime = formatTimeSpan(record.startTime);
                const endTime = formatTimeSpan(record.endTime);
                let statusBadge = generateStatusBadge(record.status, record.statusText);
                if (record.status === 2) {
                    const reason = record.rejectReason || '';
                    const encoded = encodeURIComponent(reason);
                    const hasReason = !!reason;
                    statusBadge = `
                                                                                                        <span class="badge bg-danger status-rejected" data-reason="${encoded}" title="${hasReason ? 'Reddetme açıklamasını görmek için tıklayın' : 'Reddedildi'}">
                                                                                                            <i class="fas fa-times me-1"></i>Reddedildi${hasReason ? ' <i class=\"fas fa-exclamation-circle ms-1\" title=\"Açıklama var\"></i>' : ''}
                                                                                                        </span>
                                                                                                    `;
                }

                const row = createIndexTableRow(record, day, formattedDate, startTime, endTime, statusBadge);
                $('#workRecordsTableBody').append(row);

                // Populate expense data (sadece görüntüleme)
                if (record.workRecordExpenses && record.workRecordExpenses.length > 0) {
                    expenseData[day] = record.workRecordExpenses.map(exp => ({
                        ...exp,
                        id: exp.id // Mevcut expense'lerin id'sini sakla
                    }));
                    updateExpenseButton(day);
                }
            });

            // Initialize location selects and populate values
            await populateProvincesAndDistricts(workRecords);

            // Re-initialize components
            await initializeAllSelects();

            // G checkbox durumunu kontrol et
            workRecords.forEach(record => {
                const date = new Date(record.date);
                const day = date.getDate();
                checkNightMealEligibility(day);
            });
        }

        function createIndexTableRow(record, day, formattedDate, startTime, endTime, statusBadge) {
            return `
                                                                                                <tr data-day="${day}" data-record-id="${record.id}">
                                                                                                    <td class="date-cell">
                                                                                                        <span class="badge bg-info">${formattedDate}</span>
                                                                                                        ${record.additionalStartTime || record.additionalEndTime ? `
                                                                                                            <br/>
                                                                                                            <button type="button" class="btn btn-xs btn-success additional-time-btn mt-1 w-75" disabled
                                                                                                                data-day="${day}" title="Ek Saat Mevcut">
                                                                                                                Ek Saat
                                                                                                            </button>
                                                                                                        ` : ''}
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        <select class="form-select form-select-sm daily-status-select" data-day="${day}" data-current-value="${record.dailyStatus}">
                                                                                                            <option value="">Günlük durum seçin</option>
                                                                                                        </select>
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        <div class="input-group">
                                                                                                            <input type="text" class="form-control time-input start-time" value="${startTime}" data-day="${day}" placeholder="08:00">
                                                                                                            <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                                                                        </div>
                                                                                                        <div class="additional-time-section" data-day="${day}" style="display: ${record.additionalStartTime ? 'block' : 'none'}; margin-top: 2px;">
                                                                                                            <div class="input-group">
                                                                                                                <input type="text" class="form-control form-control-sm additional-start-time"
                                                                                                                       data-day="${day}" placeholder="Ek Başlangıç" value="${record.additionalStartTime ? formatTimeSpan(record.additionalStartTime) : ''}">
                                                                                                                <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                                                                            </div>
                                                                                                        </div>
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        <div class="input-group">
                                                                                                            <input type="text" class="form-control time-input end-time" value="${endTime}" data-day="${day}" placeholder="17:00">
                                                                                                            <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                                                                        </div>
                                                                                                        <div class="additional-time-section" data-day="${day}" style="display: ${record.additionalEndTime ? 'block' : 'none'}; margin-top: 2px;">
                                                                                                            <div class="input-group">
                                                                                                                <input type="text" class="form-control form-control-sm additional-end-time"
                                                                                                                       data-day="${day}" placeholder="Ek Bitiş" value="${record.additionalEndTime ? formatTimeSpan(record.additionalEndTime) : ''}">
                                                                                                                <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                                                                                            </div>
                                                                                                        </div>
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        <select class="form-select form-select-sm project-select" data-day="${day}" data-current-value="${record.projectId || ''}">
                                                                                                            <option value="">Proje seçin</option>
                                                                                                        </select>
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        <select class="form-select form-select-sm equipment-select" data-day="${day}" data-current-value="${record.equipmentId || ''}">
                                                                                                            <option value="">Ekipman seçin</option>
                                                                                                        </select>
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        <select class="form-select form-select-sm province-select" data-day="${day}">
                                                                                                            <option value="">İl seçin</option>
                                                                                                        </select>
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        <select class="form-select form-select-sm district-select" data-day="${day}">
                                                                                                            <option value="">İlçe seçin</option>
                                                                                                        </select>
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        <button type="button" class="btn btn-primary expense-modal-btn w-100"
                                                                                                                data-day="${day}" data-bs-toggle="modal" data-bs-target="#expenseModal">
                                                                                                            <i class="fas fa-receipt me-1"></i>
                                                                                                            <span class="expense-count" data-day="${day}">0 Masraf<br/><small>₺0,00</small></span>
                                                                                                        </button>
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        <div class="meal-section">
                                                                                                            <div class="meal-item">
                                                                                                                <div class="form-check">
                                                                                                                    <input class="form-check-input meal-checkbox" type="checkbox" id="s_${day}" data-meal="S" data-day="${day}" ${record.hasBreakfast ? 'checked' : ''}>
                                                                                                                    <label class="form-check-label" for="s_${day}">S</label>
                                                                                                                </div>
                                                                                                            </div>
                                                                                                            <div class="meal-item">
                                                                                                                <div class="form-check">
                                                                                                                    <input class="form-check-input meal-checkbox" type="checkbox" id="o_${day}" data-meal="O" data-day="${day}" ${record.hasLunch ? 'checked' : ''}>
                                                                                                                    <label class="form-check-label" for="o_${day}">Ö</label>
                                                                                                                </div>
                                                                                                            </div>
                                                                                                            <div class="meal-item">
                                                                                                                <div class="form-check">
                                                                                                                    <input class="form-check-input meal-checkbox" type="checkbox" id="a_${day}" data-meal="A" data-day="${day}" ${record.hasDinner ? 'checked' : ''}>
                                                                                                                    <label class="form-check-label" for="a_${day}">A</label>
                                                                                                                </div>
                                                                                                            </div>
                                                                                                            <div class="meal-item">
                                                                                                                <div class="form-check">
                                                                                                                    <input class="form-check-input meal-checkbox" type="checkbox" id="g_${day}" data-meal="G" data-day="${day}" ${record.hasNightMeal ? 'checked' : ''} disabled>
                                                                                                                    <label class="form-check-label" for="g_${day}">G</label>
                                                                                                                </div>
                                                                                                            </div>
                                                                                                        </div>
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        <div class="form-check">
                                                                                                            <input class="form-check-input travel-checkbox" type="checkbox" id="t_${day}" data-day="${day}" ${record.hasTravel ? 'checked' : ''}>
                                                                                                            <label class="form-check-label" for="t_${day}">Y</label>
                                                                                                        </div>
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        ${statusBadge}
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        <div class="btn-group btn-group-sm" role="group">
                                                                                                            <button type="button" class="btn btn-outline-success" onclick="approveWorkRecord('${record.id}', '${formattedDate}')">
                                                                                                                <i class="fas fa-thumbs-up"></i>
                                                                                                            </button>
                                                                                                            <button type="button" class="btn btn-outline-danger" onclick="rejectWorkRecord('${record.id}','${formattedDate}')">
                                                                                                                <i class="fas fa-thumbs-down"></i>
                                                                                                            </button>
                                                                                                        </div>
                                                                                                    </td>
                                                                                                </tr>
                                                                                            `;
        }

        // ===== USER MANAGEMENT =====
        async function getAssignedUsers() {
            try {
                const userSelects = $('.user-select');
                if (!userSelects.length) {
                    console.warn('User select elements not found');
                    return;
                }

                userSelects.prop('disabled', true);

                userSelects.each(function () {
                    const currentSelect = $(this);
                    currentSelect.empty();
                    currentSelect.append('<option value="">Yükleniyor...</option>');

                    if (currentSelect.hasClass('select2-hidden-accessible')) {
                        currentSelect.trigger('change');
                    }
                });

                const response = await $.ajax({
                    url: '/kullanici/liste',
                    type: 'GET',
                    dataType: 'json'
                });

                if (response && response.isSuccess && response.data) {
                    userSelects.each(function () {
                        const currentSelect = $(this);
                        currentSelect.empty();
                        currentSelect.append('<option value="">Kullanıcı seçin</option>');

                        response.data.forEach(user => {
                            currentSelect.append(`<option value="${user.id}">${user.fullNameWithExp}</option>`);
                        });

                        if (currentSelect.hasClass('select2-hidden-accessible')) {
                            currentSelect.trigger('change');
                        }
                    });
                } else {
                    throw new Error(response?.message || 'Atanmış kullanıcılar yüklenemedi');
                }
            } catch (error) {
                console.error('Atanmış kullanıcılar yüklenirken hata:', error);

                $('.user-select').each(function () {
                    const currentSelect = $(this);
                    currentSelect.html('<option value="">Kullanıcılar yüklenemedi</option>');

                    if (currentSelect.hasClass('select2-hidden-accessible')) {
                        currentSelect.trigger('change');
                    }
                });

                handleAjaxError(error, 'Atanmış kullanıcılar yüklenirken hata oluştu');
            } finally {
                $('.user-select').prop('disabled', false);
            }
        }

        // ===== WORK RECORD ACTIONS =====
        async function approveWorkRecord(id, date) {
            try {
                const result = await Swal.fire({
                    title: 'Puantajı Onayla',
                    text: `Bu kullanıcının ${date} puantajını onaylamak istediğinizden emin misiniz?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-check"></i> Evet, Onayla',
                    cancelButtonText: '<i class="fas fa-times"></i> İptal',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const response = await $.ajax({
                                url: `/puantaj/onayla/${id}`,
                                type: 'PUT',
                                headers: {
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                }
                            });
                            if (!response.isSuccess) {
                                Swal.showValidationMessage(`Hata: ${response.message}`);
                                throw new Error(response.message);
                            }
                            return response;
                        } catch (error) {
                            handleAjaxError(error, 'Onaylama başarısız');
                           
                            return false;
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    toastr.success('Puantaj başarıyla onaylandı', 'Başarılı!');
                    await loadWorkRecordsByUser();
                }
            } catch (error) {
                console.error('Onaylama hatası:', error);
            }
        }

        async function rejectWorkRecord(id, date) {
            try {
                $('#txtRejectWorkRecordId').val(id);
                $('#txtRejectMode').val('single');
                $('#txtWorkRecordRejectReason').val('');
                $('#rejectWorkRecordModal').modal('show');
            } catch (error) {
                console.error('Reddetme modalı açılırken hata:', error);
            }
        }

        // ===== SAVE AND APPROVAL FUNCTIONS =====
        async function saveWorkRecords() {
            const workRecords = [];
            const selectedUserId = $('#user-select').val();

            if (!selectedUserId) {
                toastr.warning('Lütfen bir kullanıcı seçin', 'Uyarı!');
                return;
            }

            $('#workRecordsTableBody tr').each(function () {
                if ($(this).find('td').length === 1) return; // Skip message rows

                const day = $(this).data('day');
                const dailyStatus = $(this).find('.daily-status-select').val();
                const startTime = $(this).find('.start-time').val();
                const endTime = $(this).find('.end-time').val();
                const additionalStartTime = $(this).find('.additional-start-time').val();
                const additionalEndTime = $(this).find('.additional-end-time').val();
                const projectId = $(this).find('.project-select').val();
                const equipmentId = $(this).find('.equipment-select').val();
                const province = $(this).find('.province-select').val();
                const district = $(this).find('.district-select').val();

                const dayExpenses = expenseData[day] || [];
                const expenses = dayExpenses.map(exp => ({
                    id: exp.id,
                    expenseId: exp.expenseId,
                    description: exp.description || null,
                    amount: exp.amount,
                    receiptFile: exp.receiptFile || null
                }));

                const hasBreakfast = $(this).find('.meal-checkbox[data-meal="S"]').is(':checked');
                const hasLunch = $(this).find('.meal-checkbox[data-meal="O"]').is(':checked');
                const hasDinner = $(this).find('.meal-checkbox[data-meal="A"]').is(':checked');
                const hasNightMeal = $(this).find('.meal-checkbox[data-meal="G"]').is(':checked');
                const hasTravel = $(this).find('.travel-checkbox').is(':checked');
                const formattedDate = `${currentYear}-${String(currentMonth).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

                workRecords.push({
                    Date: formattedDate,
                    DailyStatus: dailyStatus,
                    StartTime: startTime,
                    EndTime: endTime,
                    AdditionalStartTime: additionalStartTime || "",
                    AdditionalEndTime: additionalEndTime || "",
                    ProjectId: projectId,
                    EquipmentId: equipmentId,
                    Province: province,
                    District: district,
                    HasBreakfast: hasBreakfast,
                    HasLunch: hasLunch,
                    HasDinner: hasDinner,
                    HasNightMeal: hasNightMeal,
                    HasTravel: hasTravel,
                    WorkRecordExpenses: expenses,
                    UserId: selectedUserId
                });
            });

            try {
                $('.btnUpdateWorkRecords').prop('disabled', true).html('<i class="fas fa-spinner fa-spin me-2"></i>Güncelleniyor...');

                // FormData oluştur
                const formData = new FormData();
                formData.append('__RequestVerificationToken', $('input[name="__RequestVerificationToken"]').val());

                // Her work record için form data ekle
                workRecords.forEach((record, index) => {
                    formData.append(`[${index}].Date`, record.Date);
                    formData.append(`[${index}].DailyStatus`, record.DailyStatus);
                    formData.append(`[${index}].StartTime`, record.StartTime);
                    formData.append(`[${index}].EndTime`, record.EndTime);
                    formData.append(`[${index}].AdditionalStartTime`, record.AdditionalStartTime);
                    formData.append(`[${index}].AdditionalEndTime`, record.AdditionalEndTime);
                    formData.append(`[${index}].ProjectId`, record.ProjectId);
                    formData.append(`[${index}].EquipmentId`, record.EquipmentId);
                    formData.append(`[${index}].Province`, record.Province);
                    formData.append(`[${index}].District`, record.District);
                    formData.append(`[${index}].HasBreakfast`, record.HasBreakfast);
                    formData.append(`[${index}].HasLunch`, record.HasLunch);
                    formData.append(`[${index}].HasDinner`, record.HasDinner);
                    formData.append(`[${index}].HasNightMeal`, record.HasNightMeal);
                    formData.append(`[${index}].HasTravel`, record.HasTravel);
                    formData.append(`[${index}].UserId`, record.UserId);

                    // Expenses için
                    if (record.WorkRecordExpenses && record.WorkRecordExpenses.length > 0) {
                        record.WorkRecordExpenses.forEach((expense, expIndex) => {
                            formData.append(`[${index}].WorkRecordExpenses[${expIndex}].Id`, expense.id);
                            formData.append(`[${index}].WorkRecordExpenses[${expIndex}].ExpenseId`, expense.expenseId);
                            formData.append(`[${index}].WorkRecordExpenses[${expIndex}].Description`, expense.description || "");
                            formData.append(`[${index}].WorkRecordExpenses[${expIndex}].Amount`, expense.amount);
                            // File upload için - sadece yeni dosyalar için
                            if (expense.receiptFile) {
                                formData.append(`[${index}].WorkRecordExpenses[${expIndex}].File.FormFile`, expense.receiptFile);
                            }
                        });
                    }
                });

                const response = await $.ajax({
                    url: `/puantaj/toplu-guncelle/kullanici/${selectedUserId}`,
                    type: 'PUT',
                    data: formData,
                    processData: false,
                    contentType: false
                });

                if (response.isSuccess) {
                    toastr.success(response.message, 'Başarılı!');
                    await loadWorkRecordsByUser();
                } else {
                    toastr.error(response.message, 'Hata!');
                }
            } catch (error) {
                handleAjaxError(error, 'Puantaj kaydedilirken bir hata oluştu.');
            } finally {
                $('.btnUpdateWorkRecords').prop('disabled', false)
                    .html('<i class="fas fa-edit me-2"></i>Güncelle');
            }
        }

        async function approveWorkRecords() {
            const selectedUserId = $('#user-select').val();
            const year = parseInt($('#year-select').val());
            const month = parseInt($('#month-select').val());

            if (!selectedUserId) {
                toastr.warning('Lütfen bir kullanıcı seçin', 'Uyarı!');
                return;
            }

            try {
                const result = await Swal.fire({
                    title: 'Puantajı Onayla',
                    text: `Bu kullanıcının ${month}/${year} puantajını onaylamak istediğinizden emin misiniz?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: '<i class="fas fa-check"></i> Evet, Onayla',
                    cancelButtonText: '<i class="fas fa-times"></i> İptal',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const formattedDate = `${year}-${String(month).padStart(2, '0')}-01`;

                            const response = await $.ajax({
                                url: `/puantaj/toplu-onayla/kullanici/${selectedUserId}/tarih/${formattedDate}`,
                                type: 'PUT',
                                headers: {
                                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                                }
                            });

                            if (!response.isSuccess) {
                                Swal.showValidationMessage(`Hata: ${response.message}`);
                                throw new Error(response.message);
                            }

                            return response;
                        } catch (error) {
                                            handleAjaxError(error, 'Onaylama başarısız');
                            return false;
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    toastr.success('Puantaj başarıyla onaylandı', 'Başarılı!');
                    await loadWorkRecordsByUser();
                }
            } catch (error) {
                console.error('Onaylama hatası:', error);
            }
        }

        async function rejectWorkRecords() {
            const selectedUserId = $('#user-select').val();
   

            if (!selectedUserId) {
                toastr.warning('Lütfen bir kullanıcı seçin', 'Uyarı!');
                return;
            }

            try {
                $('#txtRejectWorkRecordId').val('');
                $('#txtRejectMode').val('bulk');
                $('#txtWorkRecordRejectReason').val('');
                $('#rejectWorkRecordModal').modal('show');
            } catch (error) {
                console.error('Toplu reddetme modalı açılırken hata:', error);
            }
        }

             async function confirmRejectWithReason() {
            try {
                const mode = $('#txtRejectMode').val();
                const reason = ($('#txtWorkRecordRejectReason').val() || '').trim();
                if (mode === 'single') {
                    const id = $('#txtRejectWorkRecordId').val();
                    const url = `/puantaj/reddet/${id}${reason ? `?rejectReason=${encodeURIComponent(reason)}` : ''}`;
                    const response = await $.ajax({
                        url: url,
                        type: 'PUT',
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        }
                    });
                    if (response.isSuccess) {
                        toastr.success('Puantaj başarıyla reddedildi', 'Başarılı!');
                        $('#rejectWorkRecordModal').modal('hide');
                        await loadWorkRecordsByUser();
                    }
                } else if (mode === 'bulk') {
                    const selectedUserId = $('#user-select').val();
                    const year = parseInt($('#year-select').val());
                    const month = parseInt($('#month-select').val());
                    const formattedDate = `${year}-${String(month).padStart(2, '0')}-01`;
                    const url = `/puantaj/toplu-reddet/kullanici/${selectedUserId}/tarih/${formattedDate}${reason ? `?rejectReason=${encodeURIComponent(reason)}` : ''}`;
                    const response = await $.ajax({
                        url: url,
                        type: 'PUT',
                        headers: {
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        }
                    });
                    if (response.isSuccess) {
                        toastr.success('Puantaj başarıyla reddedildi', 'Başarılı!');
                        $('#rejectWorkRecordModal').modal('hide');
                        await loadWorkRecordsByUser();
                    }
                }
            } catch (error) {
                handleAjaxError(error, 'Reddetme başarısız'); 
            }
        }
    </script>
}
